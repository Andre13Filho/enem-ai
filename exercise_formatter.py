#!/usr/bin/env python3
"""
Fun√ß√µes de formata√ß√£o de exerc√≠cios
Separado do app.py para evitar conflitos de importa√ß√£o
"""

import re
import streamlit as st
from typing import Dict, List


def display_exercise_card(exercise: dict, unique_id: str, exercise_num: int, collapsed: bool = False):
    """Exibe um exerc√≠cio em formato de card bem organizado"""
    
    # Informa√ß√µes do exerc√≠cio
    year = exercise.get('year', 'N/A')
    question_num = exercise.get('question_number', 'N/A')
    subject_area = exercise.get('subject_area', 'N/A')
    topic = exercise.get('topic', 'N/A')
    content = exercise.get('content', '')
    
    # Header do exerc√≠cio com informa√ß√µes principais
    st.markdown(f"""
    <div style="
        background: linear-gradient(90deg, #f8fafc 0%, #e2e8f0 100%);
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #09278d;
        margin: 1rem 0;
    ">
        <h4 style="margin: 0; color: #09278d;">
            üìù Exerc√≠cio {exercise_num} - ENEM {year} (Quest√£o {question_num})
        </h4>
        <p style="margin: 0.5rem 0 0 0; color: #64748b;">
            <strong>√Årea:</strong> {subject_area} | <strong>T√≥pico:</strong> {topic}
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Controles do exerc√≠cio
    col1, col2, col3 = st.columns([1, 1, 2])
    
    with col1:
        show_preview = st.button(
            "üëÅÔ∏è Preview", 
            key=f"preview_{unique_id}",
            help="Ver resumo do exerc√≠cio"
        )
    
    with col2:
        show_full = st.button(
            "üìñ Completo", 
            key=f"full_{unique_id}",
            help="Ver exerc√≠cio completo"
        )
    
    with col3:
        difficulty = get_exercise_difficulty(content)
        st.markdown(f"**Dificuldade:** {difficulty}")
    
    # Exibi√ß√£o do conte√∫do baseado no bot√£o clicado
    if show_preview:
        st.markdown("#### üëÅÔ∏è Preview do Exerc√≠cio")
        preview_content = clean_exercise_content(content[:400])
        if len(content) > 400:
            preview_content += "\n\n... *[clique em 'Completo' para ver o resto]*"
        
        st.markdown(f"""
        <div style="
            background-color: #f1f5f9;
            padding: 1rem;
            border-radius: 8px;
            border: 1px solid #cbd5e1;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
        ">
            {format_exercise_content(preview_content)}
        </div>
        """, unsafe_allow_html=True)
    
    if show_full:
        st.markdown("#### üìñ Exerc√≠cio Completo")
        formatted_content = clean_exercise_content(content)
        
        st.markdown(f"""
        <div style="
            background-color: #ffffff;
            padding: 1.5rem;
            border-radius: 10px;
            border: 2px solid #e2e8f0;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.7;
        ">
            {format_exercise_content(formatted_content)}
        </div>
        """, unsafe_allow_html=True)
        
        # Bot√µes de a√ß√£o para exerc√≠cio completo
        col_a, col_b, col_c = st.columns(3)
        
        with col_a:
            if st.button(f"üí¨ Discutir", key=f"discuss_{unique_id}"):
                st.session_state[f"discuss_exercise_{unique_id}"] = True
        
        with col_b:
            if st.button(f"üîó Conceitos", key=f"concepts_{unique_id}"):
                st.session_state[f"concepts_exercise_{unique_id}"] = True
        
        with col_c:
            if st.button(f"üìö Dicas", key=f"tips_{unique_id}"):
                st.session_state[f"tips_exercise_{unique_id}"] = True
        
        # Se√ß√µes adicionais baseadas nos bot√µes
        if st.session_state.get(f"discuss_exercise_{unique_id}", False):
            st.markdown("üí¨ **Para discutir este exerc√≠cio:**")
            st.info("V√° para a aba 'Chat' e pergunte: 'Professor, pode me ajudar com este exerc√≠cio do ENEM " + 
                   f"{year}, quest√£o {question_num}? Estou com d√∫vida em...'")
        
        if st.session_state.get(f"concepts_exercise_{unique_id}", False):
            st.markdown("üîó **Conceitos relacionados:**")
            concepts = extract_key_concepts(content, topic)
            for concept in concepts:
                st.markdown(f"‚Ä¢ {concept}")
        
        if st.session_state.get(f"tips_exercise_{unique_id}", False):
            st.markdown("üìö **Dicas de resolu√ß√£o:**")
            tips = get_exercise_tips(topic, content)
            for tip in tips:
                st.markdown(f"üí° {tip}")


def clean_exercise_content(content: str) -> str:
    """Limpa e formata o conte√∫do do exerc√≠cio"""
    
    # Remove caracteres especiais desnecess√°rios
    content = content.replace("\\n", "\n")
    content = content.replace("\\t", " ")
    
    # Remove m√∫ltiplas quebras de linha
    content = re.sub(r'\n\s*\n\s*\n', '\n\n', content)
    
    return content.strip()


def detect_and_fix_corrupted_alternatives(content: str) -> str:
    """Detecta e corrige alternativas corrompidas com n√∫meros e s√≠mbolos"""
    
    # Padr√£o para detectar alternativas corrompidas: letra seguida de lixo
    corrupted_pattern = r'([A-E])\s*(?:\d+\s*\n?|[+√ó\-=]+\s*\n?)*'
    
    # Verifica se h√° muitas alternativas corrompidas
    corrupted_matches = re.findall(corrupted_pattern, content)
    
    if len(corrupted_matches) >= 3:  # Se 3+ alternativas est√£o corrompidas
        print("Detectadas alternativas corrompidas, tentando corrigir...")
        
        # Remove todas as linhas que s√£o s√≥ n√∫meros ou s√≠mbolos ap√≥s as letras
        lines = content.split('\n')
        cleaned_lines = []
        
        skip_next_garbage = False
        
        for i, line in enumerate(lines):
            line = line.strip()
            
            # Se √© uma linha com letra de alternativa
            if re.match(r'^[A-E]\s*', line):
                # Pega s√≥ a letra e remove o resto se for lixo
                letter_match = re.match(r'^([A-E])\s*(.*)$', line)
                if letter_match:
                    letter = letter_match.group(1)
                    rest = letter_match.group(2).strip()
                    
                    # Se o resto √© s√≥ n√∫meros/s√≠mbolos, descarta
                    if not rest or re.match(r'^[\d\s+√ó\-=]+$', rest):
                        # Para a quest√£o 180 espec√≠fica, temos as alternativas corretas
                        questao_180_alternativas = {
                            'A': '1 ano e 8 meses a 12 anos e 6 meses.',
                            'B': '1 ano e 8 meses a 5 anos.',
                            'C': '3 anos e 4 meses a 10 anos.',
                            'D': '4 anos e 2 meses a 5 anos.',
                            'E': '4 anos e 2 meses a 12 anos e 6 meses.'
                        }
                        
                        # Se √© a quest√£o 180 e temos alternativa conhecida
                        if "artigo 33 da lei brasileira sobre drogas" in content and letter in questao_180_alternativas:
                            cleaned_lines.append(f"{letter}) {questao_180_alternativas[letter]}")
                        else:
                            cleaned_lines.append(f"{letter}) [Conte√∫do n√£o dispon√≠vel]")
                        skip_next_garbage = True
                    else:
                        cleaned_lines.append(line)
                        skip_next_garbage = False
                else:
                    cleaned_lines.append(line)
                    skip_next_garbage = False
            
            # Se √© uma linha s√≥ com n√∫meros/s√≠mbolos, pula se estamos em modo skip
            elif re.match(r'^[\d\s+√ó\-=]+$', line) and skip_next_garbage:
                continue
            
            # Sen√£o, mant√©m a linha e para de pular
            else:
                cleaned_lines.append(line)
                skip_next_garbage = False
        
        content = '\n'.join(cleaned_lines)
        print("Alternativas corrompidas foram corrigidas")
    
    return content

def format_exercise_content(content: str) -> str:
    """Formata o conte√∫do do exerc√≠cio para HTML"""
    
    # Limpa o conte√∫do primeiro
    content = clean_exercise_content(content)
    
    # Detecta e corrige alternativas corrompidas PRIMEIRO
    content = detect_and_fix_corrupted_alternatives(content)
    
    # Formatar alternativas de m√∫ltipla escolha
    content = format_multiple_choice_alternatives(content)
    
    # Substitui quebras de linha por <br>, mas preserva alternativas formatadas
    content = content.replace('\n\n', '</p><p>')
    content = content.replace('\n', '<br>')
    
    # Adiciona par√°grafos
    content = f'<p>{content}</p>'
    
    # Destaca alternativas (A), (B), (C), (D), (E) - caso n√£o foram formatadas antes
    content = re.sub(r'\(([A-E])\)', r'<strong style="color: #09278d;">(\1)</strong>', content)
    
    # Destaca n√∫meros importantes (mas n√£o dentro das alternativas j√° formatadas)
    # Evita n√∫meros dentro de divs de alternativas
    if '<div class="alternative">' not in content:
        content = re.sub(r'\b(\d+(?:,\d+)*(?:\.\d+)?)\b', r'<strong>\1</strong>', content)
    
    return content


def format_multiple_choice_alternatives(content: str) -> str:
    """Formata especificamente as alternativas de m√∫ltipla escolha"""
    
    # Padr√µes para detectar alternativas (incluindo casos problem√°ticos)
    patterns = [
        # Padr√£o: A) ou (A) seguido de conte√∫do
        r'([A-E])\)\s*([^\n\r]+?)(?=\s*[B-E]\)|$)',
        r'\(([A-E])\)\s*([^\n\r]+?)(?=\s*\([B-E]\)|$)',
        # Padr√£o: A 1234... (letra seguida de espa√ßo e n√∫meros/texto) - vers√£o melhorada
        r'\b([A-E])\s+((?:[^\n\r]*?\n?)*?)(?=\s*[B-E]\s+|$)',
        # Padr√£o espec√≠fico para texto bagun√ßado: A seguido de linhas de lixo at√© pr√≥xima letra
        r'([A-E])\s*\n?((?:\d+\s*\n?|[+√ó\-=]+\s*\n?)*?)(?=[B-E]\s*\n?|\n[B-E]|$)',
    ]
    
    # Tenta encontrar alternativas usando diferentes padr√µes
    alternatives_found = []
    
    for pattern in patterns:
        matches = re.finditer(pattern, content, re.MULTILINE | re.DOTALL)
        temp_alternatives = []
        
        for match in matches:
            letter = match.group(1)
            text = match.group(2).strip()
            
            # Limpa o texto da alternativa
            text = clean_alternative_text(text)
            
            if text and len(text) > 0:  # S√≥ adiciona se tem conte√∫do v√°lido
                temp_alternatives.append((letter, text, match.span()))
        
        # Se encontrou um conjunto completo de alternativas (pelo menos 3)
        if len(temp_alternatives) >= 3:
            alternatives_found = temp_alternatives
            break
    
    # Se encontrou alternativas, formata elas
    if alternatives_found:
        # Ordena por posi√ß√£o no texto
        alternatives_found.sort(key=lambda x: x[2][0])
        
        # Cria HTML formatado para as alternativas
        alternatives_html = '<div class="alternatives-container" style="margin: 1rem 0; padding: 1rem; background-color: #f8fafc; border-radius: 8px; border-left: 4px solid #3b82f6;">'
        
        for letter, text, _ in alternatives_found:
            alternatives_html += f'''
            <div class="alternative" style="margin: 0.5rem 0; padding: 0.5rem; background-color: white; border-radius: 4px; display: flex; align-items: flex-start;">
                <span style="background-color: #09278d; color: white; font-weight: bold; padding: 0.2rem 0.5rem; border-radius: 50%; margin-right: 0.8rem; min-width: 1.5rem; text-align: center;">{letter}</span>
                <span style="flex: 1; line-height: 1.4;">{text}</span>
            </div>'''
        
        alternatives_html += '</div>'
        
        # Remove as alternativas originais do conte√∫do
        for letter, text, span in reversed(alternatives_found):
            content = content[:span[0]] + content[span[1]:]
        
        # Adiciona as alternativas formatadas no final
        content = content.strip() + '\n\n' + alternatives_html
    
    return content


def clean_alternative_text(text: str) -> str:
    """Limpa o texto de uma alternativa de forma inteligente"""
    
    if not text:
        return ""
    
    # Remove caracteres especiais no in√≠cio e fim
    text = text.strip()
    
    # Casos especiais: se o texto √© s√≥ n√∫meros e s√≠mbolos, tenta reconstruir
    if re.match(r'^[\d\s+√ó\-=]+$', text):
        # Para casos como "1 251 251 25++" - remove tudo
        return ""
    
    # Remove quebras de linha e m√∫ltiplos espa√ßos
    text = re.sub(r'\s+', ' ', text)
    
    # Remove n√∫meros soltos no in√≠cio repetidamente
    text = re.sub(r'^(\d+\s*)+', '', text)
    
    # Remove sequ√™ncias de n√∫meros no meio do texto
    text = re.sub(r'\b\d{3,}\b', '', text)  # Remove n√∫meros com 3+ d√≠gitos
    
    # Remove s√≠mbolos repetidos (como "++" ou "√ó√ó")
    text = re.sub(r'([+\-√ó√∑=<>])\1+', '', text)
    
    # Remove caracteres especiais soltos
    text = re.sub(r'\s*[+√ó\-=]{1,}\s*', ' ', text)
    
    # Remove m√∫ltiplos espa√ßos novamente
    text = re.sub(r'\s+', ' ', text)
    
    # Remove caracteres especiais no in√≠cio e fim
    text = re.sub(r'^[^\w\d\(\)]+', '', text)
    text = re.sub(r'[^\w\d\s.,%()/-]+$', '', text)
    
    # Se sobrou texto muito curto ou apenas n√∫meros, descarta
    if len(text.strip()) < 3 or re.match(r'^[\d\s]+$', text.strip()):
        return ""
    
    # Limita o tamanho m√°ximo
    if len(text) > 200:
        text = text[:200] + "..."
    
    return text.strip()


def get_exercise_difficulty(content: str) -> str:
    """Determina a dificuldade do exerc√≠cio baseado em heur√≠sticas"""
    
    content_lower = content.lower()
    
    # Palavras que indicam maior dificuldade
    hard_indicators = ['demonstre', 'prove', 'calcule', 'determine', 'analise', 'interprete']
    medium_indicators = ['encontre', 'resolva', 'obtenha', 'considere']
    
    hard_count = sum(1 for word in hard_indicators if word in content_lower)
    medium_count = sum(1 for word in medium_indicators if word in content_lower)
    
    # Tamb√©m considera o tamanho do texto
    if len(content) > 800 or hard_count >= 2:
        return "üî¥ Dif√≠cil"
    elif len(content) > 400 or medium_count >= 2 or hard_count >= 1:
        return "üü° M√©dio"
    else:
        return "üü¢ F√°cil"


def extract_key_concepts(content: str, topic: str) -> List[str]:
    """Extrai conceitos-chave do exerc√≠cio"""
    
    content_lower = content.lower()
    
    concept_keywords = {
        'fun√ß√£o': ['fun√ß√£o', 'gr√°fico', 'dom√≠nio', 'imagem', 'vari√°vel'],
        'geometria': ['√°rea', 'volume', 'per√≠metro', 'tri√¢ngulo', 'c√≠rculo', '√¢ngulo'],
        'trigonometria': ['seno', 'cosseno', 'tangente', 'radiano', 'grau'],
        'probabilidade': ['probabilidade', 'evento', 'amostra', 'espa√ßo amostral'],
        'estat√≠stica': ['m√©dia', 'mediana', 'moda', 'desvio', 'vari√¢ncia'],
        '√°lgebra': ['equa√ß√£o', 'inequa√ß√£o', 'sistema', 'vari√°vel']
    }
    
    concepts = []
    topic_lower = topic.lower()
    
    for category, keywords in concept_keywords.items():
        if category in topic_lower:
            for keyword in keywords:
                if keyword in content_lower:
                    concepts.append(keyword.title())
    
    # Se n√£o encontrou conceitos espec√≠ficos, use conceitos gerais
    if not concepts:
        general_concepts = ['Resolu√ß√£o de problemas', 'Interpreta√ß√£o de texto', 'C√°lculos matem√°ticos']
        concepts = general_concepts[:2]
    
    return list(set(concepts))[:5]  # M√°ximo 5 conceitos √∫nicos


def get_exercise_tips(topic: str, content: str) -> List[str]:
    """Gera dicas de resolu√ß√£o baseadas no t√≥pico"""
    
    topic_lower = topic.lower()
    
    tips = []
    
    if 'fun√ß√£o' in topic_lower:
        tips = [
            "Identifique o tipo de fun√ß√£o (linear, quadr√°tica, etc.)",
            "Analise o dom√≠nio e imagem quando necess√°rio",
            "Use gr√°ficos para visualizar o comportamento"
        ]
    elif 'geometria' in topic_lower:
        tips = [
            "Desenhe a figura se n√£o estiver fornecida",
            "Identifique as f√≥rmulas de √°rea/volume necess√°rias",
            "Verifique se todas as unidades est√£o compat√≠veis"
        ]
    elif 'trigonometria' in topic_lower:
        tips = [
            "Identifique qual raz√£o trigonom√©trica usar",
            "Lembre-se: SOH-CAH-TOA",
            "Converta entre graus e radianos se necess√°rio"
        ]
    elif 'probabilidade' in topic_lower:
        tips = [
            "Defina claramente o espa√ßo amostral",
            "Identifique se os eventos s√£o independentes",
            "Use a regra da multiplica√ß√£o ou adi√ß√£o conforme o caso"
        ]
    else:
        tips = [
            "Leia o problema com aten√ß√£o e identifique o que √© pedido",
            "Organize os dados fornecidos",
            "Verifique se a resposta faz sentido no contexto"
        ]
    
    return tips[:3]  # M√°ximo 3 dicas 