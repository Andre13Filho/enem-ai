import streamlit as st
from local_biology_rag import biology_rag_system
import os
from encoding_utils import safe_str

def setup_professor_roberto_local_ui():
    """Configura interface do Professor Roberto (Biologia Local)"""
    
    st.markdown("### üß¨ Professor Roberto - Biologia")
    st.markdown("**Sistema RAG Local com base de conhecimento em Biologia**")
    
    # Status do sistema RAG
    with st.expander("üìä Status do Sistema", expanded=False):
        if biology_rag_system.embeddings is None:
            st.error("‚ùå Sistema de embeddings n√£o inicializado")
            return
        
        # Informa√ß√µes sobre documentos
        docs_path = biology_rag_system.biology_folder_path
        if os.path.exists(docs_path):
            if os.listdir(docs_path):
                st.success(f"‚úÖ Pasta de biologia encontrada com {len(os.listdir(docs_path))} arquivos")
            else:
                st.warning("‚ö†Ô∏è Pasta de biologia est√° vazia")
        else:
            st.error("‚ùå Pasta 'biologia' n√£o encontrada")
        
        # Status do vectorstore
        vectorstore_path = biology_rag_system.persist_directory
        if os.path.exists(vectorstore_path):
            st.success("‚úÖ Base de conhecimento (vectorstore) existe")
        else:
            st.info("‚ÑπÔ∏è Base de conhecimento ser√° criada no primeiro uso")
    
    # Controles do sistema
    with st.expander("üîß Controles do Sistema", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîÑ Recriar Base", help="Reprocessa todos os documentos"):
                with st.spinner("Recriando base de conhecimento..."):
                    success = biology_rag_system.process_biology_documents()
                    if success:
                        st.success("‚úÖ Base recriada com sucesso!")
                    else:
                        st.error("‚ùå Erro ao recriar base")
        
        with col2:
            if st.button("üß™ Testar Sistema", help="Testa uma consulta simples"):
                with st.spinner("Testando sistema..."):
                    test_query = "O que √© uma c√©lula?"
                    try:
                        # Inicializa vectorstore se necess√°rio
                        if not biology_rag_system.vectorstore:
                            biology_rag_system.load_existing_vectorstore()
                        
                        docs = biology_rag_system.search_relevant_content(test_query, k=1)
                        if docs:
                            st.success(f"‚úÖ Sistema funcionando! Encontrou {len(docs)} documento(s)")
                        else:
                            st.warning("‚ö†Ô∏è Sistema funcionando, mas nenhum documento encontrado")
                    except Exception as e:
                        st.error(f"‚ùå Erro no teste: {safe_str(e)}")
    
    # Dicas de uso
    with st.expander("üí° Dicas de Uso", expanded=False):
        st.markdown("""
        **Professor Roberto - Especialista em Biologia:**
        - üß¨ Acesso direto aos seus materiais de biologia
        - üé¨ Usa analogias das suas s√©ries favoritas (FRIENDS, Big Bang Theory, etc.)
        - üìö Baseado nos documentos da pasta `/biologia`
        - üéØ Foco total no ENEM
        - üí¨ Linguagem adequada para jovens de 17 anos
        
        **Exemplos de perguntas:**
        - "Como funciona a fotoss√≠ntese?"
        - "Explique a divis√£o celular"
        - "O que √© gen√©tica mendeliana?"
        - "Como funciona o sistema circulat√≥rio?"
        """)

def get_professor_roberto_local_response(user_message: str, api_key: str) -> str:
    """Gera resposta do Professor Roberto usando RAG local"""
    
    try:
        # Verifica se RAG chain existe, se n√£o, cria
        if not biology_rag_system.rag_chain:
            # Carrega vectorstore se necess√°rio
            if not biology_rag_system.vectorstore:
                success = biology_rag_system.load_existing_vectorstore()
                if not success:
                    # Se n√£o existe, processa documentos
                    success = biology_rag_system.process_biology_documents()
                    if not success:
                        return """
‚ùå **Erro ao inicializar sistema de biologia**

N√£o foi poss√≠vel carregar a base de conhecimento. Verifique:
1. Se a pasta `biologia` existe e cont√©m documentos
2. Se as depend√™ncias est√£o instaladas
3. Se h√° espa√ßo em disco suficiente

üí° Use os controles na barra lateral para diagn√≥stico.
"""
            
            # Cria chain RAG
            biology_rag_system.create_rag_chain(api_key)
        
        # Gera resposta usando RAG
        result = biology_rag_system.get_response(user_message)
        response = result.get("answer", "‚ùå Erro ao gerar resposta")
        
        # Aplica formata√ß√£o espec√≠fica de biologia
        try:
            from biology_formatter import format_biology_response
            response = format_biology_response(response)
        except ImportError:
            pass
            
        return response
        
    except Exception as e:
        error_msg = safe_str(e)
        return f"""
‚ùå **Erro no Professor Roberto**

Detalhes do erro: {error_msg}

üí° **Poss√≠veis solu√ß√µes:**
1. Verifique se a pasta `biologia` cont√©m documentos
2. Reinstale as depend√™ncias: `pip install langchain chromadb sentence-transformers`
3. Verifique sua conex√£o com a internet
4. Tente recriar a base de conhecimento na barra lateral
""" 