"""
Professor Fernando com Sistema RAG Local
Usa documentos locais da pasta f√≠sica em vez da API do Google Drive
"""

import streamlit as st
from typing import Dict, Any, Optional, List
from datetime import datetime
import os

# Importa sistema RAG local
try:
    from local_physics_rag import LocalPhysicsRAG, local_physics_rag
    from enem_exercises_rag import ENEMExercisesRAG
    LOCAL_RAG_AVAILABLE = True
except ImportError:
    LOCAL_RAG_AVAILABLE = False

# Importa sistema de analogias da Sther V2
try:
    from new_analogies_system import add_analogy_if_confused
    ANALOGIES_AVAILABLE = True
    print("‚úÖ Sistema de analogias V2 baseado nas s√©ries carregado")
except ImportError:
    ANALOGIES_AVAILABLE = False
    print("‚ö†Ô∏è Sistema de analogias da Sther n√£o dispon√≠vel")

class ProfessorFernandoLocal:
    """Professor Fernando especializado usando documentos locais"""
    
    def __init__(self):
        self.rag_system = None
        self.exercises_rag = None
        self.current_api_key = None
        self.is_initialized = False
        
        if LOCAL_RAG_AVAILABLE:
            self.rag_system = local_physics_rag
            self.exercises_rag = ENEMExercisesRAG()
    
    def initialize_system(self, api_key: str) -> bool:
        """Inicializa o sistema RAG local com melhor tratamento de erros"""
        if not LOCAL_RAG_AVAILABLE:
            st.error("Sistema RAG local n√£o dispon√≠vel. Verifique local_physics_rag.py")
            return False
        
        try:
            st.info("üîÑ Inicializando sistema RAG de F√≠sica...")
            
            # Tenta carregar vectorstore existente primeiro ou criar em mem√≥ria
            if self.rag_system.load_existing_vectorstore():
                st.info("üìö Base de conhecimento carregada!")
                try:
                    self.rag_system.create_rag_chain(api_key)
                    self.current_api_key = api_key
                    self.is_initialized = True
                    st.success("‚úÖ Sistema RAG de F√≠sica inicializado com sucesso!")
                    return True
                except Exception as chain_error:
                    st.error(f"Erro ao criar cadeia RAG: {str(chain_error)}")
                    return False
            else:
                # Se load_existing_vectorstore falhou, tenta processar documentos
                st.info("üîÑ Processando documentos de f√≠sica...")
                
                with st.spinner("Processando documentos da pasta f√≠sica..."):
                    try:
                        success = self.rag_system.process_physics_documents()
                        if success:
                            # For√ßa cria√ß√£o do vectorstore ap√≥s processamento
                            self.rag_system._create_vectorstore()
                            self.rag_system.create_rag_chain(api_key)
                            self.current_api_key = api_key
                            self.is_initialized = True
                            st.success("‚úÖ Sistema RAG de F√≠sica inicializado com sucesso!")
                            return True
                        else:
                            st.error("‚ùå Falha ao processar documentos")
                            return False
                    except Exception as processing_error:
                        st.error(f"‚ùå Erro no processamento: {str(processing_error)}")
                        # Tenta fallback com documentos b√°sicos
                        return self._try_fallback_initialization(api_key)
                    
        except Exception as e:
            st.error(f"‚ùå Erro na inicializa√ß√£o: {str(e)}")
            return self._try_fallback_initialization(api_key)
    
    def _try_fallback_initialization(self, api_key: str) -> bool:
        """Tenta inicializa√ß√£o de fallback com conte√∫do b√°sico de f√≠sica"""
        try:
            st.warning("üîÑ Tentando inicializa√ß√£o de emerg√™ncia para F√≠sica...")
            
            # Cria documento b√°sico de f√≠sica
            from langchain.schema import Document
            
            basic_content = """
            # F√≠sica - Conceitos ENEM
            
            ## Cinem√°tica
            Velocidade m√©dia: v = Œîs/Œît
            Movimento uniformemente variado: v = v‚ÇÄ + at
            Equa√ß√£o de Torricelli: v¬≤ = v‚ÇÄ¬≤ + 2aŒîs
            
            ## Din√¢mica
            Segunda Lei de Newton: F = ma
            For√ßa de atrito: Fat = ŒºN
            
            ## Energia
            Energia cin√©tica: Ec = ¬Ωmv¬≤
            Energia potencial gravitacional: Epg = mgh
            
            ## Eletricidade
            Lei de Ohm: V = RI
            Pot√™ncia el√©trica: P = VI
            """
            
            basic_doc = Document(
                page_content=basic_content,
                metadata={"source": "conteudo_emergencia", "topic": "f√≠sica_geral"}
            )
            
            self.rag_system.documents = [basic_doc]
            self.rag_system._create_vectorstore()
            self.rag_system.create_rag_chain(api_key)
            
            self.current_api_key = api_key
            self.is_initialized = True
            
            st.success("‚ö†Ô∏è Sistema de F√≠sica inicializado em modo b√°sico - funcionando com conte√∫do limitado")
            return True
            
        except Exception as fallback_error:
            st.error(f"‚ùå Falha total na inicializa√ß√£o de F√≠sica: {str(fallback_error)}")
            return False
    
    def get_response(self, user_message: str, api_key: str) -> str:
        """Gera resposta usando RAG local"""
        
        if not LOCAL_RAG_AVAILABLE:
            return """
üöß **Sistema RAG Local Indispon√≠vel**

O sistema RAG local n√£o est√° dispon√≠vel. Verifique:
1. Arquivo local_physics_rag.py presente
2. Depend√™ncias instaladas: `pip install -r requirements.txt`

üí° O sistema funciona com documentos locais da pasta f√≠sica!
"""
        
        if not api_key:
            return """
üîë **Configure sua API Key do OpenRouter**

Para ativar o Professor Fernando com RAG Local:
1. Obtenha uma API Key do OpenRouter (https://openrouter.ai)
2. Insira a chave na barra lateral
3. O sistema processar√° seus documentos locais automaticamente!

üìö **Recursos do Sistema RAG Local:**
- Processa documentos DOCX e PDF
- Busca sem√¢ntica inteligente
- Mem√≥ria conversacional
- Base totalmente local (sem Google Drive)
"""
        
        # Inicializa sistema se necess√°rio
        if not self.is_initialized or api_key != self.current_api_key:
            if not self.initialize_system(api_key):
                return "‚ùå Falha na inicializa√ß√£o do sistema. Verifique sua API key e documentos."
        
        try:
            # Gera resposta usando RAG
            result = self.rag_system.get_response(user_message)
            
            answer = result.get("answer", "Desculpe, n√£o consegui gerar uma resposta.")
            source_docs = result.get("source_documents", [])
            
            # Resposta j√° formatada pelo sistema RAG
            
            # Monta resposta formatada
            response = f"""
{answer}

---

üìö **Materiais Consultados:**
"""
            
            # Adiciona informa√ß√µes das fontes
            sources_added = set()
            for doc in source_docs[:3]:  # M√°ximo 3 fontes
                source_name = doc.metadata.get("source", "Documento desconhecido")
                topic = doc.metadata.get("topic", "T√≥pico geral")
                
                if source_name not in sources_added:
                    response += f"\n‚Ä¢ {topic} - {source_name}"
                    sources_added.add(source_name)
            
            if not sources_added:
                response += "\n‚Ä¢ Base de conhecimento geral de f√≠sica"
            
            # SEMPRE adiciona exerc√≠cios recomendados
            response += self._add_recommended_exercises(user_message)
            
            # SISTEMA DE ANALOGIAS V2 - S√âRIES PERSONALIZADAS
            # SEMPRE tenta adicionar analogias, mesmo se houve erro na API
            if ANALOGIES_AVAILABLE:
                try:
                    enhanced_response = add_analogy_if_confused(user_message, response)
                    if enhanced_response != response:  # Se analogia foi adicionada
                        response = enhanced_response
                        response += "\n\nüé¨ *Sistema de analogias com suas s√©ries favoritas ativo! Friends, Grey's Anatomy, Stranger Things e mais...*"
                except Exception as analogy_error:
                    print(f"‚ö†Ô∏è Erro no sistema de analogias: {analogy_error}")
            
            return response
            
        except Exception as e:
            error_response = f"""
‚ùå **Erro no Sistema RAG Local**

Detalhes: {str(e)}

üí° **Solu√ß√µes:**
1. Verifique se a pasta 'f√≠sica' existe
2. Confirme se h√° documentos v√°lidos (.docx, .pdf)
3. Verifique sua conex√£o com a internet (para DeepSeek)
4. Confirme se a API Key est√° correta

üîß Se o problema persistir, tente reprocessar os documentos.
"""
            
            # MESMO COM ERRO, tenta aplicar analogias se usu√°rio est√° confuso
            if ANALOGIES_AVAILABLE:
                try:
                    enhanced_error_response = add_analogy_if_confused(user_message, error_response)
                    if enhanced_error_response != error_response:
                        error_response = enhanced_error_response
                        error_response += "\n\nüé¨ *Pelo menos as analogias funcionam! üòä*"
                except Exception as analogy_error:
                    print(f"‚ö†Ô∏è Erro no sistema de analogias: {analogy_error}")
            
            return error_response
    
    def get_relevant_content_preview(self, query: str) -> str:
        """Mostra pr√©via do conte√∫do que seria recuperado"""
        if not self.rag_system or not self.is_initialized:
            return "Sistema n√£o inicializado"
        
        try:
            docs = self.rag_system.search_relevant_content(query, k=3)
            if not docs:
                return "Nenhum conte√∫do relevante encontrado"
            
            preview = "**Conte√∫do relevante encontrado:**\n\n"
            for i, doc in enumerate(docs, 1):
                content_preview = doc.page_content[:150] + "..." if len(doc.page_content) > 150 else doc.page_content
                source = doc.metadata.get("source", "Documento")
                topic = doc.metadata.get("topic", "Geral")
                
                preview += f"üìö **Fonte {i}** ({topic}):\n*{source}*\n{content_preview}\n\n"
            
            return preview
            
        except Exception as e:
            return f"Erro ao buscar conte√∫do: {str(e)}"
    
    def _add_recommended_exercises(self, user_message: str) -> str:
        """Adiciona exerc√≠cios recomendados baseados na mensagem do usu√°rio"""
        try:
            user_lower = user_message.lower()
            
            # Detecta se Sther est√° EXPLICITAMENTE pedindo exerc√≠cios
            exercise_request_keywords = [
                'exerc√≠cio', 'exercicios', 'quest√£o', 'quest√µes', 'questao', 'questoes',
                'praticar', 'treinar', 'resolver', 'fazer exerc√≠cio', 'atividade',
                'me d√™', 'me de', 'quero', 'preciso', 'tem exerc√≠cio', 'tem quest√£o'
            ]
            
            is_asking_for_exercises = any(keyword in user_lower for keyword in exercise_request_keywords)
            
            if is_asking_for_exercises:
                # Sther est√° pedindo exerc√≠cios - busca com mais prioridade
                exercises = self.search_exercises_by_message(user_message, k=3)
                
                if exercises:
                    exercises_text = """

---

üìö **Exerc√≠cios ENEM - Conforme solicitado!**

Perfeito, Sther! Aqui est√£o os exerc√≠cios que voc√™ pediu:

"""
                    
                    for i, exercise in enumerate(exercises, 1):
                        year = exercise["year"] 
                        question_num = exercise["question_number"]
                        topic = exercise["topic"]
                        
                        # Limita o conte√∫do para n√£o sobrecarregar
                        content = exercise["content"].strip()
                        if len(content) > 800:
                            content = content[:800] + "\n\n[...continua - me pe√ßa para ver o resto se precisar!]"
                        
                        exercises_text += f"""
**üìù Exerc√≠cio {i} - ENEM {year} (Quest√£o {question_num})**
*T√≥pico: {topic}*

{content}

*üí¨ Quer que eu explique alguma parte? √â s√≥ perguntar!*

---
"""
                    
                    exercises_text += """
üéØ **Dica:** Leia com calma, tente resolver primeiro e depois me pergunte se tiver d√∫vidas! üí™
"""
                    
                    return exercises_text
                
                else:
                    # Sther pediu exerc√≠cios mas n√£o encontrou nada espec√≠fico
                    return """

---

‚ùå **N√£o encontrei exerc√≠cios espec√≠ficos**

Desculpe, Sther! N√£o encontrei exerc√≠cios exatos sobre esse t√≥pico na base ENEM.

üí° **Tente reformular assim:**
- "Exerc√≠cios de Geometria"
- "Quest√µes de Fun√ß√µes" 
- "Exerc√≠cios do ENEM 2024"
- "Problemas de Probabilidade"

üìö **Ou me pergunte sobre a teoria primeiro** que eu explico e depois trago exerc√≠cios relacionados!
"""
            
            else:
                # Pergunta normal - apenas sugere exerc√≠cios sutilmente
                exercises = self.search_exercises_by_message(user_message, k=1)
                
                if exercises:
                    exercise = exercises[0]
                    year = exercise["year"]
                    topic = exercise["topic"]
                    
                    return f"""

---

üí° **Sugest√£o de Pr√°tica**

Para fixar esse conte√∫do, que tal resolver um exerc√≠cio do ENEM {year} sobre {topic}? 
Se quiser, √© s√≥ me pedir: "Professor, me d√™ exerc√≠cios sobre {topic.lower()}"! 

üöÄ Pr√°tica √© fundamental!
"""
                
                else:
                    return """

---

üí° **Sugest√£o de Pr√°tica**

Para fixar bem esse conte√∫do, sempre recomendo praticar com exerc√≠cios! 
Me pe√ßa exerc√≠cios espec√≠ficos quando quiser treinar! üöÄ
"""
                
        except Exception as e:
            # Em caso de erro, retorna sugest√£o simples
            return """

---

üí° **Pr√°tica recomendada**

Para fixar o conte√∫do, sempre recomendo exerc√≠cios! Me pergunte quando quiser praticar! üí™
"""
    
    def _extract_math_topic_from_context(self, user_message: str, response_content: str) -> str:
        """Extrai o t√≥pico matem√°tico principal da conversa"""
        combined_text = (user_message + " " + response_content).lower()
        
        # Mapeia palavras-chave para t√≥picos principais
        topic_priority = [
            ("fun√ß√£o", "Fun√ß√µes"),
            ("quadr√°tica", "Fun√ß√µes"),
            ("par√°bola", "Fun√ß√µes"),
            ("geometria", "Geometria"),
            ("tri√¢ngulo", "Geometria"),
            ("c√≠rculo", "Geometria"),
            ("√°rea", "Geometria"),
            ("volume", "Geometria"),
            ("√°lgebra", "√Ålgebra"),
            ("equa√ß√£o", "√Ålgebra"),
            ("sistema", "√Ålgebra"),
            ("probabilidade", "Estat√≠stica e Probabilidade"),
            ("estat√≠stica", "Estat√≠stica e Probabilidade"),
            ("dados", "Estat√≠stica e Probabilidade"),
            ("juros", "Matem√°tica Financeira"),
            ("porcentagem", "Matem√°tica Financeira"),
            ("progress√£o", "Progress√µes"),
            ("sequ√™ncia", "Progress√µes")
        ]
        
        # Retorna o primeiro t√≥pico encontrado (ordem de prioridade)
        for keyword, topic in topic_priority:
            if keyword in combined_text:
                return topic
        
        return "Geral"
    
    def get_knowledge_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas da base de conhecimento"""
        if not self.rag_system:
            return {"erro": "Sistema n√£o dispon√≠vel"}
        
        return self.rag_system.get_stats()
    
    def clear_memory(self):
        """Limpa mem√≥ria da conversa"""
        if self.rag_system:
            self.rag_system.clear_memory()
    
    def reprocess_documents(self, api_key: str) -> bool:
        """For√ßa reprocessamento dos documentos"""
        if not self.rag_system:
            return False
        
        try:
            st.info("üîÑ Reprocessando documentos...")
            success = self.rag_system.process_math_documents()
            
            if success and api_key:
                self.rag_system.create_rag_chain(api_key)
                self.current_api_key = api_key
                self.is_initialized = True
                st.success("‚úÖ Documentos reprocessados com sucesso!")
                return True
            
            return success
            
        except Exception as e:
            st.error(f"Erro no reprocessamento: {str(e)}")
            return False
    
    def search_exercises(self, topic: str, subject_area: str = None, k: int = 3) -> List[Dict[str, Any]]:
        """Busca exerc√≠cios do ENEM relacionados ao t√≥pico"""
        if not self.exercises_rag:
            return []
        
        try:
            # Carrega vectorstore de exerc√≠cios se necess√°rio
            if not self.exercises_rag.vectorstore:
                self.exercises_rag.load_existing_vectorstore()
            
            # Busca exerc√≠cios
            docs = self.exercises_rag.search_exercises_by_topic(topic, subject_area, k)
            
            exercises = []
            for doc in docs:
                exercise = {
                    "content": doc.page_content,
                    "year": doc.metadata.get("year", "N/A"),
                    "question_number": doc.metadata.get("question_number", "N/A"),
                    "subject_area": doc.metadata.get("subject_area", "N/A"),
                    "topic": doc.metadata.get("topic", "N/A"),
                    "source_file": doc.metadata.get("source_file", "N/A")
                }
                exercises.append(exercise)
            
            return exercises
            
        except Exception as e:
            st.error(f"Erro ao buscar exerc√≠cios: {str(e)}")
            return []
    
    def search_exercises_by_message(self, user_message: str, k: int = 3) -> List[Dict[str, Any]]:
        """Busca exerc√≠cios baseados na mensagem do usu√°rio"""
        if not self.exercises_rag:
            return []
        
        try:
            # Carrega vectorstore se necess√°rio
            if not self.exercises_rag.vectorstore:
                self.exercises_rag.load_existing_vectorstore()
            
            # Identifica t√≥picos na mensagem
            message_lower = user_message.lower()
            
            # Mapeia palavras-chave para t√≥picos (expandido para melhor detec√ß√£o)
            topic_keywords = {
                # Fun√ß√µes
                "fun√ß√£o": "Fun√ß√µes",
                "fun√ß√µes": "Fun√ß√µes",
                "quadr√°tica": "Fun√ß√µes", 
                "par√°bola": "Fun√ß√µes",
                "gr√°fico": "Fun√ß√µes",
                "v√©rtice": "Fun√ß√µes",
                "raiz": "Fun√ß√µes",
                "coeficiente": "Fun√ß√µes",
                
                # Geometria
                "geometria": "Geometria",
                "tri√¢ngulo": "Geometria",
                "√°rea": "Geometria",
                "c√≠rculo": "Geometria",
                "ret√¢ngulo": "Geometria",
                "quadrado": "Geometria",
                "pol√≠gono": "Geometria",
                "volume": "Geometria",
                "per√≠metro": "Geometria",
                "√¢ngulo": "Geometria",
                "teorema": "Geometria",
                "pit√°goras": "Geometria",
                "circunfer√™ncia": "Geometria",
                "raio": "Geometria",
                "di√¢metro": "Geometria",
                
                # Trigonometria
                "trigonometria": "Geometria",
                "seno": "Geometria",
                "cosseno": "Geometria",
                "tangente": "Geometria",
                "sen": "Geometria",
                "cos": "Geometria",
                "tan": "Geometria",
                
                # Estat√≠stica e Probabilidade
                "probabilidade": "Estat√≠stica e Probabilidade",
                "chance": "Estat√≠stica e Probabilidade",
                "estat√≠stica": "Estat√≠stica e Probabilidade",
                "m√©dia": "Estat√≠stica e Probabilidade",
                "mediana": "Estat√≠stica e Probabilidade",
                "moda": "Estat√≠stica e Probabilidade",
                "dados": "Estat√≠stica e Probabilidade",
                "amostra": "Estat√≠stica e Probabilidade",
                "frequ√™ncia": "Estat√≠stica e Probabilidade",
                
                # √Ålgebra
                "√°lgebra": "√Ålgebra",
                "algebra": "√Ålgebra",
                "equa√ß√£o": "√Ålgebra",
                "inequa√ß√£o": "√Ålgebra",
                "sistema": "√Ålgebra",
                "determinante": "√Ålgebra",
                "matriz": "√Ålgebra",
                
                # Matem√°tica Financeira
                "juros": "Matem√°tica Financeira",
                "porcentagem": "Matem√°tica Financeira",
                "desconto": "Matem√°tica Financeira",
                "financeira": "Matem√°tica Financeira",
                "capital": "Matem√°tica Financeira",
                "montante": "Matem√°tica Financeira",
                "taxa": "Matem√°tica Financeira",
                
                # Progress√µes
                "progress√£o": "Progress√µes",
                "sequ√™ncia": "Progress√µes",
                "pa": "Progress√µes",
                "pg": "Progress√µes",
                "aritm√©tica": "Progress√µes",
                "geom√©trica": "Progress√µes",
                
                # An√°lise Combinat√≥ria
                "combina√ß√£o": "An√°lise Combinat√≥ria",
                "permuta√ß√£o": "An√°lise Combinat√≥ria",
                "arranjo": "An√°lise Combinat√≥ria",
                "combinat√≥ria": "An√°lise Combinat√≥ria",
                "fatorial": "An√°lise Combinat√≥ria",
                
                # Geometria Anal√≠tica
                "reta": "Geometria Anal√≠tica",
                "ponto": "Geometria Anal√≠tica",
                "coordenadas": "Geometria Anal√≠tica",
                "cartesiano": "Geometria Anal√≠tica",
                "dist√¢ncia": "Geometria Anal√≠tica",
                
                # Logaritmo
                "logaritmo": "Outros",
                "log": "Outros",
                "exponencial": "Outros"
            }
            
            # Busca t√≥picos identificados
            identified_topics = []
            for keyword, topic in topic_keywords.items():
                if keyword in message_lower:
                    identified_topics.append(topic)
            
            # Remove duplicatas
            identified_topics = list(set(identified_topics))
            
            all_exercises = []
            
            # Busca exerc√≠cios para cada t√≥pico identificado
            if identified_topics:
                for topic in identified_topics:
                    # Determina √°rea baseada no t√≥pico
                    if topic in ["F√≠sica", "Qu√≠mica", "Biologia"]:
                        subject_area = "Ci√™ncias da Natureza"
                    else:
                        subject_area = "Matem√°tica"
                    
                    docs = self.exercises_rag.search_exercises_by_topic(topic, subject_area, k=2)
                    
                    for doc in docs:
                        exercise = {
                            "content": doc.page_content,
                            "year": doc.metadata.get("year", "N/A"),
                            "question_number": doc.metadata.get("question_number", "N/A"),
                            "subject_area": doc.metadata.get("subject_area", "N/A"),
                            "topic": doc.metadata.get("topic", "N/A"),
                            "source_file": doc.metadata.get("source_file", "N/A"),
                            "identified_from": topic
                        }
                        all_exercises.append(exercise)
            
            # Se n√£o identificou t√≥picos espec√≠ficos, busca pela mensagem diretamente
            if not all_exercises:
                docs = self.exercises_rag.search_exercises_by_topic(user_message, "Matem√°tica", k)
                
                for doc in docs:
                    exercise = {
                        "content": doc.page_content,
                        "year": doc.metadata.get("year", "N/A"),
                        "question_number": doc.metadata.get("question_number", "N/A"),
                        "subject_area": doc.metadata.get("subject_area", "N/A"),
                        "topic": doc.metadata.get("topic", "N/A"),
                        "source_file": doc.metadata.get("source_file", "N/A"),
                        "identified_from": "busca_geral"
                    }
                    all_exercises.append(exercise)
            
            # Remove duplicatas baseado no ano e n√∫mero da quest√£o
            unique_exercises = []
            seen = set()
            for ex in all_exercises:
                key = (ex["year"], ex["question_number"])
                if key not in seen:
                    seen.add(key)
                    unique_exercises.append(ex)
            
            return unique_exercises[:k]
            
        except Exception as e:
            print(f"Erro ao buscar exerc√≠cios por mensagem: {str(e)}")
            return []
    
    def get_exercises_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas dos exerc√≠cios dispon√≠veis"""
        if not self.exercises_rag:
            return {"erro": "Sistema de exerc√≠cios n√£o dispon√≠vel"}
        
        try:
            # Carrega vectorstore se necess√°rio
            if not self.exercises_rag.vectorstore:
                self.exercises_rag.load_existing_vectorstore()
            
            return self.exercises_rag.get_stats()
            
        except Exception as e:
            return {"erro": f"Erro ao obter estat√≠sticas: {str(e)}"}
    
    def suggest_exercises_for_question(self, user_question: str, api_key: str) -> str:
        """Sugere exerc√≠cios relevantes baseados na pergunta do usu√°rio"""
        if not self.exercises_rag or not api_key:
            return "Sistema de exerc√≠cios n√£o dispon√≠vel ou API key n√£o configurada."
        
        try:
            # Extrai t√≥picos da pergunta do usu√°rio
            topic_keywords = {
                "fun√ß√£o": "Fun√ß√£o Quadr√°tica",
                "quadr√°tica": "Fun√ß√£o Quadr√°tica", 
                "par√°bola": "Fun√ß√£o Quadr√°tica",
                "geometria": "Geometria",
                "tri√¢ngulo": "Geometria",
                "√°rea": "Geometria",
                "trigonometria": "Trigonometria",
                "seno": "Trigonometria",
                "probabilidade": "Probabilidade",
                "estat√≠stica": "Estat√≠stica",
                "m√©dia": "Estat√≠stica",
                "logaritmo": "Logaritmo",
                "progress√£o": "Progress√£o",
                "f√≠sica": "F√≠sica",
                "for√ßa": "F√≠sica",
                "energia": "F√≠sica",
                "qu√≠mica": "Qu√≠mica",
                "biologia": "Biologia"
            }
            
            # Identifica t√≥pico principal
            user_question_lower = user_question.lower()
            identified_topic = "matem√°tica"  # default
            subject_area = None
            
            for keyword, topic in topic_keywords.items():
                if keyword in user_question_lower:
                    identified_topic = topic
                    if topic in ["F√≠sica", "Qu√≠mica", "Biologia"]:
                        subject_area = "Ci√™ncias da Natureza"
                    else:
                        subject_area = "Matem√°tica"
                    break
            
            # Busca exerc√≠cios relacionados
            exercises = self.search_exercises(identified_topic, subject_area, k=3)
            
            if not exercises:
                exercises = self.search_exercises(user_question, None, k=3)
            
            if exercises:
                response = f"""
üéØ **Exerc√≠cios Recomendados sobre "{identified_topic}"**

Baseado na sua pergunta, encontrei estes exerc√≠cios do ENEM que podem te ajudar:

"""
                
                for i, exercise in enumerate(exercises, 1):
                    year = exercise["year"]
                    question_num = exercise["question_number"]
                    content_preview = exercise["content"][:300] + "..." if len(exercise["content"]) > 300 else exercise["content"]
                    
                    response += f"""
**üìù Exerc√≠cio {i} - ENEM {year} (Quest√£o {question_num})**
*√Årea: {exercise["subject_area"]} | T√≥pico: {exercise["topic"]}*

{content_preview}

---
"""
                
                response += """
üí° **Dica:** Tente resolver estes exerc√≠cios e me pergunte se tiver d√∫vidas sobre algum passo espec√≠fico!
"""
                
                return response
            else:
                return f"""
üîç **Nenhum exerc√≠cio espec√≠fico encontrado**

N√£o encontrei exerc√≠cios diretamente relacionados ao t√≥pico "{identified_topic}" na base do ENEM.

üí° **Sugest√µes:**
- Reformule sua pergunta com termos mais espec√≠ficos
- Posso ajudar com teoria e explica√ß√µes sobre o assunto
- Tente buscar por t√≥picos relacionados

üìö **T√≥picos dispon√≠veis:** Fun√ß√£o Quadr√°tica, Geometria, Trigonometria, Probabilidade, Estat√≠stica, F√≠sica, Qu√≠mica, Biologia
"""
                
        except Exception as e:
            return f"Erro ao sugerir exerc√≠cios: {str(e)}"

# Inst√¢ncia global do Professor Fernando Local
professor_fernando_local = ProfessorFernandoLocal()

def setup_professor_fernando_local_ui():
    """Configura UI espec√≠fica do Professor Fernando Local (barra lateral)"""
    pass

def get_professor_fernando_local_response(user_message: str, api_key: str) -> str:
    """Fun√ß√£o para obter resposta do Professor Fernando Local"""
    return professor_fernando_local.get_response(user_message, api_key)

# Fun√ß√£o de busca pr√©via (opcional)
def preview_local_search(query: str) -> str:
    """Preview do conte√∫do que seria recuperado"""
    return professor_fernando_local.get_relevant_content_preview(query) 