#!/usr/bin/env python3
"""
Professor Fernando com Sistema RAG Local
Usa √≠ndice FAISS para f√≠sica em vez de processar documentos locais
"""

import streamlit as st
from typing import Dict, Any, Optional, List
from datetime import datetime
import os
from openai import OpenAI
from physics_formatter import format_professor_response

# Importa sistema RAG local
try:
    from local_physics_rag_fixed import get_local_physics_rag_instance
    from enem_exercises_rag import ENEMExercisesRAG
    LOCAL_RAG_AVAILABLE = True
except ImportError:
    LOCAL_RAG_AVAILABLE = False
    print("‚ùå Erro ao importar local_physics_rag_fixed.py")

# Importa sistema de analogias da Sther V2
try:
    from new_analogies_system import add_analogy_if_confused
    ANALOGIAS_AVAILABLE = True
    print("‚úÖ Sistema de analogias V2 baseado nas s√©ries carregado")
except ImportError:
    ANALOGIAS_AVAILABLE = False
    print("‚ö†Ô∏è Sistema de analogias da Sther n√£o dispon√≠vel")

class ProfessorFernandoLocal:
    """Classe para gerenciar o Professor Fernando de F√≠sica"""
    
    def __init__(self):
        self.rag_system = get_local_physics_rag_instance() if LOCAL_RAG_AVAILABLE else None
        self.exercises_rag = ENEMExercisesRAG("F√≠sica") if 'ENEMExercisesRAG' in globals() else None
        self.current_api_key = None
        self.is_initialized = False
        self.client = None
        
    def initialize_system(self, api_key: str) -> bool:
        """
        Inicializa o sistema RAG e o cliente OpenAI
        
        Args:
            api_key: API key da OpenAI
            
        Returns:
            True se a inicializa√ß√£o for bem-sucedida, False caso contr√°rio
        """
        if not LOCAL_RAG_AVAILABLE:
            st.error("‚ùå Sistema RAG de f√≠sica n√£o dispon√≠vel.")
            return False
        
        try:
            # A fun√ß√£o `initialize` cuida de tudo: download, carregamento e cria√ß√£o da cadeia.
            success = self.rag_system.initialize(api_key)
            
            if success:
                self.current_api_key = api_key
                self.is_initialized = True
                self.client = OpenAI(api_key=api_key)
                st.success("‚úÖ Professor Fernando (F√≠sica) pronto!")
                # Atualiza o estado da sess√£o para refletir a inicializa√ß√£o bem-sucedida
                st.session_state.rag_initialized_fernando = True
                return True
            else:
                st.error("‚ùå Falha ao inicializar o sistema de F√≠sica.")
                st.warning("O Professor Fernando pode n√£o responder corretamente.")
                self.is_initialized = False
                st.session_state.rag_initialized_fernando = False
                return False
                    
        except Exception as e:
            st.error(f"‚ùå Ocorreu um erro cr√≠tico durante a inicializa√ß√£o: {str(e)}")
            self.is_initialized = False
            st.session_state.rag_initialized_fernando = False
            return False
    
    def get_response(self, query: str, api_key: str = None, temperature: float = 0.2) -> str:
        """
        Obt√©m resposta do Professor Fernando para uma consulta
        
        Args:
            query: A consulta do usu√°rio
            api_key: API key da OpenAI (opcional)
            temperature: Temperatura para gera√ß√£o de texto
            
        Returns:
            A resposta formatada do Professor Fernando
        """
        # Se uma nova API key for fornecida e for diferente da atual, reinicializa
        if api_key and api_key != self.current_api_key:
            self.initialize_system(api_key)
        
        if not self.is_initialized or not self.client:
            return "‚ö†Ô∏è Sistema n√£o inicializado. Por favor, configure a API key primeiro."
        
        try:
            # Obt√©m o conhecimento relevante de f√≠sica
            physics_context = self.rag_system.get_physics_context(query)
            
            # Prompt do sistema para o Professor Fernando
            system_prompt = """
            Voc√™ √© o Professor Fernando, um especialista em F√≠sica com mais de 20 anos de experi√™ncia ensinando alunos do ensino m√©dio.

            Seu objetivo √© explicar conceitos de F√≠sica de forma clara, precisa e did√°tica, adequada para estudantes que est√£o se preparando para o ENEM.

            Caracter√≠sticas importantes:
            - Use linguagem acess√≠vel, mas precisa cientificamente
            - Explique os conceitos f√≠sicos com exemplos do cotidiano
            - Utilize f√≥rmulas e nota√ß√£o matem√°tica quando necess√°rio (use LaTeX)
            - Destaque os conceitos-chave que s√£o frequentemente cobrados no ENEM
            - Evite explica√ß√µes excessivamente t√©cnicas ou que fujam do escopo do ensino m√©dio

            Ao responder quest√µes:
            1. Identifique os conceitos f√≠sicos envolvidos
            2. Explique a teoria relevante de forma concisa
            3. Demonstre a aplica√ß√£o das f√≥rmulas quando necess√°rio
            4. Resolva o problema passo a passo
            5. Conclua com a resposta final destacada

            Lembre-se que voc√™ est√° preparando alunos para o ENEM, ent√£o foque nos t√≥picos mais relevantes para a prova.
            """
            
            # Constr√≥i o prompt completo
            user_prompt = f"""
            Consulta do aluno: {query}
            
            Conhecimento relevante de F√≠sica:
            {physics_context}
            
            Responda √† consulta do aluno como o Professor Fernando, usando o conhecimento fornecido.
            """
            
            # Chama a API do OpenAI
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=temperature
            )
            
            # Extrai e formata a resposta
            raw_response = response.choices[0].message.content
            formatted_response = format_professor_response(raw_response)
            
            # Adiciona analogia se o sistema estiver dispon√≠vel
            if ANALOGIAS_AVAILABLE:
                try:
                    formatted_response = add_analogy_if_confused(
                        formatted_response, query, "f√≠sica", self.current_api_key
                    )
                except Exception as e:
                    print(f"Erro ao adicionar analogia: {e}")
            
            return formatted_response
        
        except Exception as e:
            print(f"Erro ao obter resposta do Professor Fernando: {e}")
            return f"Desculpe, n√£o consegui processar sua consulta no momento. Erro: {str(e)}"

# Inst√¢ncia global do Professor Fernando Local
professor_fernando_local = ProfessorFernandoLocal()

def setup_professor_fernando_local_ui():
    """Configura UI espec√≠fica do Professor Fernando Local (barra lateral)"""
    st.title("Professor Fernando - F√≠sica")
    st.markdown("""
    ### üë®‚Äçüî¨ Professor Fernando
    
    Especialista em F√≠sica para o ENEM com mais de 20 anos de experi√™ncia.
    
    **√Åreas de especialidade:**
    - Mec√¢nica
    - Termodin√¢mica
    - Eletromagnetismo
    - √ìptica
    - F√≠sica Moderna
    - Ondulat√≥ria
    
    Fa√ßa perguntas sobre conceitos f√≠sicos, resolu√ß√£o de problemas ou d√∫vidas sobre o ENEM.
    """)
    
    # Verifica se o sistema j√° est√° inicializado
    if "rag_initialized_fernando" not in st.session_state:
        st.session_state.rag_initialized_fernando = False
    
    # Configura√ß√£o da API Key
    with st.sidebar:
        st.subheader("üîë Configura√ß√£o do Professor Fernando")
        api_key = st.text_input("API Key da OpenAI:", type="password", key="api_key_fernando")
        
        if st.button("Inicializar Professor Fernando", key="init_fernando"):
            if not api_key:
                st.error("‚ùå Por favor, forne√ßa uma API Key v√°lida.")
            else:
                with st.spinner("Inicializando sistema de F√≠sica..."):
                    professor_fernando_local.initialize_system(api_key)
    
    # Campo para a pergunta do usu√°rio
    query = st.text_area("Digite sua pergunta sobre F√≠sica:", height=100, key="query_fernando")
    
    if st.button("Enviar pergunta ao Professor Fernando", key="send_fernando"):
        if not query:
            st.warning("Por favor, digite uma pergunta.")
            return
        
        if not st.session_state.rag_initialized_fernando:
            st.error("‚ö†Ô∏è Sistema n√£o inicializado. Configure a API key primeiro.")
            return
        
        with st.spinner("Professor Fernando est√° elaborando a resposta..."):
            api_key = st.session_state.get("api_key_fernando", None)
            response = professor_fernando_local.get_response(query, api_key)
            
        st.markdown("### Resposta do Professor Fernando:")
        st.markdown(response)

def get_professor_fernando_local_response(query: str, api_key: str = None) -> str:
    """Fun√ß√£o para obter resposta do Professor Fernando para uso em outros m√≥dulos"""
    # Verifica se o sistema est√° inicializado
    if not professor_fernando_local.is_initialized:
        # Usa a API key fornecida ou tenta obter da sess√£o
        if api_key:
            professor_fernando_local.initialize_system(api_key)
        else:
            # Tenta inicializar com a API key da sess√£o
            session_api_key = st.session_state.get("openai_api_key", None)
            if session_api_key:
                professor_fernando_local.initialize_system(session_api_key)
            else:
                return "‚ö†Ô∏è Sistema n√£o inicializado. Por favor, configure a API key primeiro."
    
    # Retorna a resposta
    return professor_fernando_local.get_response(query)

# Para teste direto
if __name__ == "__main__":
    # Configura a p√°gina Streamlit
    st.set_page_config(page_title="Professor Fernando - F√≠sica", layout="wide")
    
    # Configura a UI
    setup_professor_fernando_local_ui() 