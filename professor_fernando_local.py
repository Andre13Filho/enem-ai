"""
Professor Fernando com Sistema RAG Local
Usa documentos locais da pasta F√≠sica em vez da API do Google Drive
"""

import streamlit as st
from typing import Dict, Any, Optional, List
from datetime import datetime
import os
from physics_formatter import format_professor_response

# Importa sistema RAG local
try:
    from local_physics_rag import get_local_physics_rag_instance
    from enem_exercises_rag import ENEMExercisesRAG
    from physics_formatter import format_professor_response
    LOCAL_RAG_AVAILABLE = True
    physics_FORMATTER_AVAILABLE = True
except ImportError:
    LOCAL_RAG_AVAILABLE = False
    physics_FORMATTER_AVAILABLE = False

# Importa sistema de analogias da Sther V2
try:
    from new_analogies_system import add_analogy_if_confused
    ANALOGIES_AVAILABLE = True
    print("‚úÖ Sistema de analogias V2 baseado nas s√©ries carregado")
except ImportError:
    ANALOGIES_AVAILABLE = False
    print("‚ö†Ô∏è Sistema de analogias da Sther n√£o dispon√≠vel")

class ProfessorFernandoLocal:
    """Professor Fernando especializado usando documentos locais"""
    
    def __init__(self):
        self.rag_system = None
        self.exercises_rag = None
        self.current_api_key = None
        self.is_initialized = False
        
    def initialize_system(self, api_key: str) -> bool:
        """
        Inicializa o sistema RAG e o cliente Groq
        
        Args:
            api_key: API key da Groq
            
        Returns:
            True se a inicializa√ß√£o for bem-sucedida, False caso contr√°rio
        """
        if not LOCAL_RAG_AVAILABLE:
            st.error("O arquivo 'local_physics_rag.py' √© essencial e n√£o foi encontrado.")
            return False
        
        if self.is_initialized and self.current_api_key == api_key:
            st.success("‚úÖ Sistema de F√≠sica j√° inicializado.")
            return True

        st.info("üîÑ Inicializando sistema de F√≠sica (Professor Fernando)...")
        
        try:
            # A nova fun√ß√£o `initialize` cuida de tudo: download, carregamento e cria√ß√£o da cadeia.
            success = self.rag_system.initialize(api_key)
            
            if success:
                self.current_api_key = api_key
                self.is_initialized = True
                self.client = OpenAI(api_key=api_key)
                st.success("‚úÖ Professor Fernando (F√≠sica) pronto!")
                # Atualiza o estado da sess√£o para refletir a inicializa√ß√£o bem-sucedida
                st.session_state.rag_initialized_Fernando = True
                return True
            else:
                st.error("‚ùå Falha ao inicializar o sistema de F√≠sica.")
                st.warning("O Professor Fernando pode n√£o responder corretamente.")
                self.is_initialized = False
                st.session_state.rag_initialized_Fernando = False
                return False
                    
        except Exception as e:
            st.error(f"‚ùå Ocorreu um erro cr√≠tico durante a inicializa√ß√£o: {str(e)}")
            self.is_initialized = False
            st.session_state.rag_initialized_Fernando = False
            return False
    
    def get_response(self, query: str, api_key: str = None, temperature: float = 0.2) -> str:
        """
        Obt√©m resposta do Professor Fernando para uma consulta
        
        Args:
            query: A consulta do usu√°rio
            api_key: API key da Groq (opcional)
            temperature: Temperatura para gera√ß√£o de texto
            
        Returns:
            A resposta formatada do Professor Fernando
        """
        # Se uma nova API key for fornecida e for diferente da atual, reinicializa
        if api_key and api_key != self.current_api_key:
            self.initialize_system(api_key)
        
        if not self.is_initialized:
            return "‚ö†Ô∏è Sistema n√£o inicializado. Por favor, configure a API key primeiro."
        
        try:
            # Usa o sistema RAG para obter a resposta
            result = self.rag_system.get_response(query)
            raw_response = result.get("answer", "")
            
            # Formata a resposta
            formatted_response = format_professor_response(raw_response)
            
            # Adiciona analogia se o sistema estiver dispon√≠vel
            if ANALOGIAS_AVAILABLE:
                try:
                    enhanced_response = add_analogy_if_confused(user_message, response)
                    if enhanced_response != response:  # Se analogia foi adicionada
                        response = enhanced_response
                        response += "\n\nüé¨ *Sistema de analogias com suas s√©ries favoritas ativo! Friends, Grey's Anatomy, Stranger Things e mais...*"
                except Exception as analogy_error:
                    print(f"‚ö†Ô∏è Erro no sistema de analogias: {analogy_error}")
            
            return response
            
        except Exception as e:
            print(f"Erro ao obter resposta do Professor Fernando: {e}")
            return f"Desculpe, n√£o consegui processar sua consulta no momento. Erro: {str(e)}"

# Inst√¢ncia global do Professor Fernando Local
professor_fernando_local = ProfessorFernandoLocal()

def setup_professor_fernando_local_ui():
    """Configura UI espec√≠fica do Professor Fernando Local (barra lateral)"""
    st.title("Professor Fernando - F√≠sica")
    st.markdown("""
    ### üë®‚Äçüî¨ Professor Fernando
    
    Especialista em F√≠sica para o ENEM com mais de 20 anos de experi√™ncia.
    
    **√Åreas de especialidade:**
    - Mec√¢nica
    - Termodin√¢mica
    - Eletromagnetismo
    - √ìptica
    - F√≠sica Moderna
    - Ondulat√≥ria
    
    Fa√ßa perguntas sobre conceitos f√≠sicos, resolu√ß√£o de problemas ou d√∫vidas sobre o ENEM.
    """)
    
    # Verifica se o sistema j√° est√° inicializado
    if "rag_initialized_fernando" not in st.session_state:
        st.session_state.rag_initialized_fernando = False
    
    # Campo para a pergunta do usu√°rio
    query = st.text_area("Digite sua pergunta sobre F√≠sica:", height=100, key="query_fernando")
    
    if st.button("Enviar pergunta ao Professor Fernando", key="send_fernando"):
        if not query:
            st.warning("Por favor, digite uma pergunta.")
            return
        
        if not st.session_state.rag_initialized_fernando:
            st.error("‚ö†Ô∏è Sistema n√£o inicializado. Configure a API key primeiro.")
            return
        
        with st.spinner("Professor Fernando est√° elaborando a resposta..."):
            api_key = st.session_state.get("api_key_fernando", None)
            response = professor_fernando_local.get_response(query, api_key)
            
        st.markdown("### Resposta do Professor Fernando:")
        st.markdown(response)

def get_professor_fernando_local_response(query: str, api_key: str = None) -> str:
    """Fun√ß√£o para obter resposta do Professor Fernando para uso em outros m√≥dulos"""
    # Verifica se o sistema est√° inicializado
    if not professor_fernando_local.is_initialized:
        # Usa a API key fornecida ou tenta obter da sess√£o
        if api_key:
            professor_fernando_local.initialize_system(api_key)
        else:
            # Tenta inicializar com a API key da sess√£o
            session_api_key = st.session_state.get("openai_api_key", None)
            if session_api_key:
                professor_fernando_local.initialize_system(session_api_key)
            else:
                return "‚ö†Ô∏è Sistema n√£o inicializado. Por favor, configure a API key primeiro."
    
    # Retorna a resposta
    return professor_fernando_local.get_response(query, api_key)

# Para teste direto
if __name__ == "__main__":
    # Configura a p√°gina Streamlit
    st.set_page_config(page_title="Professor Fernando - F√≠sica", layout="wide")
    
    # Configura a UI
    setup_professor_fernando_local_ui() 