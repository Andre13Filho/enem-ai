"""
Professor Fernando com Sistema RAG Local
Usa √≠ndice FAISS para f√≠sica em vez de processar documentos locais
"""

import streamlit as st
from typing import Dict, Any, Optional, List
from datetime import datetime
import os

# Importa sistema RAG local
try:
    from local_physics_rag_fixed import get_local_physics_rag_instance
    from enem_exercises_rag import ENEMExercisesRAG
    LOCAL_RAG_AVAILABLE = True
except ImportError:
    LOCAL_RAG_AVAILABLE = False
    print("‚ùå Erro ao importar local_physics_rag_fixed.py")

# Importa sistema de analogias da Sther V2
try:
    from new_analogies_system import add_analogy_if_confused
    ANALOGIAS_AVAILABLE = True
    print("‚úÖ Sistema de analogias V2 baseado nas s√©ries carregado")
except ImportError:
    ANALOGIAS_AVAILABLE = False
    print("‚ö†Ô∏è Sistema de analogias da Sther n√£o dispon√≠vel")

class ProfessorFernandoLocal:
    """Professor Fernando especializado usando √≠ndice FAISS de f√≠sica"""
    
    def __init__(self):
        self.rag_system = None
        self.exercises_rag = None
        self.current_api_key = None
        self.is_initialized = False
        
        if LOCAL_RAG_AVAILABLE:
            self.rag_system = get_local_physics_rag_instance()
            self.exercises_rag = ENEMExercisesRAG()
            print("‚úÖ RAG System para f√≠sica inicializado")
    
    def initialize_system(self, api_key: str) -> bool:
        """
        Inicializa o sistema RAG baixando o √≠ndice FAISS remoto e configurando a cadeia.
        """
        if not LOCAL_RAG_AVAILABLE:
            st.error("O arquivo 'local_physics_rag_fixed.py' √© essencial e n√£o foi encontrado.")
            return False
        
        if self.is_initialized and self.current_api_key == api_key:
            st.success("‚úÖ Sistema de F√≠sica j√° inicializado.")
            return True

        st.info("üîÑ Inicializando sistema de f√≠sica (Professor Fernando)...")
        
        try:
            # A fun√ß√£o `initialize` cuida de tudo: download, carregamento e cria√ß√£o da cadeia.
            success = self.rag_system.initialize(api_key)
            
            if success:
                self.current_api_key = api_key
                self.is_initialized = True
                st.success("‚úÖ Professor Fernando (F√≠sica) pronto!")
                # Atualiza o estado da sess√£o para refletir a inicializa√ß√£o bem-sucedida
                st.session_state.rag_initialized_fernando = True
                return True
            else:
                st.error("‚ùå Falha ao inicializar o sistema de F√≠sica.")
                st.warning("O Professor Fernando pode n√£o responder corretamente.")
                self.is_initialized = False
                st.session_state.rag_initialized_fernando = False
                return False
                    
        except Exception as e:
            st.error(f"‚ùå Ocorreu um erro cr√≠tico durante a inicializa√ß√£o: {str(e)}")
            self.is_initialized = False
            st.session_state.rag_initialized_fernando = False
            return False
    
    def get_response(self, user_message: str, api_key: str) -> str:
        """Gera uma resposta para a mensagem do usu√°rio."""
        
        if not LOCAL_RAG_AVAILABLE:
            return """
üöß **Sistema RAG Local Indispon√≠vel**

O sistema RAG local n√£o est√° dispon√≠vel. Verifique:
1. Arquivo local_physics_rag_fixed.py presente
2. Depend√™ncias instaladas: `pip install -r requirements.txt`

üí° O sistema funciona com um √≠ndice FAISS pr√©-constru√≠do!
"""
        
        if not api_key or api_key.strip() == "":
            return """
üîë **API Key da Groq Necess√°ria**

Para ativar o Professor Fernando com RAG Local:
1. Configure a secret GROQ_API_KEY no Streamlit Cloud
2. O sistema baixar√° o √≠ndice FAISS e inicializar√° automaticamente!

üìö **Recursos do Sistema RAG Local:**
- √çndice FAISS pr√©-constru√≠do (baixado automaticamente)
- Busca sem√¢ntica inteligente com respostas formatadas
- Mem√≥ria conversacional
- Modelo DeepSeek R1 Distill 70B
"""
        
        # Inicializa sistema se necess√°rio
        if not self.is_initialized:
            try:
                st.info("üîß Iniciando processo de inicializa√ß√£o...")
                init_success = self.initialize_system(api_key)
                
                if not init_success:
                    st.error("‚ùå Falha na inicializa√ß√£o - detalhes:")
                    st.error(f"‚Ä¢ RAG System: {self.rag_system is not None}")
                    st.error(f"‚Ä¢ Sistema inicializado: {self.is_initialized}")
                    
                    # Tenta reinicializar com for√ßa
                    st.warning("üîÑ Tentando reinicializar o sistema...")
                    
                    # For√ßa limpeza e reinicializa√ß√£o
                    try:
                        # Limpa a pasta FAISS_INDEX_DIR para for√ßar um novo download
                        import shutil
                        from local_physics_rag_fixed import FAISS_INDEX_DIR
                        
                        if os.path.exists(FAISS_INDEX_DIR):
                            try:
                                shutil.rmtree(FAISS_INDEX_DIR)
                                st.info("üì• Pasta do √≠ndice FAISS exclu√≠da. Baixando novamente...")
                            except Exception as e:
                                st.error(f"‚ùå Erro ao excluir pasta do √≠ndice: {str(e)}")
                        
                        # Tenta inicializar novamente
                        second_try = self.initialize_system(api_key)
                        
                        if second_try:
                            st.success("‚úÖ Sistema inicializado com sucesso na segunda tentativa!")
                            return self.get_response(user_message, api_key)
                    except Exception as retry_error:
                        st.error(f"‚ùå Falha na segunda tentativa: {str(retry_error)}")
                    
                    return f"""
‚ùå **Falha na Inicializa√ß√£o do Sistema RAG**

O sistema n√£o conseguiu acessar o √≠ndice de f√≠sica. Por favor, tente novamente mais tarde ou entre em contato com o suporte.

**Detalhes t√©cnicos:**
- N√£o foi poss√≠vel baixar ou carregar o √≠ndice FAISS
- Verifique sua conex√£o com a internet
- Tente reiniciar a aplica√ß√£o

Para ajuda imediata com sua pergunta sobre f√≠sica, por favor reformule sua pergunta com mais detalhes ou consulte um dos outros professores dispon√≠veis.
"""
                else:
                    st.success("‚úÖ Inicializa√ß√£o conclu√≠da com sucesso!")
                    
            except Exception as init_error:
                st.error(f"‚ùå Erro cr√≠tico na inicializa√ß√£o: {str(init_error)}")
                import traceback
                st.error(f"Stack trace: {traceback.format_exc()}")
                
                # Tenta reinicializar com for√ßa
                st.warning("üîÑ Tentando reinicializar ap√≥s erro cr√≠tico...")
                
                # For√ßa limpeza e reinicializa√ß√£o
                try:
                    # Limpa a pasta FAISS_INDEX_DIR para for√ßar um novo download
                    import shutil
                    from local_physics_rag_fixed import FAISS_INDEX_DIR
                    
                    if os.path.exists(FAISS_INDEX_DIR):
                        try:
                            shutil.rmtree(FAISS_INDEX_DIR)
                            st.info("üì• Pasta do √≠ndice FAISS exclu√≠da. Baixando novamente...")
                        except Exception as e:
                            st.error(f"‚ùå Erro ao excluir pasta do √≠ndice: {str(e)}")
                    
                    # Tenta inicializar novamente com delay
                    import time
                    time.sleep(2)
                    second_try = self.initialize_system(api_key)
                    
                    if second_try:
                        st.success("‚úÖ Sistema recuperado com sucesso ap√≥s erro cr√≠tico!")
                        return self.get_response(user_message, api_key)
                except Exception as retry_error:
                    st.error(f"‚ùå Falha na recupera√ß√£o: {str(retry_error)}")
                
                return f"""
‚ùå **Erro Cr√≠tico na Inicializa√ß√£o**

Ocorreu um erro durante a inicializa√ß√£o do sistema. Por favor, tente novamente mais tarde ou entre em contato com o suporte.

**Detalhes t√©cnicos:**
- Erro: {str(init_error)}
- N√£o foi poss√≠vel acessar o √≠ndice FAISS
- Verifique sua conex√£o com a internet
- Tente reiniciar a aplica√ß√£o

Para ajuda imediata com sua pergunta sobre f√≠sica, por favor consulte um dos outros professores dispon√≠veis ou tente novamente mais tarde.
"""
        
        try:
            # Gera resposta usando RAG
            result = self.rag_system.get_response(user_message)
            
            answer = result.get("answer", "Desculpe, n√£o consegui gerar uma resposta.")
            source_docs = result.get("source_documents", [])
            
            # Verifica se h√° problemas na resposta
            if ("Erro na API" in answer or "Error code: 401" in answer or "Invalid API Key" in answer or 
                "Sistema RAG n√£o inicializado" in answer):
                
                # Tenta reinicializar o sistema
                st.warning("üîÑ Detectado problema com a API. Tentando reinicializar...")
                self.is_initialized = False
                
                # Tenta inicializar novamente
                try:
                    init_success = self.initialize_system(api_key)
                    if init_success:
                        # Tenta novamente com o sistema reinicializado
                        result = self.rag_system.get_response(user_message)
                        new_answer = result.get("answer", "")
                        
                        # Verifica se a nova resposta n√£o tem erros
                        if not any(err in new_answer for err in ["Erro na API", "Error code: 401", "Invalid API Key"]):
                            source_docs = result.get("source_documents", [])
                            answer = new_answer
                        else:
                            # Se ainda houver erro, retorna mensagem de erro t√©cnico
                            return f"""
üîë **Problema com a API Key da Groq**

N√£o foi poss√≠vel conectar √† API do Groq. Por favor, verifique se sua API Key est√° correta e tente novamente.

**Detalhes t√©cnicos:**
- Erro: {answer}
- Verifique se a API Key est√° configurada corretamente
- Tente novamente mais tarde

Para ajuda imediata, entre em contato com o suporte.
"""
                except Exception:
                    # Se falhar a reinicializa√ß√£o, retorna mensagem de erro
                    return f"""
üîë **Problema com a API Key da Groq**

N√£o foi poss√≠vel conectar √† API do Groq. Por favor, verifique se sua API Key est√° correta e tente novamente.

**Detalhes t√©cnicos:**
- Erro: {answer}
- Verifique se a API Key est√° configurada corretamente
- Tente novamente mais tarde

Para ajuda imediata, entre em contato com o suporte.
"""
            
            # Resposta formatada
            response = f"""
{answer}

---

üìö **Materiais Consultados:**
"""
            
            # Adiciona informa√ß√µes das fontes
            sources_added = set()
            for doc in source_docs[:3]:  # M√°ximo 3 fontes
                source_name = doc.metadata.get("source", "Documento desconhecido")
                topic = doc.metadata.get("topic", "T√≥pico geral")
                
                if source_name not in sources_added:
                    response += f"\n‚Ä¢ {topic} - {source_name}"
                    sources_added.add(source_name)
            
            if not sources_added:
                response += "\n‚Ä¢ Base de conhecimento geral de f√≠sica"
            
            # SEMPRE adiciona exerc√≠cios recomendados
            response += self._add_recommended_exercises(user_message)
            
            # SISTEMA DE ANALOGIAS V2 - S√âRIES PERSONALIZADAS
            # SEMPRE tenta adicionar analogias, mesmo se houve erro na API
            if ANALOGIAS_AVAILABLE:
                try:
                    enhanced_response = add_analogy_if_confused(user_message, response)
                    if enhanced_response != response:  # Se analogia foi adicionada
                        response = enhanced_response
                        response += "\n\nüé¨ *Sistema de analogias com suas s√©ries favoritas ativo! Friends, Grey's Anatomy, Stranger Things e mais...*"
                except Exception as analogy_error:
                    print(f"‚ö†Ô∏è Erro no sistema de analogias: {analogy_error}")
            
            return response
            
        except Exception as e:
            # Registra o erro para debugging
            import traceback
            error_details = traceback.format_exc()
            print(f"‚ùå Erro ao processar resposta: {error_details}")
            
            # Tenta reinicializar o sistema
            try:
                st.warning("üîÑ Ocorreu um erro. Tentando reinicializar o sistema...")
                self.is_initialized = False
                
                # For√ßa reinicializa√ß√£o
                init_success = self.initialize_system(api_key)
                if init_success:
                    # Tenta novamente com o sistema reinicializado
                    try:
                        result = self.rag_system.get_response(user_message)
                        answer = result.get("answer", "")
                        source_docs = result.get("source_documents", [])
                        
                        # Constr√≥i resposta normal
                        response = f"""
{answer}

---

üìö **Materiais Consultados:**
"""
                        # Adiciona fontes e exerc√≠cios
                        sources_added = set()
                        for doc in source_docs[:3]:
                            source_name = doc.metadata.get("source", "Documento desconhecido")
                            topic = doc.metadata.get("topic", "T√≥pico geral")
                            if source_name not in sources_added:
                                response += f"\n‚Ä¢ {topic} - {source_name}"
                                sources_added.add(source_name)
                        
                        if not sources_added:
                            response += "\n‚Ä¢ Base de conhecimento geral de f√≠sica"
                        
                        response += self._add_recommended_exercises(user_message)
                        
                        return response
                    except:
                        pass
            except:
                pass
            
            # Se todas as tentativas falharem, retorna mensagem de erro t√©cnico
            error_response = f"""
‚ùå **Erro T√©cnico**

Ocorreu um erro ao processar sua pergunta. Por favor, tente novamente mais tarde.

**Detalhes t√©cnicos:**
- Erro: {str(e)}
- Verifique sua conex√£o com a internet
- Tente reiniciar a aplica√ß√£o

Para ajuda imediata, entre em contato com o suporte.
"""
            
            # MESMO COM ERRO, tenta aplicar analogias se usu√°rio est√° confuso
            if ANALOGIAS_AVAILABLE:
                try:
                    enhanced_error_response = add_analogy_if_confused(user_message, error_response)
                    if enhanced_error_response != error_response:
                        error_response = enhanced_error_response
                        error_response += "\n\nüé¨ *Pelo menos as analogias funcionam! üòä*"
                except Exception as analogy_error:
                    print(f"‚ö†Ô∏è Erro no sistema de analogias: {analogy_error}")
            
            return error_response
    
    def get_relevant_content_preview(self, query: str) -> str:
        """Mostra pr√©via do conte√∫do que seria recuperado"""
        if not self.rag_system or not self.is_initialized:
            return "Sistema n√£o inicializado"
        
        try:
            docs = self.rag_system.search_relevant_content(query, k=3)
            
            if not docs:
                return "Nenhum conte√∫do relevante encontrado"
                
            preview = f"**Pr√©via de conte√∫do relevante para:** '{query}'\n\n"
            
            for i, doc in enumerate(docs, 1):
                source = doc.metadata.get("source", "Desconhecido")
                preview += f"**Documento {i} - {source}:**\n"
                preview += f"{doc.page_content[:150]}...\n\n"
                
            return preview
            
        except Exception as e:
            return f"Erro ao buscar conte√∫do: {str(e)}"
    
    def _add_recommended_exercises(self, user_message: str) -> str:
        """Adiciona exerc√≠cios do ENEM recomendados"""
        if not self.exercises_rag:
            return "\n\nüí° Sistema de exerc√≠cios n√£o dispon√≠vel."
            
        try:
            # Tenta extrair t√≥pico da mensagem
            message_lower = user_message.lower()
            
            # Mapeia palavras-chave de f√≠sica para t√≥picos
            physics_keywords = {
                # Mec√¢nica
                "cinem√°tica": "Mec√¢nica",
                "movimento": "Mec√¢nica",
                "velocidade": "Mec√¢nica",
                "acelera√ß√£o": "Mec√¢nica",
                "queda livre": "Mec√¢nica",
                "mru": "Mec√¢nica",
                "mruv": "Mec√¢nica",
                "for√ßa": "Mec√¢nica",
                "newton": "Mec√¢nica",
                "atrito": "Mec√¢nica",
                "impulso": "Mec√¢nica",
                "quantidade de movimento": "Mec√¢nica",
                "trabalho": "Mec√¢nica",
                "pot√™ncia": "Mec√¢nica",
                "energia": "Mec√¢nica",
                "cin√©tica": "Mec√¢nica",
                "potencial": "Mec√¢nica",
                "conserva√ß√£o": "Mec√¢nica",
                
                # Termodin√¢mica
                "termodin√¢mica": "Termodin√¢mica",
                "calor": "Termodin√¢mica",
                "temperatura": "Termodin√¢mica",
                "dilata√ß√£o": "Termodin√¢mica",
                "gases": "Termodin√¢mica",
                "m√°quina t√©rmica": "Termodin√¢mica",
                
                # Eletricidade e Magnetismo
                "eletricidade": "Eletromagnetismo",
                "carga": "Eletromagnetismo",
                "corrente": "Eletromagnetismo",
                "resist√™ncia": "Eletromagnetismo",
                "tens√£o": "Eletromagnetismo",
                "voltagem": "Eletromagnetismo",
                "circuito": "Eletromagnetismo",
                "pot√™ncia el√©trica": "Eletromagnetismo",
                "campo el√©trico": "Eletromagnetismo",
                "magnetismo": "Eletromagnetismo",
                "campo magn√©tico": "Eletromagnetismo",
                "indu√ß√£o": "Eletromagnetismo",
                
                # Ondulat√≥ria
                "onda": "Ondulat√≥ria",
                "frequ√™ncia": "Ondulat√≥ria",
                "comprimento de onda": "Ondulat√≥ria",
                "som": "Ondulat√≥ria",
                "ac√∫stica": "Ondulat√≥ria",
                "√≥ptica": "Ondulat√≥ria",
                "reflex√£o": "Ondulat√≥ria",
                "refra√ß√£o": "Ondulat√≥ria",
                "espelho": "Ondulat√≥ria",
                "lente": "Ondulat√≥ria",
                
                # F√≠sica Moderna
                "relatividade": "F√≠sica Moderna",
                "qu√¢ntica": "F√≠sica Moderna",
                "dualidade": "F√≠sica Moderna",
                "f√≥ton": "F√≠sica Moderna",
                "efeito fotoel√©trico": "F√≠sica Moderna",
            }
            
            # Busca t√≥picos identificados
            identified_topics = []
            for keyword, topic in physics_keywords.items():
                if keyword in message_lower:
                    identified_topics.append(topic)
            
            # Remove duplicatas
            identified_topics = list(set(identified_topics))
            
            # Se n√£o identificou t√≥picos, tenta extrair do conte√∫do
            if not identified_topics:
                identified_topics = ["F√≠sica Geral"]
            
            # Busca exerc√≠cios para cada t√≥pico
            exercises_content = "\n\nüìù **Exerc√≠cios Relacionados do ENEM:**\n"
            exercises_found = False
            
            for topic in identified_topics[:2]:  # M√°ximo 2 t√≥picos
                try:
                    exercises = self.exercises_rag.search_exercises_by_topic(topic, "Ci√™ncias da Natureza", k=1)
                    
                    if exercises:
                        exercises_found = True
                        exercise = exercises[0]
                        year = exercise.metadata.get("year", "Ano desconhecido")
                        question_num = exercise.metadata.get("question_number", "")
                        
                        # Limita o comprimento do exerc√≠cio
                        content = exercise.page_content
                        if len(content) > 300:
                            content = content[:300] + "..."
                            
                        exercises_content += f"""
**Exerc√≠cio ENEM {year} - Quest√£o {question_num} ({topic})**
{content}

"""
                except Exception as ex_error:
                    print(f"Erro ao buscar exerc√≠cio para {topic}: {str(ex_error)}")
            
            if not exercises_found:
                exercises_content = "\n\nüí° **Quer praticar?** Me pe√ßa exerc√≠cios espec√≠ficos sobre este assunto do ENEM!"
                
            return exercises_content
            
        except Exception as e:
            print(f"Erro ao adicionar exerc√≠cios: {str(e)}")
            return "\n\nüí° **Quer praticar?** Me pe√ßa exerc√≠cios espec√≠ficos sobre este assunto do ENEM!"
    
    def get_knowledge_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas da base de conhecimento"""
        if not self.rag_system:
            return {"status": "n√£o dispon√≠vel"}
        
        try:
            return self.rag_system.get_stats()
        except Exception as e:
            return {"erro": str(e)}
    
    def clear_memory(self):
        """Limpa mem√≥ria conversacional"""
        if self.rag_system and hasattr(self.rag_system, "clear_memory"):
            self.rag_system.clear_memory()
    
    def reprocess_documents(self, api_key: str) -> bool:
        """For√ßa reinicializa√ß√£o do sistema RAG"""
        if not self.rag_system:
            return False
        
        try:
            st.info("üîÑ For√ßando reinicializa√ß√£o do sistema...")
            
            # Limpa a pasta FAISS_INDEX_DIR para for√ßar um novo download
            import shutil
            from local_physics_rag_fixed import FAISS_INDEX_DIR
            
            if os.path.exists(FAISS_INDEX_DIR):
                try:
                    shutil.rmtree(FAISS_INDEX_DIR)
                    st.info("üì• Pasta do √≠ndice FAISS exclu√≠da. Baixando novamente...")
                except Exception as e:
                    st.error(f"‚ùå Erro ao excluir pasta do √≠ndice: {str(e)}")
            
            # Reinicializa o sistema
            self.is_initialized = False
            self.rag_system.is_initialized = False
            self.rag_system.vectorstore = None
            self.rag_system.retriever = None
            self.rag_system.rag_chain = None
            self.rag_system.embeddings = None
            
            # Tenta inicializar novamente
            success = self.initialize_system(api_key)
            
            if success:
                self.current_api_key = api_key
                st.success("‚úÖ Sistema reinicializado com sucesso!")
                return True
            else:
                st.error("‚ùå Falha na reinicializa√ß√£o")
                return False
                
        except Exception as e:
            st.error(f"Erro na reinicializa√ß√£o: {str(e)}")
            return False
            
    def search_exercises(self, topic: str, subject_area: str = None, k: int = 3) -> List[Dict[str, Any]]:
        """Busca exerc√≠cios do ENEM relacionados ao t√≥pico"""
        if not self.exercises_rag:
            return []
        
        try:
            # Carrega vectorstore de exerc√≠cios se necess√°rio
            if not self.exercises_rag.vectorstore:
                self.exercises_rag.load_existing_vectorstore()
            
            # Busca exerc√≠cios
            docs = self.exercises_rag.search_exercises_by_topic(topic, subject_area, k)
            
            exercises = []
            for doc in docs:
                exercise = {
                    "content": doc.page_content,
                    "year": doc.metadata.get("year", "N/A"),
                    "question_number": doc.metadata.get("question_number", "N/A"),
                    "subject_area": doc.metadata.get("subject_area", "N/A"),
                    "topic": doc.metadata.get("topic", "N/A"),
                    "source_file": doc.metadata.get("source_file", "N/A")
                }
                exercises.append(exercise)
            
            return exercises
            
        except Exception as e:
            print(f"Erro ao buscar exerc√≠cios: {str(e)}")
            return []

# Inst√¢ncia global do Professor Fernando Local
professor_fernando_local = ProfessorFernandoLocal()

def setup_professor_fernando_local_ui():
    """Configura UI espec√≠fica do Professor Fernando Local (barra lateral)"""
    pass

def get_professor_fernando_local_response(user_message: str, api_key: str) -> str:
    """Fun√ß√£o para obter resposta do Professor Fernando Local"""
    return professor_fernando_local.get_response(user_message, api_key)

def preview_local_search(query: str) -> str:
    """Preview do conte√∫do que seria recuperado"""
    return professor_fernando_local.get_relevant_content_preview(query) 