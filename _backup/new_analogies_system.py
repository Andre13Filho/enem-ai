"""
Sistema de Analogias para Sther - Baseado nas s√©ries fornecidas
Usa Friends, Grey's Anatomy, Stranger Things, Big Bang Theory, Young Sheldon e WandaVision
"""

import json
import re

class StherAnalogiesSystem:
    def __init__(self):
        self.confusion_patterns = [
            r"n√£o entend[ieu]", r"n√£o consig[ou]", r"complicado", r"dif√≠cil", 
            r"confuso", r"n√£o sei", r"ajuda", r"explicar melhor",
            r"n√£o entendeu", r"n√£o entendi", r"muito bem", r"est√° dif√≠cil",
            r"preciso de ajuda", r"n√£o compreend[ieu]"
        ]
        
        # Analogias organizadas por t√≥pico matem√°tico
        self.analogies = {
            "determinantes": {
                "serie": "Stranger Things",
                "content": """
üîÆ **DETERMINANTES = STRANGER THINGS**

Imagine uma matriz 2x2 como um portal entre mundos:
```
| a  b |
| c  d |
```

**Mike e Eleven (diagonal principal: a√ód)**:
- S√£o a for√ßa que mant√©m Hawkins seguro
- Quando unidos, o portal permanece est√°vel

**O Devorador de Mentes (diagonal secund√°ria: b√óc)**:
- Representa as for√ßas do caos
- Quer destruir o equil√≠brio e abrir portais

**Determinante = (a√ód) - (b√óc)**:
- **Positivo**: Mike e Eleven vencem! Portal seguro ‚úÖ
- **Zero**: Empate perigoso - portal inst√°vel ‚ö†Ô∏è
- **Negativo**: Devorador vence - portal se abre! ‚ùå

Quanto maior o determinante, mais est√°vel √© Hawkins!
                """
            },
            
            "matrizes": {
                "serie": "Friends",
                "content": """
‚òï **MATRIZES = FRIENDS NO CENTRAL PERK**

Uma matriz √© como o grupo dos 6 amigos organizados:
```
| Rachel  Monica |
| Phoebe  Ross   |
| Joey    Chandler|
```

**Elementos**: Cada posi√ß√£o √© um amigo com sua personalidade
**Linhas**: Como eles se sentam no sof√° do Central Perk
**Colunas**: Como se organizam para atividades

**Multiplica√ß√£o de Matrizes**:
Como combinar dois grupos de amigos:
- Cada encontro cria novas din√¢micas
- A ordem importa: jantar na casa da Monica ‚â† pizza no Joey's

**Matriz Identidade**: Como o Central Perk - o lugar onde tudo volta ao normal!
                """
            },
            
            "probabilidade": {
                "serie": "Grey's Anatomy",
                "content": """
üè• **PROBABILIDADE = CIRURGIAS NO GREY SLOAN**

**Eventos**: Como casos m√©dicos que chegam
- **Evento Certo**: Meredith vai salvar vidas (P = 1)
- **Evento Imposs√≠vel**: Derek voltando (P = 0)
- **Eventos Prov√°veis**: Cristina fazendo cirurgia perfeita

**Probabilidade Condicional**:
"Se Derek est√° operando, qual a chance de salvar o paciente?"
Como Meredith analisando: "Dado que √© caso imposs√≠vel, qual nossa chance?"

**Distribui√ß√£o Normal**: Como batimentos card√≠acos
- Maioria fica na faixa normal
- Valores extremos s√£o emerg√™ncias!

Bailey sempre diz: "Os n√∫meros n√£o mentem" - isso √© probabilidade pura!
                """
            },
            
            "funcoes": {
                "serie": "Friends",
                "content": """
‚òï **FUN√á√ïES = RELACIONAMENTOS EM FRIENDS**

**Entrada ‚Üí Fun√ß√£o ‚Üí Sa√≠da**:
- **Entrada**: Rachel chegando ao Central Perk
- **Fun√ß√£o**: A din√¢mica do grupo (como reagem)
- **Sa√≠da**: O resultado (risadas, drama, romance)

**Fun√ß√£o Injetora**: Como Ross falando "We were on a break!"
- Sempre gera a MESMA rea√ß√£o espec√≠fica

**Fun√ß√£o Sobrejetora**: Como Monica cozinhando
- Sempre tem resultado para qualquer situa√ß√£o

**Fun√ß√£o Bijetora**: Como piadas do Chandler
- Uma piada √∫nica para cada situa√ß√£o, e vice-versa

O padr√£o de como as coisas sempre acontecem no grupo!
                """
            },
            
            "trigonometria": {
                "serie": "The Big Bang Theory",
                "content": """
üî¨ **TRIGONOMETRIA = TEORIAS DO SHELDON**

**Seno e Cosseno**: Como ondas cerebrais do Sheldon pensando
- **Seno**: Sobe e desce como humor do Sheldon
- **Cosseno**: Seno deslocado, como Leonard sempre um passo atr√°s

**C√≠rculo Trigonom√©trico**: Como Sheldon girando na cadeira
- 360¬∞ = uma volta completa de "Bazinga!"
- 90¬∞ = quando fica perpendicular √† l√≥gica normal

**√Çngulos Not√°veis**:
- 30¬∞: Um pouco de sarcasmo
- 45¬∞: Meio caminho para o "Bazinga!"
- 90¬∞: Sheldon totalmente confuso

As fun√ß√µes se repetem, assim como as manias do Sheldon!
                """
            },
            
            "algebra": {
                "serie": "Young Sheldon",
                "content": """
üßÆ **√ÅLGEBRA = PROBLEMAS DO SHELDON CRIAN√áA**

**Vari√°veis (x, y)**: Como mist√©rios que Sheldon tenta desvendar
- x = quantos livros ele leu hoje
- y = quantas vezes corrigiu a professora

**Equa√ß√£o**: Como Sheldon organizando sua rotina
- Tempo de estudo + Tempo de TV = Dia perfeito
- Se uma parte muda, ajusta a outra

**Resolver para x**: Como Sheldon descobrindo respostas
- Ele sempre quer saber o "porqu√™"
- Isola a vari√°vel como isola os fatos

Sheldon sempre diz: "Isso √© elementar!" - assim funciona √°lgebra!
                """
            },
            
            "integrais": {
                "serie": "WandaVision",
                "content": """
‚ú® **INTEGRAIS = REALIDADE ALTERADA DA WANDA**

**Integral**: Wanda "somando" todos os momentos felizes para criar Westview
**Fun√ß√£o**: Cada dia vivido com Vision
**√Årea sob a curva**: Todo o amor acumulado ao longo do tempo

**Integral Definida**: Per√≠odo espec√≠fico que Wanda viveu com Vision
- Limites = in√≠cio e fim da ilus√£o
- Resultado = toda felicidade concentrada

**Integral Indefinite**: Como amor de Wanda - n√£o tem fim
- "+C" = constante do amor eterno

A integral junta todos os pedacinhos, assim como Wanda juntou as mem√≥rias!
                """
            }
        }
    
    def detect_confusion(self, message: str) -> bool:
        """Detecta se usu√°rio est√° confuso"""
        message_lower = message.lower()
        for pattern in self.confusion_patterns:
            if re.search(pattern, message_lower):
                return True
        return False
    
    def identify_math_topic(self, message: str) -> str:
        """Identifica t√≥pico matem√°tico na mensagem"""
        message_lower = message.lower()
        
        topic_keywords = {
            "determinantes": ["determinante", "det", "matriz quadrada", "regra de cramer", "sarrus"],
            "matrizes": ["matriz", "matrizes", "matrix", "linhas e colunas"],
            "probabilidade": ["probabilidade", "chance", "prob", "evento", "distribui√ß√£o"],
            "funcoes": ["fun√ß√£o", "fun√ß√µes", "function", "dom√≠nio", "contradom√≠nio", "f(x)"],
            "trigonometria": ["trigonometria", "seno", "coseno", "tangente", "trig", "√¢ngulo"],
            "algebra": ["√°lgebra", "algebra", "equa√ß√£o", "vari√°vel", "inc√≥gnita"],
            "integrais": ["integral", "integrais", "integra√ß√£o", "√°rea sob a curva"]
        }
        
        for topic, keywords in topic_keywords.items():
            for keyword in keywords:
                if keyword in message_lower:
                    return topic
        
        return None
    
    def get_analogy(self, topic: str) -> str:
        """Retorna analogia para o t√≥pico"""
        if topic in self.analogies:
            return self.analogies[topic]["content"]
        return ""
    
    def detect_topic_from_context(self, user_message: str, professor_response: str = "") -> str:
        """Detecta t√≥pico matem√°tico a partir do contexto da resposta do professor"""
        if professor_response:
            # Busca t√≥picos na resposta do professor
            combined_text = f"{user_message} {professor_response}".lower()
        else:
            combined_text = user_message.lower()
        
        topic_keywords = {
            "determinantes": ["determinante", "det", "matriz quadrada", "regra de cramer", "sarrus"],
            "matrizes": ["matriz", "matrizes", "matrix", "linhas e colunas", "array"],
            "probabilidade": ["probabilidade", "chance", "evento", "distribui√ß√£o"],
            "funcoes": ["fun√ß√£o", "fun√ß√µes", "dom√≠nio", "contradom√≠nio", "f(x)"],
            "trigonometria": ["trigonometria", "seno", "coseno", "tangente", "√¢ngulo"],
            "algebra": ["√°lgebra", "algebra", "equa√ß√£o", "vari√°vel", "inc√≥gnita"],
            "integrais": ["integral", "integrais", "integra√ß√£o", "√°rea sob a curva"]
        }
        
        for topic, keywords in topic_keywords.items():
            for keyword in keywords:
                if keyword in combined_text:
                    return topic
        
        return None
    
    def process_message(self, user_message: str, professor_response: str = "") -> str:
        """Processa mensagem e adiciona analogia se necess√°rio"""
        if not self.detect_confusion(user_message):
            return professor_response
        
        # Primeiro tenta identificar t√≥pico na mensagem do usu√°rio
        topic = self.identify_math_topic(user_message)
        
        # Se n√£o encontrou, tenta identificar pelo contexto (resposta do professor)
        if not topic:
            topic = self.detect_topic_from_context(user_message, professor_response)
        
        if not topic:
            return professor_response
        
        analogy = self.get_analogy(topic)
        if not analogy:
            return professor_response
        
        if professor_response:
            return f"{professor_response}\n\nüé¨ **ANALOGIA ESPECIAL PARA VOC√ä**:\n{analogy}"
        else:
            return f"üé¨ **ANALOGIA ESPECIAL PARA VOC√ä**:\n{analogy}"

# Fun√ß√£o para integra√ß√£o f√°cil
def add_analogy_if_confused(user_message: str, professor_response: str) -> str:
    """Adiciona analogia se usu√°rio estiver confuso"""
    system = StherAnalogiesSystem()
    return system.process_message(user_message, professor_response)

# Teste do sistema
if __name__ == "__main__":
    system = StherAnalogiesSystem()
    
    test_cases = [
        "N√£o entendi determinantes",
        "Matrizes s√£o muito dif√≠ceis",
        "Probabilidade est√° confuso",
        "N√£o consigo entender fun√ß√µes",
        "Trigonometria √© complicado"
    ]
    
    print("üé¨ SISTEMA DE ANALOGIAS STHER")
    print("=" * 50)
    
    for test in test_cases:
        print(f"\nüìù TESTE: {test}")
        print("-" * 40)
        response = system.process_message(test)
        print(response)
        print("=" * 50) 