import streamlit as st
import sqlite3
import json
import pandas as pd
from typing import List, Dict
from datetime import datetime
from math_exercises_database_creator import EnemMathDatabase, MathTopic

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Professor Carlos - Chat com Sther AI",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

class ProfessorStherChat:
    def __init__(self):
        self.db = EnemMathDatabase()
        
        # Inicializa hist√≥rico do chat se n√£o existir
        if 'chat_history' not in st.session_state:
            st.session_state.chat_history = []
            st.session_state.chat_history.append({
                'sender': 'Sther',
                'message': 'Ol√°, Professor Carlos! Sou a Sther AI. Posso ajud√°-lo com exerc√≠cios de matem√°tica do ENEM. Como posso ajudar hoje?',
                'timestamp': datetime.now().strftime('%H:%M:%S')
            })
        
    def main(self):
        st.title("ü§ñ Professor Carlos - Sistema Sther AI")
        
        # Criando as abas
        tab1, tab2 = st.tabs(["üí¨ Chat", "üß† Mapa Mental"])
        
        with tab1:
            self.show_chat_tab()
            
        with tab2:
            self.show_mind_map_tab()
    
    def show_chat_tab(self):
        st.markdown("## üí¨ Chat com Sther AI")
        
        # Sidebar com estat√≠sticas para o chat
        with st.sidebar:
            st.markdown("## üìä Base de Dados")
            
            stats = self.db.get_statistics()
            
            st.metric("Total de Exerc√≠cios", stats['total_exercises'])
            st.metric("Anos Dispon√≠veis", len(stats['by_year']))
            st.metric("T√≥picos Diferentes", len(stats['by_topic']))
            
            st.markdown("### üìö T√≥picos Dispon√≠veis")
            if stats['by_topic']:
                for topic, count in stats['by_topic'].items():
                    st.write(f"**{topic}:** {count}")
            
            st.markdown("---")
            st.markdown("### ‚ÑπÔ∏è Como usar")
            st.info("""
            **Exemplos de solicita√ß√µes:**
            - "Sther, preciso de exerc√≠cios de Geometria"
            - "Me envie quest√µes do ENEM 2024"
            - "Quero exerc√≠cios de Probabilidade"
            - "Mostre exerc√≠cios de Fun√ß√µes"
            """)
            
            if st.button("üóëÔ∏è Limpar Chat"):
                st.session_state.chat_history = []
                st.session_state.chat_history.append({
                    'sender': 'Sther',
                    'message': 'Chat limpo! Como posso ajudar agora?',
                    'timestamp': datetime.now().strftime('%H:%M:%S')
                })
                st.rerun()
        
        # Container para o hist√≥rico do chat
        chat_container = st.container()
        
        with chat_container:
            # Mostra hist√≥rico do chat
            for chat in st.session_state.chat_history:
                if chat['sender'] == 'Professor':
                    with st.chat_message("user"):
                        st.write(f"**{chat['timestamp']}** - {chat['message']}")
                else:  # Sther
                    with st.chat_message("assistant"):
                        st.write(f"**{chat['timestamp']}** - {chat['message']}")
                        
                        # Se a mensagem cont√©m exerc√≠cios, mostra eles
                        if 'exercises' in chat:
                            self.display_exercises_in_chat(chat['exercises'])
        
        # Input do usu√°rio
        st.markdown("---")
        user_message = st.chat_input("Digite sua mensagem para a Sther...")
        
        if user_message:
            self.process_user_message(user_message)
    
    def show_mind_map_tab(self):
        st.markdown("## üß† Mapa Mental dos T√≥picos ENEM")
        
        stats = self.db.get_statistics()
        
        if not stats['by_topic']:
            st.warning("Nenhum dado dispon√≠vel para gerar o mapa mental.")
            return
        
        # Estat√≠sticas gerais
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("üìö Total de Exerc√≠cios", stats['total_exercises'])
        
        with col2:
            st.metric("üìÖ Anos Cobertos", len(stats['by_year']))
        
        with col3:
            st.metric("üéØ T√≥picos √önicos", len(stats['by_topic']))
        
        st.markdown("---")
        
        # Visualiza√ß√£o dos t√≥picos
        st.markdown("### üìä Distribui√ß√£o por T√≥picos")
        
        # Gr√°fico de barras
        if stats['by_topic']:
            df_topics = pd.DataFrame(list(stats['by_topic'].items()), columns=['T√≥pico', 'Quantidade'])
            df_topics = df_topics.sort_values('Quantidade', ascending=True)
            
            st.bar_chart(df_topics.set_index('T√≥pico'))
            
            # Tabela detalhada
            st.markdown("### üìã Detalhamento por T√≥pico")
            df_topics_sorted = df_topics.sort_values('Quantidade', ascending=False)
            
            for _, row in df_topics_sorted.iterrows():
                percentage = (row['Quantidade'] / stats['total_exercises']) * 100
                st.write(f"**{row['T√≥pico']}:** {row['Quantidade']} exerc√≠cios ({percentage:.1f}%)")
        
        st.markdown("---")
        
        # Visualiza√ß√£o por anos
        st.markdown("### üìÖ Distribui√ß√£o por Anos")
        
        if stats['by_year']:
            df_years = pd.DataFrame(list(stats['by_year'].items()), columns=['Ano', 'Quantidade'])
            df_years = df_years.sort_values('Ano')
            
            st.line_chart(df_years.set_index('Ano'))
            
            # Tabela de anos
            st.markdown("### üìä Exerc√≠cios por Ano")
            df_years_sorted = df_years.sort_values('Ano', ascending=False)
            
            for _, row in df_years_sorted.iterrows():
                percentage = (row['Quantidade'] / stats['total_exercises']) * 100
                st.write(f"**ENEM {row['Ano']}:** {row['Quantidade']} exerc√≠cios ({percentage:.1f}%)")
        
        st.markdown("---")
        
        # Mapa mental textual
        st.markdown("### üó∫Ô∏è Mapa Mental Estruturado")
        
        st.markdown("""
        ```
        üìö ENEM MATEM√ÅTICA (557 exerc√≠cios)
        ‚îú‚îÄ‚îÄ üî¢ √ÅLGEBRA
        ‚îÇ   ‚îú‚îÄ‚îÄ Equa√ß√µes e Inequa√ß√µes
        ‚îÇ   ‚îú‚îÄ‚îÄ Sistemas Lineares
        ‚îÇ   ‚îî‚îÄ‚îÄ Polin√¥mios
        ‚îÇ
        ‚îú‚îÄ‚îÄ üìê GEOMETRIA
        ‚îÇ   ‚îú‚îÄ‚îÄ Geometria Plana
        ‚îÇ   ‚îú‚îÄ‚îÄ Geometria Espacial
        ‚îÇ   ‚îî‚îÄ‚îÄ Trigonometria
        ‚îÇ
        ‚îú‚îÄ‚îÄ üìä ESTAT√çSTICA E PROBABILIDADE
        ‚îÇ   ‚îú‚îÄ‚îÄ An√°lise de Dados
        ‚îÇ   ‚îú‚îÄ‚îÄ Probabilidade
        ‚îÇ   ‚îî‚îÄ‚îÄ Estat√≠stica Descritiva
        ‚îÇ
        ‚îú‚îÄ‚îÄ üìà FUN√á√ïES
        ‚îÇ   ‚îú‚îÄ‚îÄ Fun√ß√£o Afim
        ‚îÇ   ‚îú‚îÄ‚îÄ Fun√ß√£o Quadr√°tica
        ‚îÇ   ‚îú‚îÄ‚îÄ Fun√ß√£o Exponencial
        ‚îÇ   ‚îî‚îÄ‚îÄ Fun√ß√£o Logar√≠tmica
        ‚îÇ
        ‚îú‚îÄ‚îÄ üí∞ MATEM√ÅTICA FINANCEIRA
        ‚îÇ   ‚îú‚îÄ‚îÄ Porcentagem
        ‚îÇ   ‚îú‚îÄ‚îÄ Juros Simples e Compostos
        ‚îÇ   ‚îî‚îÄ‚îÄ Descontos
        ‚îÇ
        ‚îî‚îÄ‚îÄ üîó OUTROS T√ìPICOS
            ‚îú‚îÄ‚îÄ Progress√µes
            ‚îú‚îÄ‚îÄ An√°lise Combinat√≥ria
            ‚îî‚îÄ‚îÄ Geometria Anal√≠tica
        ```
        """)
    
    def process_user_message(self, message: str):
        # Adiciona mensagem do professor ao chat
        st.session_state.chat_history.append({
            'sender': 'Professor',
            'message': message,
            'timestamp': datetime.now().strftime('%H:%M:%S')
        })
        
        # Processa a mensagem e gera resposta da Sther
        sther_response = self.generate_sther_response(message)
        
        # Adiciona resposta da Sther
        st.session_state.chat_history.append(sther_response)
        
        st.rerun()
    
    def generate_sther_response(self, user_message: str) -> Dict:
        message_lower = user_message.lower()
        
        # Verifica se √© uma solicita√ß√£o de exerc√≠cios
        if any(word in message_lower for word in ['exerc√≠cio', 'exercicios', 'quest√£o', 'quest√µes', 'questao', 'questoes']):
            
            # Identifica o tipo de solicita√ß√£o
            if 'geometria' in message_lower:
                exercises = self.db.get_exercises_by_topic('Geometria')
                topic = 'Geometria'
            elif 'fun√ß√£o' in message_lower or 'fun√ß√µes' in message_lower:
                exercises = self.db.get_exercises_by_topic('Fun√ß√µes')
                topic = 'Fun√ß√µes'
            elif 'probabilidade' in message_lower or 'estat√≠stica' in message_lower:
                exercises = self.db.get_exercises_by_topic('Estat√≠stica e Probabilidade')
                topic = 'Estat√≠stica e Probabilidade'
            elif '√°lgebra' in message_lower or 'algebra' in message_lower:
                exercises = self.db.get_exercises_by_topic('√Ålgebra')
                topic = '√Ålgebra'
            elif any(year in message_lower for year in ['2024', '2023', '2022', '2021', '2020']):
                # Extrai o ano da mensagem
                year = None
                for y in ['2024', '2023', '2022', '2021', '2020', '2019', '2018', '2017', '2016', '2015']:
                    if y in message_lower:
                        year = int(y)
                        break
                
                if year:
                    exercises = self.db.get_exercises_by_year(year)
                    topic = f'ENEM {year}'
                else:
                    exercises = []
                    topic = 'Geral'
            else:
                # Busca geral - pega alguns exerc√≠cios aleat√≥rios
                all_stats = self.db.get_statistics()
                if all_stats['by_topic']:
                    first_topic = list(all_stats['by_topic'].keys())[0]
                    exercises = self.db.get_exercises_by_topic(first_topic)[:5]
                    topic = 'Exerc√≠cios Gerais'
                else:
                    exercises = []
                    topic = 'Geral'
            
            # Prepara resposta com exerc√≠cios
            if exercises:
                # Limita a 5 exerc√≠cios para n√£o sobrecarregar o chat
                limited_exercises = exercises[:5]
                
                response_message = f"üìö Encontrei {len(exercises)} exerc√≠cios de {topic}. Aqui est√£o os primeiros {len(limited_exercises)}:"
                
                return {
                    'sender': 'Sther',
                    'message': response_message,
                    'exercises': limited_exercises,
                    'timestamp': datetime.now().strftime('%H:%M:%S')
                }
            else:
                return {
                    'sender': 'Sther',
                    'message': f"‚ùå Desculpe, n√£o encontrei exerc√≠cios para essa solicita√ß√£o. Tente especificar um t√≥pico como Geometria, Fun√ß√µes, ou um ano espec√≠fico.",
                    'timestamp': datetime.now().strftime('%H:%M:%S')
                }
        
        # Resposta padr√£o para outras mensagens
        elif 'ol√°' in message_lower or 'oi' in message_lower:
            return {
                'sender': 'Sther',
                'message': "Ol√°, Professor Carlos! Como posso ajud√°-lo com exerc√≠cios de matem√°tica hoje?",
                'timestamp': datetime.now().strftime('%H:%M:%S')
            }
        elif 'ajuda' in message_lower or 'help' in message_lower:
            return {
                'sender': 'Sther',
                'message': """ü§ñ **Como posso ajudar:**

üìö **Para exerc√≠cios por t√≥pico:**
- "Preciso de exerc√≠cios de Geometria"
- "Mostre quest√µes de Fun√ß√µes"
- "Quero exerc√≠cios de Probabilidade"

üìÖ **Para exerc√≠cios por ano:**
- "Exerc√≠cios do ENEM 2024"
- "Quest√µes de 2023"

üí° **T√≥picos dispon√≠veis:**
Geometria, Fun√ß√µes, Estat√≠stica e Probabilidade, √Ålgebra, Matem√°tica Financeira, e outros.""",
                'timestamp': datetime.now().strftime('%H:%M:%S')
            }
        else:
            return {
                'sender': 'Sther',
                'message': f"Entendi sua mensagem: '{user_message}'. Para solicitar exerc√≠cios, use termos como 'exerc√≠cios de Geometria' ou 'quest√µes do ENEM 2024'. Digite 'ajuda' para ver mais op√ß√µes.",
                'timestamp': datetime.now().strftime('%H:%M:%S')
            }
    
    def display_exercises_in_chat(self, exercises: List[Dict]):
        """Exibe exerc√≠cios formatados no chat"""
        for i, exercise in enumerate(exercises, 1):
            with st.expander(f"üìù Exerc√≠cio {i} - ENEM {exercise['year']} Q{exercise['question_number']} ({exercise['topic']})"):
                st.write("**ENUNCIADO:**")
                st.write(exercise['question_text'])
                
                st.write("**ALTERNATIVAS:**")
                try:
                    alternatives = json.loads(exercise['alternatives']) if isinstance(exercise['alternatives'], str) else exercise['alternatives']
                    if alternatives:
                        for j, alt in enumerate(alternatives):
                            letter = chr(65 + j)  # A, B, C, D, E
                            st.write(f"{letter}) {alt}")
                    else:
                        st.write("_(Alternativas n√£o dispon√≠veis)_")
                except:
                    st.write("_(Erro ao carregar alternativas)_")
                
                # Bot√£o para exportar este exerc√≠cio espec√≠fico
                if st.button(f"üì§ Exportar Exerc√≠cio {i}", key=f"export_{exercise['id']}"):
                    self.export_single_exercise(exercise)

    def export_single_exercise(self, exercise: Dict):
        """Exporta um √∫nico exerc√≠cio"""
        formatted_exercise = {
            'id': exercise['id'],
            'year': exercise['year'],
            'question_number': exercise['question_number'],
            'topic': exercise['topic'],
            'statement': exercise['question_text'],
            'alternatives': json.loads(exercise['alternatives']) if isinstance(exercise['alternatives'], str) else exercise['alternatives'],
            'exported_at': datetime.now().isoformat(),
            'exported_by': 'Professor Carlos via Sther AI'
        }
        
        filename = f"sther_exercise_{exercise['id'].lower()}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(formatted_exercise, f, indent=2, ensure_ascii=False)
        
        # Adiciona mensagem de confirma√ß√£o ao chat
        st.session_state.chat_history.append({
            'sender': 'Sther',
            'message': f"‚úÖ Exerc√≠cio exportado com sucesso!\nüìÅ Arquivo: {filename}",
            'timestamp': datetime.now().strftime('%H:%M:%S')
        })
        
        st.success(f"‚úÖ Exerc√≠cio exportado: {filename}")

def main():
    interface = ProfessorStherChat()
    interface.main()

if __name__ == "__main__":
    main()
