#!/usr/bin/env python3
"""
Sistema de Mapa Mental com Streamlit-Markmap
Gera mapas mentais interativos baseados nas d√∫vidas da Sther
"""

import streamlit as st
import re
from typing import Dict, List, Any, Optional
from groq import Groq

try:
    from streamlit_markmap import markmap
    MARKMAP_AVAILABLE = True
except ImportError:
    MARKMAP_AVAILABLE = False
    st.error("‚ùå streamlit-markmap n√£o instalado. Execute: pip install streamlit-markmap==1.0.1")

def display_mapa_mental_markmap():
    """Interface principal do mapa mental usando streamlit-markmap"""
    
    st.markdown("# üß† Mapa Mental Interativo")
    st.markdown("Visualiza√ß√£o din√¢mica dos conceitos relacionados √† sua d√∫vida!")
    
    if not MARKMAP_AVAILABLE:
        st.error("""
        üì¶ **Depend√™ncia n√£o encontrada**
        
        Para usar os mapas mentais, instale a depend√™ncia:
        ```bash
        pip install streamlit-markmap==1.0.1
        ```
        """)
        return
    
    # Verificar se h√° hist√≥rico de chat da matem√°tica
    chat_history = st.session_state.get('chat_history', {}).get('Matem√°tica', [])
    
    if not chat_history:
        st.info("""
        üìù **Como funciona o Mapa Mental:**
        
        1. **üí¨ Fa√ßa uma pergunta** na aba "Chat" para o Professor Carlos
        2. **üß† Volte para esta aba** e veja o mapa mental autom√°tico
        3. **üîç Explore os conceitos** de forma visual e interativa
        4. **üîÑ Regenere** se quiser uma nova perspectiva
        
        üéØ **Exemplo:** "Como resolver equa√ß√µes do 2¬∫ grau?" ‚Üí Mapa mental autom√°tico!
        """)
        return
    
    # Obter √∫ltima pergunta do usu√°rio
    ultima_pergunta = obter_ultima_pergunta(chat_history)
    
    if not ultima_pergunta:
        st.warning("üí¨ Fa√ßa uma pergunta na aba Chat primeiro para gerar o mapa mental!")
        return
    
    # Verificar API key
    api_key = getattr(st.session_state, 'api_key', '')
    if not api_key:
        st.warning("""
        üîë **Configure sua API Key primeiro!**
        
        V√° para a aba "üí¨ Chat" e configure sua API Key da Groq na barra lateral.
        """)
        return
    
    # Interface de controle
    col1, col2, col3 = st.columns([3, 1, 1])
    
    with col1:
        st.markdown("### üó∫Ô∏è Mapa Mental da sua D√∫vida")
        with st.expander("üìã Contexto da pergunta", expanded=False):
            st.markdown(f"**Pergunta:** {ultima_pergunta}")
    
    with col2:
        nivel_detalhamento = st.selectbox(
            "N√≠vel:",
            ["B√°sico", "Intermedi√°rio", "Avan√ßado"],
            index=1,
            help="N√≠vel de detalhamento do mapa mental"
        )
    
    with col3:
        if st.button("üîÑ Regenerar", help="Gerar nova vers√£o do mapa mental"):
            cache_key = f"markmap_{hash(ultima_pergunta)}_{nivel_detalhamento}"
            if cache_key in st.session_state:
                del st.session_state[cache_key]
            st.rerun()
    
    # Controles de debug (em expander para n√£o poluir a interface)
    with st.expander("üîß Configura√ß√µes Avan√ßadas (Debug)", expanded=False):
        col_debug1, col_debug2 = st.columns(2)
        
        with col_debug1:
            show_debug = st.checkbox("Mostrar informa√ß√µes de debug", value=False)
            test_pan = st.checkbox("For√ßar configura√ß√µes de Pan/Zoom", value=True)
        
        with col_debug2:
            if st.button("üß™ Testar Mapa Simple"):
                st.info("üìù Execute: streamlit run teste_markmap_pan.py --server.port 8502")
            if st.button("üóëÔ∏è Limpar Cache"):
                if hasattr(st.session_state, 'markmap_cache'):
                    del st.session_state.markmap_cache
                st.success("Cache limpo!")
        
        if show_debug:
            st.markdown("**Diagn√≥stico:**")
            st.write(f"- streamlit-markmap vers√£o: 1.0.1")
            st.write(f"- Cache keys: {len([k for k in st.session_state.keys() if 'markmap' in k])}")
            st.write(f"- Pergunta hash: {hash(ultima_pergunta)}")
            
        if test_pan:
            st.info("üîß Configura√ß√µes de Pan/Zoom ser√£o for√ßadas no mapa mental")
    
    # Gerar e exibir mapa mental
    debug_options = {
        'show_debug': st.session_state.get('show_debug', False),
        'test_pan': st.session_state.get('test_pan', True)
    }
    
    # Salvar configura√ß√µes de debug no session_state
    if 'show_debug' in locals():
        st.session_state.show_debug = show_debug
    if 'test_pan' in locals():
        st.session_state.test_pan = test_pan
    
    exibir_mapa_mental_markmap(ultima_pergunta, api_key, nivel_detalhamento, debug_options)

def obter_ultima_pergunta(chat_history: List[Dict]) -> Optional[str]:
    """Obt√©m a √∫ltima pergunta feita pelo usu√°rio"""
    
    for mensagem in reversed(chat_history):
        if mensagem.get('role') == 'user':
            return mensagem.get('content', '')
    
    return None

def exibir_mapa_mental_markmap(pergunta: str, api_key: str, nivel: str, debug_options: dict = None):
    """Gera e exibe o mapa mental usando streamlit-markmap"""
    
    if debug_options is None:
        debug_options = {'show_debug': False, 'test_pan': True}
    
    # Cache baseado na pergunta e n√≠vel
    cache_key = f"markmap_{hash(pergunta)}_{nivel}"
    
    # Verificar cache
    if cache_key not in st.session_state:
        with st.spinner("üß† Gerando mapa mental interativo..."):
            markdown_content = gerar_markdown_mapa_mental(pergunta, api_key, nivel)
            st.session_state[cache_key] = markdown_content
    else:
        markdown_content = st.session_state[cache_key]
    
    if markdown_content:
        # Exibir estat√≠sticas do mapa
        stats = analisar_markdown_stats(markdown_content)
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üìä Conceitos", stats['conceitos'])
        with col2:
            st.metric("üîó Conex√µes", stats['conexoes'])
        with col3:
            st.metric("üìö N√≠veis", stats['niveis'])
        with col4:
            st.metric("üßÆ F√≥rmulas", stats['formulas'])
        
        st.markdown("---")
        
        # Debug info (se habilitado)
        if debug_options.get('show_debug', False):
            with st.expander("üîç Debug Info - Markdown Gerado", expanded=False):
                st.code(markdown_content, language="markdown")
                
                # Verificar se cont√©m configura√ß√µes de pan/zoom
                has_pan = 'pan:' in markdown_content
                has_zoom = 'zoom:' in markdown_content
                
                st.write(f"‚úÖ Cont√©m 'pan:': {has_pan}")
                st.write(f"‚úÖ Cont√©m 'zoom:': {has_zoom}")
                
                if not has_pan or not has_zoom:
                    st.warning("‚ö†Ô∏è Configura√ß√µes de pan/zoom podem estar faltando!")
        
        # Renderizar mapa mental
        try:
            # Garantir que o markdown sempre tenha as configura√ß√µes de interatividade
            if not markdown_content.startswith('---'):
                # Adicionar configura√ß√µes de markmap no in√≠cio
                markdown_content = """---
markmap:
  pan: true
  zoom: true
  initialExpandLevel: 2
  maxWidth: 300
  colorFreezeLevel: 2
  duration: 500
  spacingHorizontal: 80
  spacingVertical: 5
---

""" + markdown_content
            else:
                # Se j√° tem frontmatter, verificar se tem as configura√ß√µes essenciais
                lines = markdown_content.split('\n')
                yaml_end = -1
                for i, line in enumerate(lines):
                    if i > 0 and line.strip() == '---':
                        yaml_end = i
                        break
                
                if yaml_end > 0:
                    # Extrair configura√ß√µes YAML existentes
                    yaml_content = '\n'.join(lines[1:yaml_end])
                    remaining_content = '\n'.join(lines[yaml_end+1:])
                    
                    # Verificar se pan/zoom est√£o nas configura√ß√µes
                    if 'pan:' not in yaml_content:
                        yaml_content += '\n  pan: true'
                    if 'zoom:' not in yaml_content:
                        yaml_content += '\n  zoom: true'
                    
                    # Reconstruir markdown
                    markdown_content = f"""---
markmap:
{yaml_content}
---

{remaining_content}"""
            
            markmap(markdown_content, height=600)
            
        except Exception as e:
            st.error(f"‚ùå Erro ao renderizar mapa mental: {str(e)}")
            st.code(markdown_content, language="markdown")
    else:
        st.error("‚ùå Erro ao gerar mapa mental. Tente novamente.")

def gerar_markdown_mapa_mental(pergunta: str, api_key: str, nivel: str) -> str:
    """Gera o conte√∫do markdown do mapa mental usando IA"""
    
    try:
        client = Groq(api_key=api_key)
        
        # Configura√ß√µes por n√≠vel
        nivel_config = {
            "B√°sico": {
                "conceitos": "5-7 conceitos fundamentais",
                "profundidade": "2-3 n√≠veis de hierarquia",
                "detalhes": "explica√ß√µes simples e diretas"
            },
            "Intermedi√°rio": {
                "conceitos": "8-12 conceitos relacionados",
                "profundidade": "3-4 n√≠veis de hierarquia",
                "detalhes": "f√≥rmulas principais e exemplos"
            },
            "Avan√ßado": {
                "conceitos": "12-15 conceitos e subdivis√µes",
                "profundidade": "4-5 n√≠veis de hierarquia",
                "detalhes": "f√≥rmulas completas, demonstra√ß√µes e aplica√ß√µes"
            }
        }
        
        config = nivel_config.get(nivel, nivel_config["Intermedi√°rio"])
        
        prompt = f"""
Voc√™ √© um especialista em mapas mentais educacionais. Crie um mapa mental em formato Markdown sobre a pergunta da aluna Sther:

**Pergunta:** "{pergunta}"

**Configura√ß√£o:** {config['conceitos']}, {config['profundidade']}, {config['detalhes']}

**INSTRU√á√ïES IMPORTANTES:**
1. Responda APENAS com o c√≥digo Markdown do mapa mental
2. SEMPRE comece com as configura√ß√µes YAML frontmatter conforme exemplo
3. Use a estrutura hier√°rquica com # ## ### #### 
4. Inclua f√≥rmulas matem√°ticas usando LaTeX: $formula$ ou $$formula$$
5. Use emojis relevantes para cada conceito
6. Mantenha foco na matem√°tica do ENEM
7. Organize logicamente do geral para o espec√≠fico

**ESTRUTURA OBRIGAT√ìRIA:**
```markdown
---
markmap:
  pan: true
  zoom: true
  initialExpandLevel: 2
  maxWidth: 300
  colorFreezeLevel: 2
  duration: 500
  spacingHorizontal: 80
  spacingVertical: 5
---

# üéØ [CONCEITO PRINCIPAL]

## üìö Fundamentos
### üî¢ Conceito 1
- Defini√ß√£o b√°sica
- $formula_basica$

### üìê Conceito 2
- Propriedades importantes
- $$formula_completa$$

## üßÆ Aplica√ß√µes
### üéØ Resolu√ß√£o de Problemas
- M√©todo 1
- M√©todo 2

### üìä Exemplos ENEM
- Tipo de quest√£o
- Estrat√©gia de resolu√ß√£o

## üîó Conex√µes
### üåê Conceitos Relacionados
- T√≥pico A
- T√≥pico B
```

Gere o mapa mental:
"""
        
        response = client.chat.completions.create(
            model="deepseek-r1-distill-llama-70b",
            messages=[
                {"role": "system", "content": "Voc√™ √© um especialista em educa√ß√£o matem√°tica e mapas mentais."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=2000,
            temperature=0.7
        )
        
        markdown_content = response.choices[0].message.content.strip()
        
        # Limpar e validar o markdown
        markdown_content = limpar_markdown(markdown_content)
        
        # Se n√£o conseguiu gerar via IA, criar estrutura b√°sica
        if not markdown_content or len(markdown_content) < 100:
            markdown_content = criar_mapa_mental_basico(pergunta, nivel)
        
        return markdown_content
        
    except Exception as e:
        from encoding_utils import safe_str
        error_msg = safe_str(e)
        st.error(f"Erro na gera√ß√£o via IA: {error_msg}")
        return criar_mapa_mental_basico(pergunta, nivel)

def limpar_markdown(texto: str) -> str:
    """Limpa e valida o conte√∫do markdown"""
    
    # Remover blocos de c√≥digo markdown se existirem
    texto = re.sub(r'```markdown\n?', '', texto)
    texto = re.sub(r'```\n?', '', texto)
    
    # Garantir que come√ßa com #
    linhas = texto.split('\n')
    if linhas and not linhas[0].strip().startswith('#'):
        # Procurar primeira linha com #
        for i, linha in enumerate(linhas):
            if linha.strip().startswith('#'):
                texto = '\n'.join(linhas[i:])
                break
    
    return texto.strip()

def criar_mapa_mental_basico(pergunta: str, nivel: str) -> str:
    """Cria um mapa mental b√°sico quando a IA falha"""
    
    # Detectar t√≥pico principal
    topico = detectar_topico_matematico(pergunta)
    
    if nivel == "B√°sico":
        return f"""---
markmap:
  pan: true
  zoom: true
  initialExpandLevel: 2
  maxWidth: 300
  colorFreezeLevel: 2
  duration: 500
  spacingHorizontal: 80
  spacingVertical: 5
---

# üéØ {topico}

## üìö Conceitos Fundamentais
### üî¢ Defini√ß√£o
- O que √© {topico.lower()}
- Import√¢ncia no ENEM

### üìê Propriedades B√°sicas
- Caracter√≠sticas principais
- $formula = basica$

## üßÆ Resolu√ß√£o
### üéØ M√©todo Principal
- Passo 1: Identificar
- Passo 2: Aplicar
- Passo 3: Resolver

### üìä Exemplo ENEM
- Tipo de quest√£o comum
- Estrat√©gia de resolu√ß√£o
"""
    
    elif nivel == "Intermedi√°rio":
        return f"""---
markmap:
  pan: true
  zoom: true
  initialExpandLevel: 2
  maxWidth: 300
  colorFreezeLevel: 2
  duration: 500
  spacingHorizontal: 80
  spacingVertical: 5
---

# üéØ {topico}

## üìö Fundamentos
### üî¢ Conceitos Base
- Defini√ß√µes essenciais
- $formula_1 = ax + b$

### üìê Propriedades
- Caracter√≠sticas importantes
- $$formula_2 = \\frac{{-b \\pm \\sqrt{{b^2-4ac}}}}{{2a}}$$

## üßÆ M√©todos de Resolu√ß√£o
### üéØ M√©todo Alg√©brico
- Manipula√ß√£o de equa√ß√µes
- Isolamento de vari√°veis

### üìä M√©todo Gr√°fico
- Interpreta√ß√£o visual
- Pontos importantes

## üîó Aplica√ß√µes
### üìà Problemas Pr√°ticos
- Situa√ß√µes reais
- Modelagem matem√°tica

### üéì Quest√µes ENEM
- Padr√µes frequentes
- Dicas de resolu√ß√£o
"""
    
    else:  # Avan√ßado
        return f"""---
markmap:
  pan: true
  zoom: true
  initialExpandLevel: 2
  maxWidth: 300
  colorFreezeLevel: 2
  duration: 500
  spacingHorizontal: 80
  spacingVertical: 5
---

# üéØ {topico}

## üìö Teoria Fundamental
### üî¢ Axiomas e Defini√ß√µes
- Base te√≥rica s√≥lida
- $definicao = fundamental$

### üìê Teoremas Principais
- Demonstra√ß√µes importantes
- $$teorema = \\sum_{{i=1}}^n a_i$$

## üßÆ M√©todos Avan√ßados
### üéØ Resolu√ß√£o Anal√≠tica
- T√©cnicas alg√©bricas
- $$metodo_1 = \\int f(x) dx$$

### üìä Resolu√ß√£o Gr√°fica
- Interpreta√ß√£o geom√©trica
- $$metodo_2 = \\lim_{{x \\to a}} f(x)$$

## üîó Conex√µes Interdisciplinares
### üåê Outras √Åreas da Matem√°tica
- √Ålgebra ‚Üî Geometria
- C√°lculo ‚Üî Fun√ß√µes

### üéì Aplica√ß√µes Avan√ßadas
- F√≠sica matem√°tica
- Engenharias

## üìà Estrat√©gias ENEM
### üéØ Reconhecimento de Padr√µes
- Tipos de quest√µes
- Armadilhas comuns

### ‚ö° T√©cnicas R√°pidas
- M√©todos de estimativa
- Elimina√ß√£o de alternativas
"""

def detectar_topico_matematico(pergunta: str) -> str:
    """Detecta o t√≥pico matem√°tico principal da pergunta"""
    
    pergunta_lower = pergunta.lower()
    
    topicos = {
        'Equa√ß√£o': ['equacao', 'equa√ßao', 'resolver', 'raiz', 'solu√ß√£o'],
        'Fun√ß√£o': ['funcao', 'fun√ß√£o', 'grafico', 'gr√°fico', 'dom√≠nio', 'imagem'],
        'Geometria': ['geometria', '√°rea', 'volume', 'per√≠metro', 'tri√¢ngulo', 'c√≠rculo'],
        'Trigonometria': ['trigonometria', 'seno', 'cosseno', 'tangente', '√¢ngulo'],
        'Probabilidade': ['probabilidade', 'estat√≠stica', 'm√©dia', 'chances'],
        'An√°lise Combinat√≥ria': ['combina√ß√£o', 'permuta√ß√£o', 'arranjo', 'fatorial'],
        'Progress√µes': ['progress√£o', 'PA', 'PG', 'sequ√™ncia', 's√©rie'],
        'Logaritmo': ['logaritmo', 'log', 'exponencial', 'pot√™ncia'],
        'Matriz': ['matriz', 'determinante', 'sistema linear'],
        'Derivada': ['derivada', 'limite', 'taxa', 'varia√ß√£o']
    }
    
    for topico, palavras_chave in topicos.items():
        if any(palavra in pergunta_lower for palavra in palavras_chave):
            return topico
    
    return 'Matem√°tica'

def analisar_markdown_stats(markdown: str) -> Dict[str, int]:
    """Analisa estat√≠sticas do markdown do mapa mental"""
    
    linhas = markdown.split('\n')
    
    stats = {
        'conceitos': len([l for l in linhas if l.strip().startswith('#')]),
        'conexoes': len([l for l in linhas if '‚Üî' in l or '‚Üí' in l or '‚Üê' in l]),
        'niveis': len(set([len(l) - len(l.lstrip('#')) for l in linhas if l.strip().startswith('#') and l.strip() != ''])),
        'formulas': len(re.findall(r'\$[^$]+\$', markdown)) + len(re.findall(r'\$\$[^$]+\$\$', markdown))
    }
    
    return stats

def display_mapa_mental_wrapper():
    """Wrapper para compatibilidade com o app principal"""
    display_mapa_mental_markmap()

if __name__ == "__main__":
    # S√≥ configura p√°gina se executado diretamente
    try:
        st.set_page_config(
            page_title="Mapa Mental Markmap",
            page_icon="üß†",
            layout="wide"
        )
    except st.errors.StreamlitAPIException:
        # J√° foi configurado pelo app principal, ignora
        pass
    display_mapa_mental_markmap() 