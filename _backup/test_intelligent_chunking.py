#!/usr/bin/env python3
"""
Testes do Sistema de Chunking Inteligente
Demonstra semantic chunking, chunks por quest√£o e overlapping contextual
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from intelligent_chunker import (
    IntelligentChunker, ChunkingStrategy, intelligent_chunk_text,
    QuestionChunk, ChunkMetadata
)
import json

def test_question_based_chunking():
    """Teste de chunking baseado em quest√µes"""
    print("üîç TESTE 1: Chunking Baseado em Quest√µes")
    print("=" * 60)
    
    texto_multiplas_questoes = """
    CI√äNCIAS DA NATUREZA E SUAS TECNOLOGIAS
    
    QUEST√ÉO 91
    
    Muitas pessoas ainda se espantam com o fato de um passageiro sair ileso de um 
    acidente de carro enquanto o ve√≠culo onde estava teve perda total. Isso s√≥ √© 
    poss√≠vel devido ao funcionamento adequado dos dispositivos de seguran√ßa do ve√≠culo.
    
    A fun√ß√£o do cinto de seguran√ßa √©:
    
    A) acionar os airbags do ve√≠culo.
    B) absorver a energia cin√©tica do sistema.
    C) reduzir a velocidade do ve√≠culo.
    D) aumentar o tempo de colis√£o.
    E) diminuir a for√ßa m√©dia de impacto.
    
    QUEST√ÉO 92
    
    A energia cin√©tica de um objeto em movimento √© dada pela f√≥rmula E = mv¬≤/2, 
    onde m √© a massa e v √© a velocidade do objeto.
    
    Assinale a alternativa correta sobre energia cin√©tica:
    
    A) Energia cin√©tica √© independente da massa do objeto.
    B) Energia cin√©tica varia linearmente com a velocidade.
    C) Energia cin√©tica √© proporcional ao quadrado da velocidade.
    D) Energia cin√©tica n√£o depende da velocidade do objeto.
    E) Energia cin√©tica √© sempre constante durante o movimento.
    
    QUEST√ÉO 93
    
    O movimento retil√≠neo uniforme (MRU) √© caracterizado por velocidade constante
    e acelera√ß√£o nula.
    
    Marque a op√ß√£o correta:
    
    A) No MRU, a velocidade varia com o tempo.
    B) No MRU, existe acelera√ß√£o constante.
    C) No MRU, a dist√¢ncia percorrida √© proporcional ao tempo.
    D) No MRU, a velocidade √© sempre zero.
    E) No MRU, o objeto sempre volta ao ponto de partida.
    """
    
    chunks = intelligent_chunk_text(texto_multiplas_questoes, ChunkingStrategy.QUESTION_BASED)
    
    print(f"üìä RESULTADOS:")
    print(f"   Total de chunks: {len(chunks)}")
    print(f"   Estrat√©gia: {ChunkingStrategy.QUESTION_BASED.value}")
    
    for i, chunk in enumerate(chunks, 1):
        print(f"\nüìù Chunk {i}:")
        print(f"   üÜî ID: {chunk.metadata.chunk_id}")
        print(f"   üìè Tamanho: {chunk.chunk_size} caracteres")
        print(f"   üî¢ Quest√µes: {chunk.metadata.question_numbers}")
        print(f"   üî§ Alternativas: {len(chunk.alternatives)}")
        print(f"   üìã Comandos: {len(chunk.commands)}")
        print(f"   ‚≠ê Qualidade: {chunk.quality_score:.1%}")
        
        # Mostra preview do conte√∫do
        preview = chunk.clean_content[:100] + "..." if len(chunk.clean_content) > 100 else chunk.clean_content
        print(f"   üìÑ Preview: {preview}")
    
    return chunks

def test_semantic_groups_chunking():
    """Teste de chunking por grupos sem√¢nticos"""
    print("\nüîç TESTE 2: Chunking por Grupos Sem√¢nticos")
    print("=" * 60)
    
    texto_temas_mistos = """
    MATEM√ÅTICA E SUAS TECNOLOGIAS
    
    QUEST√ÉO 45
    
    Uma fun√ß√£o quadr√°tica f(x) = ax¬≤ + bx + c tem discriminante positivo.
    
    Isso significa que a fun√ß√£o:
    A) n√£o possui ra√≠zes reais.
    B) possui duas ra√≠zes reais e distintas.
    C) possui uma raiz real dupla.
    D) √© sempre positiva.
    E) √© sempre negativa.
    
    QUEST√ÉO 46
    
    O teorema de Pit√°goras estabelece que em um tri√¢ngulo ret√¢ngulo,
    o quadrado da hipotenusa √© igual √† soma dos quadrados dos catetos.
    
    Em um tri√¢ngulo com catetos de 3 cm e 4 cm, a hipotenusa mede:
    A) 5 cm
    B) 6 cm
    C) 7 cm
    D) 25 cm
    E) 49 cm
    
    CI√äNCIAS DA NATUREZA E SUAS TECNOLOGIAS
    
    QUEST√ÉO 47
    
    A fotoss√≠ntese √© o processo pelo qual as plantas convertem luz solar
    em energia qu√≠mica.
    
    Assinale a equa√ß√£o correta da fotoss√≠ntese:
    A) 6CO‚ÇÇ + 6H‚ÇÇO ‚Üí C‚ÇÜH‚ÇÅ‚ÇÇO‚ÇÜ + 6O‚ÇÇ
    B) C‚ÇÜH‚ÇÅ‚ÇÇO‚ÇÜ + 6O‚ÇÇ ‚Üí 6CO‚ÇÇ + 6H‚ÇÇO
    C) 6O‚ÇÇ + C‚ÇÜH‚ÇÅ‚ÇÇO‚ÇÜ ‚Üí 6CO‚ÇÇ + 6H‚ÇÇO
    D) CO‚ÇÇ + H‚ÇÇO ‚Üí C‚ÇÜH‚ÇÅ‚ÇÇO‚ÇÜ + O‚ÇÇ
    E) 2H‚ÇÇO ‚Üí 2H‚ÇÇ + O‚ÇÇ
    """
    
    chunks = intelligent_chunk_text(texto_temas_mistos, ChunkingStrategy.SEMANTIC_GROUPS)
    
    print(f"üìä RESULTADOS:")
    print(f"   Total de chunks: {len(chunks)}")
    print(f"   Estrat√©gia: {ChunkingStrategy.SEMANTIC_GROUPS.value}")
    
    # Analisa agrupamento por temas
    themes = {}
    for chunk in chunks:
        theme = chunk.metadata.subject_area or "Geral"
        if theme not in themes:
            themes[theme] = []
        themes[theme].append(chunk)
    
    print(f"\nüè∑Ô∏è AGRUPAMENTO POR TEMAS:")
    for theme, theme_chunks in themes.items():
        print(f"   üìö {theme}: {len(theme_chunks)} chunks")
        for chunk in theme_chunks:
            questions = ", ".join(map(str, chunk.metadata.question_numbers))
            print(f"      üìù Quest√µes {questions} ({chunk.chunk_size} chars)")
    
    return chunks

def test_contextual_overlap_chunking():
    """Teste de chunking com sobreposi√ß√£o contextual"""
    print("\nüîç TESTE 3: Chunking com Sobreposi√ß√£o Contextual")
    print("=" * 60)
    
    texto_sequencial = """
    QUEST√ÉO 88
    
    O aquecimento global √© um fen√¥meno clim√°tico caracterizado pelo aumento
    da temperatura m√©dia do planeta Terra. Este processo tem sido intensificado
    pelas atividades humanas, especialmente a emiss√£o de gases do efeito estufa.
    
    A principal causa do aquecimento global atual √©:
    A) a varia√ß√£o natural do clima.
    B) a atividade solar intensa.
    C) a emiss√£o de gases do efeito estufa.
    D) as erup√ß√µes vulc√¢nicas.
    E) a mudan√ßa na √≥rbita terrestre.
    
    QUEST√ÉO 89
    
    Com base no contexto anterior sobre aquecimento global, sabemos que
    os gases do efeito estufa s√£o os principais respons√°veis por este fen√¥meno.
    Entre esses gases, o di√≥xido de carbono (CO‚ÇÇ) √© o mais abundante.
    
    Qual atividade humana mais contribui para a emiss√£o de CO‚ÇÇ?
    A) agricultura intensiva.
    B) queima de combust√≠veis f√≥sseis.
    C) desmatamento das florestas.
    D) cria√ß√£o de gado bovino.
    E) uso de fertilizantes qu√≠micos.
    
    QUEST√ÉO 90
    
    Continuando a discuss√£o sobre mudan√ßas clim√°ticas, √© importante considerar
    as consequ√™ncias do aumento das emiss√µes de CO‚ÇÇ. Uma das principais
    consequ√™ncias √© o derretimento das geleiras polares.
    
    O derretimento das geleiras pode causar:
    A) diminui√ß√£o do n√≠vel dos oceanos.
    B) aumento do n√≠vel dos oceanos.
    C) estabiliza√ß√£o do clima global.
    D) redu√ß√£o da temperatura global.
    E) elimina√ß√£o dos gases do efeito estufa.
    """
    
    chunks = intelligent_chunk_text(texto_sequencial, ChunkingStrategy.CONTEXTUAL_OVERLAP)
    
    print(f"üìä RESULTADOS:")
    print(f"   Total de chunks: {len(chunks)}")
    print(f"   Estrat√©gia: {ChunkingStrategy.CONTEXTUAL_OVERLAP.value}")
    
    print(f"\nüîó AN√ÅLISE DE SOBREPOSI√á√ÉO CONTEXTUAL:")
    for i, chunk in enumerate(chunks, 1):
        print(f"   üìù Chunk {i} (Quest√£o {chunk.metadata.question_numbers}):")
        
        if chunk.context_before:
            print(f"      ‚¨ÖÔ∏è Contexto anterior: {len(chunk.context_before)} caracteres")
            preview_before = chunk.context_before[:60] + "..." if len(chunk.context_before) > 60 else chunk.context_before
            print(f"         Preview: {preview_before}")
        
        if chunk.context_after:
            print(f"      ‚û°Ô∏è Contexto posterior: {len(chunk.context_after)} caracteres")
            preview_after = chunk.context_after[:60] + "..." if len(chunk.context_after) > 60 else chunk.context_after
            print(f"         Preview: {preview_after}")
        
        # Analisa metadados de sobreposi√ß√£o
        overlap_info = chunk.metadata.overlapping_context
        if overlap_info:
            print(f"      üìä Sobreposi√ß√£o:")
            print(f"         Tem contexto anterior: {overlap_info.get('has_before', False)}")
            print(f"         Tem contexto posterior: {overlap_info.get('has_after', False)}")
    
    return chunks

def test_adaptive_size_chunking():
    """Teste de chunking com tamanho adaptativo"""
    print("\nüîç TESTE 4: Chunking com Tamanho Adaptativo")
    print("=" * 60)
    
    texto_tamanhos_variados = """
    QUEST√ÉO 100
    
    Quest√£o curta.
    
    A) A
    B) B
    
    QUEST√ÉO 101
    
    Esta √© uma quest√£o significativamente mais longa que requer uma an√°lise 
    mais detalhada do conte√∫do. O texto √© extenso e cont√©m m√∫ltiplas informa√ß√µes
    que devem ser consideradas em conjunto para uma compreens√£o adequada.
    A quest√£o aborda conceitos complexos que se inter-relacionam e formam
    um conjunto coeso de conhecimentos. √â importante manter toda esta
    informa√ß√£o junta para preservar o contexto sem√¢ntico completo.
    
    Considerando todo o contexto apresentado, assinale a alternativa correta:
    
    A) Primeira alternativa com texto mais longo que explica detalhadamente
       os conceitos envolvidos na quest√£o apresentada.
    B) Segunda alternativa que tamb√©m cont√©m informa√ß√µes extensas sobre
       o tema abordado na quest√£o.
    C) Terceira op√ß√£o com explica√ß√£o completa e detalhada dos elementos
       relevantes para a resolu√ß√£o do problema proposto.
    D) Quarta alternativa apresentando uma an√°lise aprofundada dos aspectos
       te√≥ricos e pr√°ticos relacionados ao assunto.
    E) Quinta e √∫ltima op√ß√£o com considera√ß√µes finais sobre o tema
       e suas implica√ß√µes no contexto geral da disciplina.
    
    QUEST√ÉO 102
    
    Quest√£o m√©dia.
    
    Texto explicativo de tamanho moderado.
    
    A) Op√ß√£o A
    B) Op√ß√£o B
    C) Op√ß√£o C
    D) Op√ß√£o D
    E) Op√ß√£o E
    """
    
    chunks = intelligent_chunk_text(texto_tamanhos_variados, ChunkingStrategy.ADAPTIVE_SIZE)
    
    print(f"üìä RESULTADOS:")
    print(f"   Total de chunks: {len(chunks)}")
    print(f"   Estrat√©gia: {ChunkingStrategy.ADAPTIVE_SIZE.value}")
    
    print(f"\nüìè AN√ÅLISE DE TAMANHOS ADAPTATIVOS:")
    sizes = []
    for i, chunk in enumerate(chunks, 1):
        size = chunk.chunk_size
        sizes.append(size)
        
        # Classifica tamanho
        if size < 200:
            size_class = "Pequeno"
        elif size < 800:
            size_class = "M√©dio"
        else:
            size_class = "Grande"
        
        print(f"   üìù Chunk {i}: {size} chars ({size_class})")
        print(f"      Quest√µes: {chunk.metadata.question_numbers}")
        print(f"      Qualidade: {chunk.quality_score:.1%}")
    
    if sizes:
        avg_size = sum(sizes) / len(sizes)
        min_size = min(sizes)
        max_size = max(sizes)
        
        print(f"\nüìä ESTAT√çSTICAS DE TAMANHO:")
        print(f"   M√©dia: {avg_size:.0f} caracteres")
        print(f"   M√≠nimo: {min_size} caracteres")
        print(f"   M√°ximo: {max_size} caracteres")
        print(f"   Varia√ß√£o: {max_size - min_size} caracteres")
    
    return chunks

def test_mixed_strategy_chunking():
    """Teste de estrat√©gia mista de chunking"""
    print("\nüîç TESTE 5: Estrat√©gia Mista de Chunking")
    print("=" * 60)
    
    texto_complexo = """
    LINGUAGENS, C√ìDIGOS E SUAS TECNOLOGIAS
    
    Texto base para as quest√µes 61 a 63
    
    A comunica√ß√£o digital transformou significativamente as rela√ß√µes sociais
    no s√©culo XXI. As redes sociais, aplicativos de mensagens e plataformas
    de compartilhamento de conte√∫do criaram novas formas de intera√ß√£o humana.
    
    QUEST√ÉO 61
    
    Com base no texto, a principal transforma√ß√£o das comunica√ß√µes digitais foi:
    A) o fim das comunica√ß√µes presenciais.
    B) a cria√ß√£o de novas formas de intera√ß√£o.
    C) a substitui√ß√£o completa da escrita.
    D) a elimina√ß√£o das diferen√ßas culturais.
    E) o aumento da velocidade de internet.
    
    QUEST√ÉO 62
    
    As redes sociais mencionadas no texto representam:
    A) apenas entretenimento para jovens.
    B) ferramentas exclusivas de marketing.
    C) plataformas de intera√ß√£o social digital.
    D) substitutos para a educa√ß√£o formal.
    E) sistemas de controle governamental.
    
    QUEST√ÉO 63
    
    O impacto das comunica√ß√µes digitais nas rela√ß√µes sociais pode ser considerado:
    A) insignificante para a sociedade atual.
    B) limitado apenas ao ambiente profissional.
    C) restrito √† popula√ß√£o mais jovem.
    D) significativo para toda a sociedade.
    E) prejudicial em todos os aspectos.
    
    MATEM√ÅTICA E SUAS TECNOLOGIAS
    
    QUEST√ÉO 64
    
    Uma nova √°rea de conhecimento requer an√°lise diferente.
    Calcule a √°rea de um c√≠rculo com raio 5 cm.
    
    A) 25œÄ cm¬≤
    B) 10œÄ cm¬≤
    C) 5œÄ cm¬≤
    D) 15œÄ cm¬≤
    E) 20œÄ cm¬≤
    """
    
    chunks = intelligent_chunk_text(texto_complexo, ChunkingStrategy.MIXED_STRATEGY)
    
    print(f"üìä RESULTADOS:")
    print(f"   Total de chunks: {len(chunks)}")
    print(f"   Estrat√©gia: {ChunkingStrategy.MIXED_STRATEGY.value}")
    
    print(f"\nüéØ AN√ÅLISE DA ESTRAT√âGIA MISTA:")
    
    # Analisa tipos de chunks criados
    chunk_types = {}
    for chunk in chunks:
        chunk_type = chunk.metadata.chunk_type
        if chunk_type not in chunk_types:
            chunk_types[chunk_type] = 0
        chunk_types[chunk_type] += 1
    
    print(f"   üìä Tipos de chunks criados:")
    for chunk_type, count in chunk_types.items():
        print(f"      {chunk_type}: {count} chunks")
    
    # Analisa agrupamentos de quest√µes
    print(f"\n   üìù Agrupamento de quest√µes:")
    for i, chunk in enumerate(chunks, 1):
        questions = chunk.metadata.question_numbers
        if questions:
            if len(questions) == 1:
                print(f"      Chunk {i}: Quest√£o individual {questions[0]}")
            else:
                print(f"      Chunk {i}: Quest√µes agrupadas {questions}")
        else:
            print(f"      Chunk {i}: Conte√∫do base/contextual")
    
    return chunks

def test_chunking_quality_metrics():
    """Teste de m√©tricas de qualidade do chunking"""
    print("\nüîç TESTE 6: M√©tricas de Qualidade do Chunking")
    print("=" * 60)
    
    texto_qualidade = """
    QUEST√ÉO 75
    
    Quest√£o completa e bem estruturada com todos os elementos necess√°rios
    para uma an√°lise adequada. Possui enunciado claro, contexto relevante
    e alternativas bem definidas.
    
    Assinale a alternativa correta:
    
    A) Alternativa A com conte√∫do adequado.
    B) Alternativa B com informa√ß√£o relevante.
    C) Alternativa C com explica√ß√£o clara.
    D) Alternativa D com detalhes importantes.
    E) Alternativa E com conclus√£o apropriada.
    
    QUEST√ÉO 76
    
    Quest√£o incompleta sem alter
    
    QUEST√ÉO 77
    
    A) Apenas alternativas sem enunciado
    B) Sem contexto adequado
    C) Estrutura problem√°tica
    """
    
    # Testa diferentes estrat√©gias para comparar qualidade
    strategies = [
        ChunkingStrategy.QUESTION_BASED,
        ChunkingStrategy.SEMANTIC_GROUPS,
        ChunkingStrategy.CONTEXTUAL_OVERLAP
    ]
    
    strategy_results = {}
    
    for strategy in strategies:
        chunker = IntelligentChunker(strategy)
        chunks = chunker.chunk_text(texto_qualidade)
        stats = chunker.get_chunking_stats()
        
        strategy_results[strategy.value] = {
            "chunks_count": len(chunks),
            "avg_quality": stats.get("avg_quality_score", 0),
            "avg_size": stats.get("avg_chunk_size", 0),
            "chunks": chunks
        }
    
    print(f"üìä COMPARA√á√ÉO DE QUALIDADE POR ESTRAT√âGIA:")
    print(f"{'Estrat√©gia':<20} {'Chunks':<8} {'Qualidade':<12} {'Tam. M√©dio':<12}")
    print("-" * 60)
    
    for strategy_name, results in strategy_results.items():
        print(f"{strategy_name:<20} {results['chunks_count']:<8} "
              f"{results['avg_quality']:<12.1%} {results['avg_size']:<12.0f}")
    
    # Analisa qualidade individual dos chunks
    print(f"\nüîç AN√ÅLISE DETALHADA DE QUALIDADE:")
    
    best_strategy = max(strategy_results.items(), key=lambda x: x[1]["avg_quality"])
    best_chunks = best_strategy[1]["chunks"]
    
    print(f"   ü•á Melhor estrat√©gia: {best_strategy[0]}")
    print(f"   üìä Qualidade m√©dia: {best_strategy[1]['avg_quality']:.1%}")
    
    for i, chunk in enumerate(best_chunks, 1):
        print(f"\n   üìù Chunk {i} (Qualidade: {chunk.quality_score:.1%}):")
        print(f"      Quest√µes: {chunk.metadata.question_numbers}")
        print(f"      Alternativas: {len(chunk.alternatives)}")
        print(f"      Comandos: {len(chunk.commands)}")
        print(f"      Tamanho: {chunk.chunk_size} chars")
    
    return strategy_results

def demonstrate_chunking_export():
    """Demonstra exporta√ß√£o de chunks estruturados"""
    print("\nüîç TESTE 7: Exporta√ß√£o de Chunks Estruturados")
    print("=" * 60)
    
    texto_exemplo = """
    QUEST√ÉO 50
    
    O sistema solar √© composto por oito planetas que orbitam o Sol.
    
    Qual √© o planeta mais pr√≥ximo do Sol?
    A) Merc√∫rio
    B) V√™nus
    C) Terra
    D) Marte
    E) J√∫piter
    """
    
    chunks = intelligent_chunk_text(texto_exemplo, ChunkingStrategy.QUESTION_BASED)
    
    # Converte chunks para formato export√°vel
    export_data = {
        "chunking_metadata": {
            "strategy": ChunkingStrategy.QUESTION_BASED.value,
            "total_chunks": len(chunks),
            "processing_timestamp": chunks[0].metadata.processing_timestamp if chunks else None
        },
        "chunks": []
    }
    
    for chunk in chunks:
        chunk_data = {
            "chunk_id": chunk.metadata.chunk_id,
            "chunk_type": chunk.metadata.chunk_type,
            "content": chunk.content,
            "clean_content": chunk.clean_content,
            "question_numbers": chunk.metadata.question_numbers,
            "alternatives": chunk.alternatives,
            "commands": chunk.commands,
            "context_before": chunk.context_before,
            "context_after": chunk.context_after,
            "chunk_size": chunk.chunk_size,
            "quality_score": chunk.quality_score,
            "metadata": {
                "subject_area": chunk.metadata.subject_area,
                "topics": chunk.metadata.topics,
                "confidence_score": chunk.metadata.confidence_score,
                "original_position": chunk.metadata.original_position
            }
        }
        export_data["chunks"].append(chunk_data)
    
    # Salva em arquivo JSON
    output_file = "chunks_inteligentes_exemplo.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(export_data, f, ensure_ascii=False, indent=2)
    
    print(f"üìÅ Chunks exportados para: {output_file}")
    print(f"üìä Total de chunks: {len(chunks)}")
    
    # Mostra preview da estrutura
    print(f"\nüìÑ PREVIEW DA ESTRUTURA EXPORTADA:")
    print("```json")
    preview = {
        "chunking_metadata": export_data["chunking_metadata"],
        "chunks_count": len(export_data["chunks"]),
        "first_chunk_preview": {
            "chunk_id": export_data["chunks"][0]["chunk_id"] if export_data["chunks"] else None,
            "question_numbers": export_data["chunks"][0]["question_numbers"] if export_data["chunks"] else None,
            "alternatives_count": len(export_data["chunks"][0]["alternatives"]) if export_data["chunks"] else 0,
            "quality_score": export_data["chunks"][0]["quality_score"] if export_data["chunks"] else 0
        }
    }
    print(json.dumps(preview, indent=2, ensure_ascii=False))
    print("```")

def run_all_chunking_tests():
    """Executa todos os testes de chunking inteligente"""
    print("üöÄ SISTEMA DE CHUNKING INTELIGENTE - TESTES COMPLETOS")
    print("=" * 80)
    print("üéØ Semantic chunking, chunks por quest√£o e overlapping contextual")
    print()
    
    # Executa todos os testes
    test_question_based_chunking()
    test_semantic_groups_chunking()
    test_contextual_overlap_chunking()
    test_adaptive_size_chunking()
    test_mixed_strategy_chunking()
    test_chunking_quality_metrics()
    demonstrate_chunking_export()
    
    print("\n" + "=" * 80)
    print("‚úÖ TODOS OS TESTES DE CHUNKING CONCLU√çDOS!")
    print()
    print("üéâ PRINCIPAIS FUNCIONALIDADES DEMONSTRADAS:")
    print("   ‚Ä¢ üìù Chunking por quest√£o (preserva integridade)")
    print("   ‚Ä¢ üè∑Ô∏è Agrupamento sem√¢ntico (por tema/√°rea)")
    print("   ‚Ä¢ üîó Sobreposi√ß√£o contextual (contexto entre chunks)")
    print("   ‚Ä¢ üìè Tamanho adaptativo (baseado no conte√∫do)")
    print("   ‚Ä¢ üéØ Estrat√©gia mista (combina√ß√£o inteligente)")
    print("   ‚Ä¢ üìä M√©tricas de qualidade (scores de confian√ßa)")
    print("   ‚Ä¢ üìÅ Exporta√ß√£o estruturada (JSON completo)")
    print()
    print("üèÜ RESULTADO: Chunks semanticamente coerentes e contextualizados!")

if __name__ == "__main__":
    run_all_chunking_tests() 