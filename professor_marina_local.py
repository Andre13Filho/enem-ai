#!/usr/bin/env python3
"""
Professora Marina - Sistema RAG Local para Geografia
ENEM AI Helper - Interface integrada com Streamlit
"""

import streamlit as st
import time
from typing import Dict, Any, List
import os

# Importa sistema RAG de geografia
try:
    from local_geography_rag import local_geography_rag
    GEOGRAPHY_RAG_AVAILABLE = True
except ImportError:
    GEOGRAPHY_RAG_AVAILABLE = False

def setup_professor_marina_local_ui():
    """Configura interface da Professora Marina"""
    
    if not GEOGRAPHY_RAG_AVAILABLE:
        st.error("‚ùå Sistema RAG Local de Geografia n√£o dispon√≠vel. Verifique as depend√™ncias.")
        return
    
    st.markdown("### üìö Materiais de Geografia")
    
    # Verifica se a pasta existe
    if not os.path.exists("./geografia"):
        st.warning("‚ö†Ô∏è Pasta 'geografia' n√£o encontrada. Crie a pasta e adicione seus materiais.")
        return
    
    # Bot√£o para processar documentos
    if st.button("üîÑ Processar Materiais", key="process_geography"):
        with st.spinner("Processando materiais de geografia..."):
            success = local_geography_rag.process_geography_documents()
            if success:
                st.success("‚úÖ Materiais processados com sucesso!")
            else:
                st.error("‚ùå Erro ao processar materiais")
    
    # Estat√≠sticas
    stats = local_geography_rag.get_stats()
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Documentos", stats["total_documentos"])
    with col2:
        st.metric("VectorStore", "‚úÖ" if stats["vectorstore_inicializado"] else "‚ùå")
    with col3:
        st.metric("RAG Chain", "‚úÖ" if stats["rag_chain_configurada"] else "‚ùå")

def get_professor_marina_local_response(question: str, api_key: str) -> str:
    """Gera resposta da Professora Marina usando RAG local"""
    
    if not GEOGRAPHY_RAG_AVAILABLE:
        return "‚ùå Sistema RAG Local de Geografia n√£o est√° dispon√≠vel. Verifique as depend√™ncias."
    
    if not api_key:
        return "üîë Por favor, configure sua chave da API Groq para continuar."
    
    try:
        # Tenta carregar vectorstore existente
        if not local_geography_rag.vectorstore:
            if not local_geography_rag.load_existing_vectorstore():
                # Se n√£o existir, processa documentos
                if not local_geography_rag.process_geography_documents():
                    return "‚ùå Erro ao processar materiais de geografia. Verifique se a pasta 'geografia' existe e cont√©m documentos."
        
        # Configura RAG chain se necess√°rio
        if not local_geography_rag.rag_chain:
            local_geography_rag.create_rag_chain(api_key)
        
        # Gera resposta
        result = local_geography_rag.get_response(question)
        response = result["answer"]
        
        # Aplica formata√ß√£o espec√≠fica de geografia
        try:
            from geography_formatter import format_geography_response
            response = format_geography_response(response)
        except ImportError:
            pass
        
        # Limpa mem√≥ria ap√≥s cada resposta
        local_geography_rag.clear_memory()
        
        return response
        
    except Exception as e:
        return f"‚ùå Erro ao gerar resposta: {str(e)}" 