import streamlit as st
import time
import re
import os
from typing import Dict, List, Any
from datetime import datetime
from groq import Groq
from local_redacao_rag import setup_redacao_ui, analyze_redacao_pdf
from local_portuguese_rag import local_portuguese_rag, LocalPortugueseRAG
from professor_leticia_local import setup_professor_leticia_local_ui, get_professor_leticia_local_response

# Sistema de configura√ß√£o adaptativo para cloud e local
try:
    from cloud_config import get_config
    cloud_config = get_config()
    print(f"‚úÖ Configura√ß√£o carregada - Ambiente: {'Cloud' if cloud_config.is_cloud else 'Local'}")
except ImportError:
    print("‚ö†Ô∏è cloud_config n√£o encontrado")
    cloud_config = None

# Carrega vari√°veis de ambiente do arquivo .env (apenas local)
if not (cloud_config and cloud_config.is_cloud):
    try:
        from dotenv import load_dotenv
        load_dotenv(encoding='utf-8')
        print("‚úÖ Vari√°veis de ambiente carregadas do arquivo .env")
    except ImportError:
        print("‚ö†Ô∏è python-dotenv n√£o encontrado. Instale com: pip install python-dotenv")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao carregar .env: {e}")

# Configura encoding seguro
try:
    from encoding_utils import setup_encoding
    setup_encoding()
except ImportError:
    pass

# Configura√ß√£o da p√°gina - DEVE SER A PRIMEIRA CHAMADA STREAMLIT
st.set_page_config(
    page_title="ENEM AI Helper - Professores Particulares para Sther",
    page_icon="üéì",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Importa√ß√£o lazy dos sistemas RAG - carrega apenas quando necess√°rio
PROFESSOR_CARLOS_LOCAL_AVAILABLE = False
PROFESSOR_LUCIANA_LOCAL_AVAILABLE = False  
PROFESSOR_ROBERTO_LOCAL_AVAILABLE = False
PROFESSOR_EDUARDO_LOCAL_AVAILABLE = False
PROFESSOR_MARINA_LOCAL_AVAILABLE = False
PROFESSOR_FERNANDO_LOCAL_AVAILABLE = False
PORTUGUESE_RAG_AVAILABLE = False
ENEM_EXERCISES_AVAILABLE = False
EXERCICIOS_PERSONALIZADOS_AVAILABLE = False
REDACAO_AVAILABLE = False

# Cache para m√≥dulos importados
_imported_modules = {}

def lazy_import_professor(subject: str):
    """Importa professor sob demanda para economizar mem√≥ria"""
    global PROFESSOR_CARLOS_LOCAL_AVAILABLE, PROFESSOR_LUCIANA_LOCAL_AVAILABLE
    global PROFESSOR_ROBERTO_LOCAL_AVAILABLE, PROFESSOR_EDUARDO_LOCAL_AVAILABLE
    global PROFESSOR_MARINA_LOCAL_AVAILABLE, PROFESSOR_FERNANDO_LOCAL_AVAILABLE
    global PORTUGUESE_RAG_AVAILABLE, REDACAO_AVAILABLE
    
    if subject == "Matem√°tica" and "carlos" not in _imported_modules:
        try:
            from professor_carlos_local import setup_professor_carlos_local_ui, get_professor_carlos_local_response
            _imported_modules["carlos"] = {
                "setup": setup_professor_carlos_local_ui,
                "response": get_professor_carlos_local_response
            }
            PROFESSOR_CARLOS_LOCAL_AVAILABLE = True
        except ImportError:
            pass
    
    elif subject == "Qu√≠mica" and "luciana" not in _imported_modules:
        try:
            from professor_luciana_local import setup_professor_luciana_local_ui, get_professor_luciana_local_response
            _imported_modules["luciana"] = {
                "setup": setup_professor_luciana_local_ui,
                "response": get_professor_luciana_local_response
            }
            PROFESSOR_LUCIANA_LOCAL_AVAILABLE = True
        except ImportError:
            pass
    
    elif subject == "Biologia" and "roberto" not in _imported_modules:
        try:
            from professor_roberto_local import setup_professor_roberto_local_ui, get_professor_roberto_local_response
            _imported_modules["roberto"] = {
                "setup": setup_professor_roberto_local_ui,
                "response": get_professor_roberto_local_response
            }
            PROFESSOR_ROBERTO_LOCAL_AVAILABLE = True
        except ImportError:
            pass
    
    elif subject == "Hist√≥ria" and "eduardo" not in _imported_modules:
        try:
            from professor_eduardo_local import setup_professor_eduardo_local_ui, get_professor_eduardo_local_response
            _imported_modules["eduardo"] = {
                "setup": setup_professor_eduardo_local_ui,
                "response": get_professor_eduardo_local_response
            }
            PROFESSOR_EDUARDO_LOCAL_AVAILABLE = True
        except ImportError:
            pass
    
    elif subject == "Geografia" and "marina" not in _imported_modules:
        try:
            from professor_marina_local import setup_professor_marina_local_ui, get_professor_marina_local_response
            _imported_modules["marina"] = {
                "setup": setup_professor_marina_local_ui,
                "response": get_professor_marina_local_response
            }
            PROFESSOR_MARINA_LOCAL_AVAILABLE = True
        except ImportError:
            pass
    
    elif subject == "F√≠sica" and "fernando" not in _imported_modules:
        try:
            from professor_fernando_local import setup_professor_fernando_local_ui, get_professor_fernando_local_response
            _imported_modules["fernando"] = {
                "setup": setup_professor_fernando_local_ui,
                "response": get_professor_fernando_local_response
            }
            PROFESSOR_FERNANDO_LOCAL_AVAILABLE = True
        except ImportError:
            pass
    
    elif subject == "L√≠ngua Portuguesa" and "leticia" not in _imported_modules:
        try:
            from professor_leticia_local import setup_professor_leticia_local_ui, get_professor_leticia_local_response, PORTUGUESE_RAG_AVAILABLE as PORTUGUESE_AVAILABLE
            _imported_modules["leticia"] = {
                "setup": setup_professor_leticia_local_ui,
                "response": get_professor_leticia_local_response
            }
            PORTUGUESE_RAG_AVAILABLE = PORTUGUESE_AVAILABLE
        except ImportError:
            pass
    
    elif subject == "Reda√ß√£o" and "redacao" not in _imported_modules:
        try:
            from local_redacao_rag import setup_redacao_ui, analyze_redacao_pdf
            _imported_modules["redacao"] = {
                "setup": setup_redacao_ui,
                "analyze": analyze_redacao_pdf
            }
            REDACAO_AVAILABLE = True
        except ImportError:
            pass

def lazy_import_exercises():
    """Importa sistema de exerc√≠cios sob demanda"""
    global EXERCICIOS_PERSONALIZADOS_AVAILABLE
    
    if "exercicios" not in _imported_modules:
        try:
            from exercicios_personalizados import exercicios_personalizados
            _imported_modules["exercicios"] = exercicios_personalizados
            EXERCICIOS_PERSONALIZADOS_AVAILABLE = True
        except ImportError:
            pass

def lazy_import_mindmap():
    """Importa mapa mental sob demanda"""
    if "mindmap" not in _imported_modules:
        try:
            from mapa_mental_markmap import display_mapa_mental_wrapper
            _imported_modules["mindmap"] = display_mapa_mental_wrapper
        except ImportError:
            pass

# Configura√ß√£o MathJax para renderiza√ß√£o de f√≥rmulas matem√°ticas
st.markdown("""
<script>
  window.MathJax = {
    tex: {
      inlineMath: [['$', '$'], ['\\(', '\\)']],
      displayMath: [['$$', '$$'], ['\\[', '\\]']]
    },
    options: {
      ignoreHtmlClass: 'nostem|nolatexmath',
      processHtmlClass: 'stemblock|latexmath',
      processEscapes: true,
      processEnvironments: true,
      processRefs: true
    }
  };
</script>
<script async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script>
""", unsafe_allow_html=True)

# CSS customizado
st.markdown("""
<style>
    .main {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .stApp > header {
        background-color: transparent;
    }
    
    .stApp {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .block-container {
        background-color: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 2rem;
        margin-top: 1rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    .stSelectbox > div > div {
        background-color: #09278d;
        color: white;
        border-radius: 10px;
        border: none;
    }
    
    .stButton > button {
        background: linear-gradient(90deg, #09278d 0%, #1e3a8a 100%);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 0.5rem 2rem;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(9, 39, 141, 0.4);
    }
    
    .chat-message {
        padding: 1rem;
        border-radius: 15px;
        margin: 1rem 0;
        border-left: 4px solid #09278d;
        background-color: #f8fafc;
    }
    
    .teacher-intro {
        background: linear-gradient(90deg, #09278d 0%, #1e3a8a 100%);
        color: white !important;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        text-align: center;
    }
    
    .teacher-intro h3 {
        color: white !important;
    }
    
    .teacher-intro p {
        color: white !important;
    }
    
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #09278d 0%, #1e3a8a 100%);
    }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        text-align: center;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Configura√ß√£o das mat√©rias e professores
SUBJECTS = {
    "Matem√°tica": {
        "teacher": "Prof. Carlos",
        "icon": "üßÆ",
        "description": "Especialista em matem√°tica do ENEM com sistema RAG local e formata√ß√£o matem√°tica aprimorada",
        "intro": "Ol√°, Futura Senhora Sther Souza! Sou o Professor Carlos, seu professor particular de Matem√°tica! Agora tenho formata√ß√£o matem√°tica melhorada com LaTeX, respostas mais claras e sem duplica√ß√µes. Vamos dominar a matem√°tica do ENEM juntos! üöÄ"
    },
    "Portugu√™s": {
        "teacher": "Profa. Ana",
        "icon": "üìö",
        "description": "Literatura, gram√°tica e interpreta√ß√£o de texto",
        "intro": "Ol√°, Futura Dra. Sther! Sou a Professora Ana, especialista em Portugu√™s para o ENEM. Vou te ajudar com gram√°tica, literatura e reda√ß√£o!"
    },
    "Biologia": {
        "teacher": "Prof. Roberto",
        "icon": "üß¨",
        "description": "Especialista em biologia do ENEM com sistema RAG local e analogias das suas s√©ries favoritas",
        "intro": "E a√≠, Futura Psic√≥loga Sther! Sou o Professor Roberto de Biologia! Tenho acesso direto aos seus materiais de biologia e vou usar analogias das suas s√©ries favoritas para te ensinar. Vamos desvendar os mist√©rios da vida juntos! üß¨üî¨"
    },
    "Geografia": {
        "teacher": "Profa. Marina",
        "icon": "üåç",
        "description": "Geografia f√≠sica, humana e geopol√≠tica",
        "intro": "Fala, Futura Psic√≥loga Sther Souza! Sou a Professora Marina de Geografia. Vamos explorar o mundo e suas transforma√ß√µes!"
    },
    "Hist√≥ria": {
        "teacher": "Prof. Eduardo",
        "icon": "üèõÔ∏è",
        "description": "Especialista em hist√≥ria do ENEM com sistema RAG local e analogias das suas s√©ries favoritas",
        "intro": "Eai, Sther! Sou o Professor Eduardo de Hist√≥ria! Tenho acesso direto aos seus materiais de hist√≥ria e vou usar analogias das suas s√©ries favoritas para te ensinar. Vamos viajar no tempo e entender nosso passado juntos! üèõÔ∏èüìö"
    },
    "Qu√≠mica": {
        "teacher": "Profa. Luciana",
        "icon": "‚öóÔ∏è",
        "description": "Qu√≠mica org√¢nica, inorg√¢nica e f√≠sico-qu√≠mica",
        "intro": "Oi, Lind√≠ssima Sther! Sou a Professora Luciana de Qu√≠mica. Vamos misturar conhecimento e descobrir rea√ß√µes incr√≠veis!"
    },
    "F√≠sica": {
        "teacher": "Prof. Fernando",
        "icon": "üß™",
        "description": "Especialista em f√≠sica do ENEM com sistema RAG local e analogias das suas s√©ries favoritas",
        "intro": "E a√≠, Minha futura psic√≥loga Sther! Sou o Professor Fernando de F√≠sica! Tenho acesso direto aos seus materiais de f√≠sica e vou usar analogias das suas s√©ries favoritas para te ensinar. Vamos desvendar os mist√©rios do universo juntos! üß™‚ö°"
    },
    "Reda√ß√£o": {
        "teacher": "Profa. Carla",
        "icon": "‚úçÔ∏è",
        "description": "T√©cnicas de reda√ß√£o e disserta√ß√£o argumentativa",
        "intro": "Ol√°, Sther (futura) Souza! Sou a Professora Carla de Reda√ß√£o. Vamos transformar suas ideias em textos nota 1000!"
    },
    "L√≠ngua Portuguesa": {
        "teacher": "Professora Let√≠cia",
        "icon": "üë©‚Äçüè´",
        "description": "Gram√°tica, literatura e interpreta√ß√£o de texto",
        "intro": "Oi, Princesa Sther! Sou a Professora Let√≠cia. Vamos desvendar os segredos da l√≠ngua portuguesa e da literatura!"
    },
}

# Carrega chave da API automaticamente do arquivo .env
# Obt√©m chave de API de forma adaptativa
if cloud_config:
    AUTO_API_KEY = cloud_config.get_api_key('GROQ_API_KEY') or ''
else:
    AUTO_API_KEY = os.getenv('GROQ_API_KEY', '')

# Inicializa√ß√£o do session state
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = {subject: [] for subject in SUBJECTS.keys()}
if 'current_subject' not in st.session_state:
    st.session_state.current_subject = "Matem√°tica"
if 'api_key' not in st.session_state:
    st.session_state.api_key = ""
if 'processing_message' not in st.session_state:
    st.session_state.processing_message = False
if 'generated_exercises' not in st.session_state:
    st.session_state.generated_exercises = {subject: [] for subject in SUBJECTS.keys()}
if 'last_user_question' not in st.session_state:
    st.session_state.last_user_question = {subject: "" for subject in SUBJECTS.keys()}

# Se h√° API key no .env, sempre usa ela (prioridade m√°xima)
if AUTO_API_KEY:
    st.session_state.api_key = AUTO_API_KEY

# Inicializa vari√°veis de controle para Enter
for subject in SUBJECTS.keys():
    if f'send_message_{subject}' not in st.session_state:
        st.session_state[f'send_message_{subject}'] = False
    if f'last_message_{subject}' not in st.session_state:
        st.session_state[f'last_message_{subject}'] = ""

class GroqTeacher:
    """Professor gen√©rico usando DeepSeek R1 Distill via Groq"""
    
    def __init__(self, subject_info: Dict):
        self.subject_info = subject_info
        self.name = subject_info["teacher"]
        self.subject = None  # Will be set when used
    
    def get_response(self, user_message: str, api_key: str) -> str:
        """Gera resposta usando DeepSeek R1 Distill via Groq"""
        
        if not api_key:
            return f"""
üîë **Configure sua API Key da Groq**

Para ativar {self.name}, voc√™ precisa:
1. Obter uma API Key da Groq (https://console.groq.com)
2. Inserir a chave na barra lateral
3. Come√ßar a conversar!

üí° {self.name} est√° pronto para te ajudar com {self.subject}!
"""
        
        try:
            client = Groq(api_key=api_key)
            
            # Prompt estruturado e profissional para cada professor
            system_prompt = f"""# IDENTIDADE DO PROFESSOR
Voc√™ √© {self.name}, professor(a) especialista em {self.subject} para o ENEM.
Voc√™ √© professor particular exclusivo da Sther Souza, uma estudante de 17 anos.

# DIRETRIZES DE COMPORTAMENTO
## Personalidade:
- Did√°tico, paciente e bem-humorado
- Linguagem adequada para jovens de 17 anos
- Seja um professor que gosta de ensinar
- Seja carinhoso, mas profissional
- Seja engra√ßado, mas profissional
- D√™ uma aula para uma jovem de 17 anos que tem dificuldades em sua mat√©ria

## Metodologia de Ensino:
- Use analogias e exemplos pr√°ticos
- Relacione com situa√ß√µes do cotidiano brasileiro
- Foque nos t√≥picos que caem no ENEM
- Responda sempre em portugu√™s brasileiro

## Estrutura da Resposta:
1. üé¨ **SEMPRE inicie com uma analogia das s√©ries favoritas da Sther** (FRIENDS, The Big Bang Theory, Stranger Things, Grey's Anatomy, WandaVision)
2. Responda a pergunta de forma clara e completa
3. Use formata√ß√£o em markdown para organizar o conte√∫do
4. Inclua exemplos pr√°ticos quando relevante
5. SEMPRE termine perguntando sobre exerc√≠cios

## üé≠ ANALOGIAS DAS S√âRIES POR T√ìPICO (USE SEMPRE):

### üçï FRIENDS:
- **√Ålgebra**: "Como Monica organizava suas receitas por categorias - na √°lgebra, organizamos vari√°veis e constantes!"
- **Fun√ß√µes**: "Pense nas fun√ß√µes como o relacionamento de Ross e Rachel - para cada 'entrada' h√° uma 'sa√≠da' espec√≠fica!"
- **Geometria**: "Como quando Phoebe tentava ensinar Joey sobre as 'coordenadas' do apartamento!"
- **Probabilidade**: "Lembra quando Chandler calculava as chances? 'Could this BE more matem√°tico?'"

### üß™ THE BIG BANG THEORY:

- **√Ålgebra**: "Como Leonard tentava explicar conceitos para Penny - cada pe√ßa tem seu lugar!"
- **C√°lculo**: "Como Howard calculava trajet√≥rias para a NASA - derivadas emocionais!"
- **Estat√≠stica**: "Raj usaria estat√≠stica para calcular suas chances no amor!"

### üåå STRANGER THINGS:
- **Geometria**: "Como Dustin explicava sobre as dimens√µes no Mundo Invertido!"
- **Trigonometria**: "Como eles usavam coordenadas para navegar em Hawkins!"
- **√Ålgebra**: "Como quando Will precisava resolver os c√≥digos do Mundo Invertido!"

### üè• GREY'S ANATOMY:
- **Fun√ß√µes**: "Como Meredith dizia: 'Voc√™ √© minha pessoa!' - cada entrada tem sua 'pessoa' espec√≠fica!"
- **Estat√≠stica**: "Como analisavam estat√≠sticas de sucesso das cirurgias no Seattle Grace!"
- **Probabilidade**: "Derek sempre calculava os riscos antes de cada cirurgia!"

### ‚ú® WANDAVISION:
- **Geometria**: "Como Wanda criava realidades com geometrias perfeitas em Westview!"
- **Trigonometria**: "Vis√£o calculava √¢ngulos e trajet√≥rias com precis√£o para voar!"


# FORMATO DA RESPOSTA OBRIGAT√ìRIO:
Sua resposta deve seguir EXATAMENTE esta estrutura:

1. üé¨ **Analogia das S√©ries**: Inicie SEMPRE com uma analogia das s√©ries favoritas da Sther
2. üëã **Cumprimento personalizado**: "Ol√° Sther!" 
3. üìö **Explica√ß√£o clara**: Responda a pergunta conectando com a analogia
4. üìù **Exemplo pr√°tico**: Quando aplic√°vel, use exemplos que reforcem a analogia
5. üéØ **Fechamento motivacional**: Conecte de volta com as s√©ries
6. ‚ùì **Pergunta obrigat√≥ria sobre exerc√≠cios**

# INSTRU√á√ÉO OBRIGAT√ìRIA
SEMPRE termine sua resposta com uma dessas frases espec√≠ficas:
- "Que tal praticar com alguns exerc√≠cios do ENEM sobre este t√≥pico, Sther?"
- "Quer que eu traga alguns exerc√≠cios do ENEM para voc√™ praticar, Sther?"
- "Vamos consolidar o aprendizado com exerc√≠cios do ENEM, Sther?"
- "Que tal testar seus conhecimentos com quest√µes do ENEM, Sther?"

# RESTRI√á√ïES
- Mantenha foco no curr√≠culo do ENEM
- Evite informa√ß√µes excessivamente avan√ßadas
- Use linguagem simples mas precisa"""
            
            response = client.chat.completions.create(
                model="llama-3.3-70b-versatile",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_message}
                ],
                temperature=0.1,  # ‚úÖ Temperatura baixa para respostas consistentes
                max_tokens=1500
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            from encoding_utils import safe_str
            error_msg = safe_str(e)
            
            return f"""
‚ùå **Erro na comunica√ß√£o**

Detalhes: {error_msg}

üí° Verifique sua API Key e conex√£o com a internet.
"""

def get_teacher_response(subject: str, user_message: str, api_key: str) -> str:
    """Retorna resposta do professor espec√≠fico"""
    
    # Professor Carlos especializado (RAG Local)
    if subject == "Matem√°tica" and "carlos" in _imported_modules:
        return _imported_modules["carlos"]["response"](user_message, api_key)
    
    # Professora Luciana especializada (RAG Local de Qu√≠mica)
    elif subject == "Qu√≠mica" and "luciana" in _imported_modules:
        return _imported_modules["luciana"]["response"](user_message, api_key)
    
    # Professor Roberto especializado (RAG Local de Biologia)
    elif subject == "Biologia" and "roberto" in _imported_modules:
        return _imported_modules["roberto"]["response"](user_message, api_key)
    
    # Professor Eduardo especializado (RAG Local de Hist√≥ria)
    elif subject == "Hist√≥ria" and "eduardo" in _imported_modules:
        return _imported_modules["eduardo"]["response"](user_message, api_key)
    
    # Professora Marina especializada (RAG Local de Geografia)
    elif subject == "Geografia" and "marina" in _imported_modules:
        return _imported_modules["marina"]["response"](user_message, api_key)
    
    # Professora Let√≠cia (RAG Local de Portugu√™s)
    elif subject == "L√≠ngua Portuguesa" and "leticia" in _imported_modules:
        return _imported_modules["leticia"]["response"](user_message, api_key)
    
    # Professor Fernando especializado (RAG Local de F√≠sica)
    elif subject == "F√≠sica" and "fernando" in _imported_modules:
        return _imported_modules["fernando"]["response"](user_message, api_key)
    
    # Outros professores (Groq gen√©rico)
    else:
        teacher = GroqTeacher(SUBJECTS[subject])
        teacher.subject = subject
        return teacher.get_response(user_message, api_key)

def add_teacher_intro(subject: str):
    """Adiciona mensagem de introdu√ß√£o do professor"""
    
    if not st.session_state.chat_history[subject]:
        intro_message = {
            "role": "assistant",
            "content": SUBJECTS[subject]["intro"],
            "timestamp": datetime.now().strftime("%H:%M")
        }
        st.session_state.chat_history[subject].append(intro_message)

def display_chat_history(subject: str):
    """Exibe hist√≥rico do chat"""
    
    for message in st.session_state.chat_history[subject]:
        with st.container():
            if message["role"] == "user":
                st.markdown(f"""
                <div style="text-align: right; margin: 1rem 0;">
                    <div style="background-color: #09278d; color: white; padding: 1rem; border-radius: 15px; display: inline-block; max-width: 70%;">
                        <strong>Sther:</strong> {message['content']}
                        <br><small>{message['timestamp']}</small>
                    </div>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div style="text-align: left; margin: 1rem 0;">
                    <div class="arithmatex" style="background-color: #f1f5f9; color: #1e293b; padding: 1rem; border-radius: 15px; border-left: 4px solid #09278d; max-width: 80%;">
                        <strong style="color: #1e293b;">{SUBJECTS[subject]['teacher']}:</strong><br><span style="color: #1e293b;">{message['content']}</span>
                        <br><small style="color: #64748b;">{message['timestamp']}</small>
                    </div>
                </div>
                """, unsafe_allow_html=True)

def cleanup_unused_modules(current_subject: str):
    """Remove m√≥dulos n√£o utilizados da mem√≥ria para economizar recursos"""
    subject_module_map = {
        "Matem√°tica": "carlos",
        "Qu√≠mica": "luciana", 
        "Biologia": "roberto",
        "Hist√≥ria": "eduardo",
        "Geografia": "marina",
        "F√≠sica": "fernando",
        "L√≠ngua Portuguesa": "leticia",
        "Reda√ß√£o": "redacao"
    }
    
    current_module = subject_module_map.get(current_subject)
    modules_to_remove = []
    
    for module_key in _imported_modules.keys():
        if module_key != current_module and module_key not in ["mindmap", "exercicios"]:
            modules_to_remove.append(module_key)
    
    for module_key in modules_to_remove:
        del _imported_modules[module_key]
        
    # Reset das vari√°veis globais para m√≥dulos removidos
    global PROFESSOR_CARLOS_LOCAL_AVAILABLE, PROFESSOR_LUCIANA_LOCAL_AVAILABLE
    global PROFESSOR_ROBERTO_LOCAL_AVAILABLE, PROFESSOR_EDUARDO_LOCAL_AVAILABLE  
    global PROFESSOR_MARINA_LOCAL_AVAILABLE, PROFESSOR_FERNANDO_LOCAL_AVAILABLE
    global PORTUGUESE_RAG_AVAILABLE, REDACAO_AVAILABLE
    
    if "carlos" not in _imported_modules:
        PROFESSOR_CARLOS_LOCAL_AVAILABLE = False
    if "luciana" not in _imported_modules:
        PROFESSOR_LUCIANA_LOCAL_AVAILABLE = False
    if "roberto" not in _imported_modules:
        PROFESSOR_ROBERTO_LOCAL_AVAILABLE = False
    if "eduardo" not in _imported_modules:
        PROFESSOR_EDUARDO_LOCAL_AVAILABLE = False
    if "marina" not in _imported_modules:
        PROFESSOR_MARINA_LOCAL_AVAILABLE = False
    if "fernando" not in _imported_modules:
        PROFESSOR_FERNANDO_LOCAL_AVAILABLE = False
    if "leticia" not in _imported_modules:
        PORTUGUESE_RAG_AVAILABLE = False
    if "redacao" not in _imported_modules:
        REDACAO_AVAILABLE = False

def main():
    # Header
    st.markdown("""
    <div style="text-align: center; padding: 2rem 0;">
        <h1 style="color: #09278d; font-size: 3rem; margin-bottom: 0;">üéì ENEM AI Helper</h1>
        <h2 style="color: #1e3a8a; margin-top: 0;">Professores Particulares para Sther</h2>
        <p style="color: #64748b; font-size: 1.2rem;">Sistema inteligente com especialistas em cada mat√©ria do ENEM</p>
    </div>
    """, unsafe_allow_html=True)

    # Sidebar
    with st.sidebar:
        st.markdown("### üéØ Selecione a Mat√©ria")
        
        # Seletor de mat√©ria
        current_subject = st.selectbox(
            "Escolha sua mat√©ria:",
            options=list(SUBJECTS.keys()),
            index=list(SUBJECTS.keys()).index(st.session_state.current_subject),
            format_func=lambda x: f"{SUBJECTS[x]['icon']} {x}"
        )
        
        # Atualiza mat√©ria atual e carrega professor sob demanda
        if current_subject != st.session_state.current_subject:
            st.session_state.current_subject = current_subject
            # Reset das flags ao mudar de mat√©ria
            st.session_state.processing_message = False
            # Limpa m√≥dulos n√£o utilizados para economizar mem√≥ria
            cleanup_unused_modules(current_subject)
            # Carrega professor da mat√©ria selecionada
            lazy_import_professor(current_subject)
            st.rerun()
        else:
            # Carrega professor da mat√©ria atual se ainda n√£o foi carregado
            lazy_import_professor(current_subject)
        
        # Informa√ß√µes do professor atual
        subject_info = SUBJECTS[current_subject]
        st.markdown(f"""
        <div class="teacher-intro">
            <h3>{subject_info['icon']} {subject_info['teacher']}</h3>
            <p>{subject_info['description']}</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Configura√ß√£o da API Key
        if AUTO_API_KEY:
            # API Key configurada automaticamente - n√£o mostra interface
            st.markdown("### ‚úÖ Sistema Configurado")
            st.success("üîê API Key carregada automaticamente")
        else:
            # Mostra interface para configurar API Key manualmente
            st.markdown("### üîë Configura√ß√£o Necess√°ria")
            manual_api_key = st.text_input(
                "API Key Groq:",
                type="password",
                value=st.session_state.api_key if not AUTO_API_KEY else "",
                placeholder="Cole sua API Key aqui",
                help="Obtenha em: https://console.groq.com"
            )
            if manual_api_key:
                st.session_state.api_key = manual_api_key
                st.success("‚úÖ API Key configurada!")
            else:
                st.warning("‚ö†Ô∏è Configure sua API Key para usar os professores")
                if cloud_config and cloud_config.is_cloud:
                    st.info("üí° **Dica:** Configure GROQ_API_KEY nas secrets do Streamlit Cloud")
                else:
                    st.info("üí° **Dica:** Crie um arquivo `.env` com `GROQ_API_KEY=sua_chave` para configura√ß√£o autom√°tica")
        
        # Define a API key final a ser usada
        api_key = AUTO_API_KEY if AUTO_API_KEY else st.session_state.api_key
        
        # Configura√ß√£o espec√≠fica para cada mat√©ria (apenas se carregada)
        if current_subject == "Matem√°tica" and "carlos" in _imported_modules:
            _imported_modules["carlos"]["setup"]()
        elif current_subject == "Qu√≠mica" and "luciana" in _imported_modules:
            _imported_modules["luciana"]["setup"]()
        elif current_subject == "Biologia" and "roberto" in _imported_modules:
            _imported_modules["roberto"]["setup"]()
        elif current_subject == "Hist√≥ria" and "eduardo" in _imported_modules:
            _imported_modules["eduardo"]["setup"]()
        elif current_subject == "Geografia" and "marina" in _imported_modules:
            _imported_modules["marina"]["setup"]()
        elif current_subject == "L√≠ngua Portuguesa" and "leticia" in _imported_modules:
            _imported_modules["leticia"]["setup"]()
        elif current_subject == "F√≠sica" and "fernando" in _imported_modules:
            _imported_modules["fernando"]["setup"]()
        
        # Estat√≠sticas
        st.markdown("### üìä Seu Progresso")
        progress_value = min(len(st.session_state.chat_history[current_subject]) * 10, 100)
        st.progress(progress_value / 100)
        st.caption(f"Mensagens trocadas: {len(st.session_state.chat_history[current_subject])}")
        
        # Limpar chat
        if st.button("üóëÔ∏è Limpar Chat", key="clear_chat"):
            st.session_state.chat_history[current_subject] = []
            st.rerun()

    # --- √Årea Principal com Abas Condicionais ---
    
    # L√≥gica para Reda√ß√£o
    if current_subject == "Reda√ß√£o":
        tab_chat, tab_mindmap, tab_revisao = st.tabs([
            "üí¨ Chat", 
            "üß† Mapa Mental", 
            "üìù Revis√£o de Reda√ß√£o"
        ])
        
        with tab_chat:
            add_teacher_intro(current_subject)
            display_chat_history(current_subject)
        
        with tab_mindmap:
            # L√≥gica do mapa mental
            lazy_import_mindmap()
            if "mindmap" in _imported_modules:
                _imported_modules["mindmap"]()
            else:
                st.error("O sistema de mapa mental n√£o est√° dispon√≠vel.")

        with tab_revisao:
            # L√≥gica da revis√£o de reda√ß√£o
            if "redacao" in _imported_modules:
                _imported_modules["redacao"]["setup"]()
            else:
                st.warning("‚ö†Ô∏è O m√≥dulo de revis√£o de reda√ß√£o n√£o est√° dispon√≠vel.")

    # L√≥gica para todas as outras mat√©rias
    else:
        tab_chat, tab_mindmap, tab_exercicios = st.tabs([
            "üí¨ Chat", 
            "üß† Mapa Mental", 
            "üìö Exerc√≠cios Personalizados"
        ])
        
        with tab_chat:
            add_teacher_intro(current_subject)
            display_chat_history(current_subject)
        
        with tab_mindmap:
            # L√≥gica do mapa mental
            lazy_import_mindmap()
            if "mindmap" in _imported_modules:
                _imported_modules["mindmap"]()
            else:
                st.error("O sistema de mapa mental n√£o est√° dispon√≠vel.")
        
        with tab_exercicios:
            # L√≥gica dos exerc√≠cios personalizados
            lazy_import_exercises()
            if "exercicios" in _imported_modules:
                _imported_modules["exercicios"].setup_ui()
            else:
                st.warning("‚ö†Ô∏è O m√≥dulo de exerc√≠cios personalizados n√£o est√° dispon√≠vel.")
    
    # Input do usu√°rio
    with st.container():
        # Usa form para permitir envio via Enter
        with st.form(key=f"message_form_{current_subject}", clear_on_submit=True):
            user_input = st.text_input(
                "Digite sua pergunta:",
                placeholder=f"Pergunte algo sobre {current_subject} para {SUBJECTS[current_subject]['teacher']}...",
                key=f"user_input_{current_subject}"
            )
            
            col1, col2 = st.columns([8, 2])
            with col1:
                st.empty()  # Espa√ßo
            with col2:
                send_button = st.form_submit_button("üì§ Enviar", use_container_width=True)
    
    # Processa mensagem do usu√°rio quando bot√£o √© clicado OU Enter √© pressionado
    if send_button and user_input and user_input.strip():
        message_to_process = user_input.strip()
        
        # Verifica se n√£o est√° processando e se n√£o √© a mesma mensagem
        if not st.session_state.processing_message:
            # Evita processar a mesma mensagem duas vezes
            last_msg_key = f"last_message_{current_subject}"
            if last_msg_key not in st.session_state:
                st.session_state[last_msg_key] = ""
            
            if message_to_process != st.session_state[last_msg_key]:
                # Marca como processando
                st.session_state.processing_message = True
                st.session_state[last_msg_key] = message_to_process
                
                # Adiciona mensagem do usu√°rio
                user_message = {
                    "role": "user",
                    "content": message_to_process,
                    "timestamp": datetime.now().strftime("%H:%M")
                }
                st.session_state.chat_history[current_subject].append(user_message)
                
                # Gera resposta do professor
                with st.spinner(f"{SUBJECTS[current_subject]['teacher']} est√° pensando..."):
                    assistant_response = get_teacher_response(current_subject, message_to_process, api_key)
                
                # Adiciona resposta do assistente
                assistant_message = {
                    "role": "assistant",
                    "content": assistant_response,
                    "timestamp": datetime.now().strftime("%H:%M")
                }
                st.session_state.chat_history[current_subject].append(assistant_message)
                
                # Marca como n√£o processando mais
                st.session_state.processing_message = False
                
                # Atualiza p√°gina para mostrar nova mensagem
                st.rerun()

    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #64748b; padding: 1rem;">
        <p>üéì <strong>ENEM AI Helper</strong> - Sistema personalizado para a Sther</p>
        <p>Powered by DeepSeek R1 Distill via Groq ‚Ä¢ Carregamento otimizado para economia de mem√≥ria</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main() 