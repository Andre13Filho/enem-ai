import streamlit as st
import time
import re
import os
from typing import Dict, List, Any
from datetime import datetime
from groq import Groq
from local_redacao_rag import setup_redacao_ui, analyze_redacao_pdf
from local_portuguese_rag import local_portuguese_rag, LocalPortugueseRAG
from professor_leticia_local import setup_professor_leticia_local_ui, get_professor_leticia_local_response

# Import for chat message types
try:
    from langchain_core.messages import HumanMessage, AIMessage
except ImportError:
    # Fallback if langchain is not available
    class HumanMessage:
        def __init__(self, content):
            self.content = content
    
    class AIMessage:
        def __init__(self, content):
            self.content = content

# Sistema de configura√ß√£o adaptativo para cloud e local
try:
    from cloud_config import get_config
    cloud_config = get_config()
    print(f"‚úÖ Configura√ß√£o carregada - Ambiente: {'Cloud' if cloud_config.is_cloud else 'Local'}")
except ImportError:
    print("‚ö†Ô∏è cloud_config n√£o encontrado")
    cloud_config = None

# Carrega vari√°veis de ambiente do arquivo .env (apenas local)
if not (cloud_config and cloud_config.is_cloud):
    try:
        from dotenv import load_dotenv
        load_dotenv(encoding='utf-8')
        print("‚úÖ Vari√°veis de ambiente carregadas do arquivo .env")
    except ImportError:
        print("‚ö†Ô∏è python-dotenv n√£o encontrado. Instale com: pip install python-dotenv")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao carregar .env: {e}")

# Configura encoding seguro
try:
    from encoding_utils import setup_encoding
    setup_encoding()
except ImportError:
    pass

# Configura√ß√£o da p√°gina - DEVE SER A PRIMEIRA CHAMADA STREAMLIT
st.set_page_config(
    page_title="ENEM AI Helper - Professores Particulares para Sther",
    page_icon="üéì",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Importa√ß√£o lazy dos sistemas RAG - carrega apenas quando necess√°rio
PROFESSOR_CARLOS_LOCAL_AVAILABLE = False
PROFESSOR_LUCIANA_LOCAL_AVAILABLE = False  
PROFESSOR_ROBERTO_LOCAL_AVAILABLE = False
PROFESSOR_EDUARDO_LOCAL_AVAILABLE = False
PROFESSOR_MARINA_LOCAL_AVAILABLE = False
PROFESSOR_FERNANDO_LOCAL_AVAILABLE = False
PORTUGUESE_RAG_AVAILABLE = False
ENEM_EXERCISES_AVAILABLE = False
EXERCICIOS_PERSONALIZADOS_AVAILABLE = False
REDACAO_AVAILABLE = False

# Cache para m√≥dulos importados
_imported_modules = {}

def lazy_import_professor(subject: str):
    """Importa professor sob demanda para economizar mem√≥ria"""
    global PROFESSOR_CARLOS_LOCAL_AVAILABLE, PROFESSOR_LUCIANA_LOCAL_AVAILABLE
    global PROFESSOR_ROBERTO_LOCAL_AVAILABLE, PROFESSOR_EDUARDO_LOCAL_AVAILABLE
    global PROFESSOR_MARINA_LOCAL_AVAILABLE, PROFESSOR_FERNANDO_LOCAL_AVAILABLE
    global PORTUGUESE_RAG_AVAILABLE, REDACAO_AVAILABLE
    
    if subject == "Matem√°tica" and "carlos" not in _imported_modules:
        try:
            from professor_carlos_local import setup_professor_carlos_local_ui, get_professor_carlos_local_response
            _imported_modules["carlos"] = {
                "setup": setup_professor_carlos_local_ui,
                "response": get_professor_carlos_local_response
            }
            PROFESSOR_CARLOS_LOCAL_AVAILABLE = True
        except ImportError as e:
            pass

    elif subject == "Qu√≠mica" and "luciana" not in _imported_modules:
        try:
            from professor_luciana_local import setup_professor_luciana_local_ui, get_professor_luciana_local_response
            _imported_modules["luciana"] = {
                "setup": setup_professor_luciana_local_ui,
                "response": get_professor_luciana_local_response
            }
            PROFESSOR_LUCIANA_LOCAL_AVAILABLE = True
        except ImportError as e:
            pass

    elif subject == "Biologia" and "roberto" not in _imported_modules:
        try:
            from professor_roberto_local import setup_professor_roberto_local_ui, get_professor_roberto_local_response
            _imported_modules["roberto"] = {
                "setup": setup_professor_roberto_local_ui,
                "response": get_professor_roberto_local_response
            }
            PROFESSOR_ROBERTO_LOCAL_AVAILABLE = True
        except ImportError as e:
            pass

    elif subject == "Hist√≥ria" and "eduardo" not in _imported_modules:
        try:
            from professor_eduardo_local import setup_professor_eduardo_local_ui, get_professor_eduardo_local_response
            _imported_modules["eduardo"] = {
                "setup": setup_professor_eduardo_local_ui,
                "response": get_professor_eduardo_local_response
            }
            PROFESSOR_EDUARDO_LOCAL_AVAILABLE = True
        except ImportError as e:
            pass

    elif subject == "Geografia" and "marina" not in _imported_modules:
        try:
            from professor_marina_local import setup_professor_marina_local_ui, get_professor_marina_local_response
            _imported_modules["marina"] = {
                "setup": setup_professor_marina_local_ui,
                "response": get_professor_marina_local_response
            }
            PROFESSOR_MARINA_LOCAL_AVAILABLE = True
        except ImportError as e:
            pass

    elif subject == "F√≠sica" and "fernando" not in _imported_modules:
        try:
            from professor_fernando_local import setup_professor_fernando_local_ui, get_professor_fernando_local_response
            _imported_modules["fernando"] = {
                "setup": setup_professor_fernando_local_ui,
                "response": get_professor_fernando_local_response
            }
            PROFESSOR_FERNANDO_LOCAL_AVAILABLE = True
        except ImportError as e:
            pass
    
    elif subject == "L√≠ngua Portuguesa" and "leticia" not in _imported_modules:
        try:
            from professor_leticia_local import setup_professor_leticia_local_ui, get_professor_leticia_local_response, PORTUGUESE_RAG_AVAILABLE as PORTUGUESE_AVAILABLE
            _imported_modules["leticia"] = {
                "setup": setup_professor_leticia_local_ui,
                "response": get_professor_leticia_local_response
            }
            PORTUGUESE_RAG_AVAILABLE = PORTUGUESE_AVAILABLE
        except ImportError as e:
            pass
    
    elif subject == "Reda√ß√£o" and "redacao" not in _imported_modules:
        try:
            from local_redacao_rag import setup_redacao_ui, analyze_redacao_pdf
            _imported_modules["redacao"] = {
                "setup": setup_redacao_ui,
                "analyze": analyze_redacao_pdf
            }
            REDACAO_AVAILABLE = True
        except ImportError as e:
            pass

def lazy_import_exercises():
    """Importa sistema de exerc√≠cios sob demanda"""
    global EXERCICIOS_PERSONALIZADOS_AVAILABLE
    
    if "exercicios" not in _imported_modules:
        try:
            from exercicios_personalizados import exercicios_personalizados
            _imported_modules["exercicios"] = exercicios_personalizados
            EXERCICIOS_PERSONALIZADOS_AVAILABLE = True
        except ImportError:
            pass

def lazy_import_mindmap():
    """Importa mapa mental sob demanda"""
    if "mindmap" not in _imported_modules:
        try:
            from mapa_mental_markmap import display_mapa_mental_wrapper
            _imported_modules["mindmap"] = display_mapa_mental_wrapper
        except ImportError:
            pass

# Configura√ß√£o MathJax aprimorada para renderiza√ß√£o de f√≥rmulas matem√°ticas
st.markdown("""
<script type="text/javascript">
  window.MathJax = {
    tex: {
      inlineMath: [['$', '$'], ['\\(', '\\)']],
    displayMath: [['$$', '$$'], ['\\[', '\\]']],
    processEscapes: true,
    processEnvironments: true,
    processRefs: true,
    packages: {'[+]': ['base', 'ams', 'newcommand', 'configmacros', 'action']},
    macros: {
      det: '\\operatorname{det}',
      text: ['\\text{#1}', 1],
      frac: ['\\frac{#1}{#2}', 2],
      sqrt: ['\\sqrt{#1}', 1],
      sum: '\\sum',
      int: '\\int',
      lim: '\\lim',
      sin: '\\sin',
      cos: '\\cos',
      tan: '\\tan',
      log: '\\log',
      ln: '\\ln'
    }
  },
  svg: {
    fontCache: 'global'
    },
    options: {
      ignoreHtmlClass: 'nostem|nolatexmath',
    processHtmlClass: 'stemblock|latexmath|math',
    renderActions: {
      addMenu: [0, '', '']
    }
  },
  startup: {
    ready: function() {
      MathJax.startup.defaultReady();
      console.log('MathJax est√° pronto!');
    }
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js"></script>
""", unsafe_allow_html=True)

# CSS customizado
st.markdown("""
<style>
    .main {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .stApp > header {
        background-color: transparent;
    }
    
    .stApp {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .block-container {
        background-color: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 2rem;
        margin-top: 1rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    .stSelectbox > div > div {
        background-color: #09278d;
        color: white;
        border-radius: 10px;
        border: none;
    }
    
    .stButton > button {
        background: linear-gradient(90deg, #09278d 0%, #1e3a8a 100%);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 0.5rem 2rem;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(9, 39, 141, 0.4);
    }
    
    .chat-message {
        padding: 1rem;
        border-radius: 15px;
        margin: 1rem 0;
        border-left: 4px solid #09278d;
        background-color: #f8fafc;
    }
    
    .teacher-intro {
        background: linear-gradient(90deg, #09278d 0%, #1e3a8a 100%);
        color: white !important;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        text-align: center;
    }
    
    .teacher-intro h3 {
        color: white !important;
    }
    
    .teacher-intro p {
        color: white !important;
    }
    
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #09278d 0%, #1e3a8a 100%);
    }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        text-align: center;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Configura√ß√£o das mat√©rias e professores
SUBJECTS = {
    "Matem√°tica": {
        "teacher": "Prof. Carlos",
        "icon": "üßÆ",
        "avatar": "üßë‚Äçüè´",
        "description": "Especialista em matem√°tica do ENEM com sistema RAG local e formata√ß√£o matem√°tica aprimorada",
        "intro": "Ol√°, Futura Senhora Sther Souza! Sou o Professor Carlos, seu professor particular de Matem√°tica! Agora tenho formata√ß√£o matem√°tica melhorada com LaTeX, respostas mais claras e sem duplica√ß√µes. Vamos dominar a matem√°tica do ENEM juntos! üöÄ"
    },
    "Portugu√™s": {
        "teacher": "Profa. Ana",
        "icon": "üìö",
        "avatar": "üë©‚Äçüè´",
        "description": "Literatura, gram√°tica e interpreta√ß√£o de texto",
        "intro": "Ol√°, Futura Dra. Sther! Sou a Professora Ana, especialista em Portugu√™s para o ENEM. Vou te ajudar com gram√°tica, literatura e reda√ß√£o!"
    },
    "Biologia": {
        "teacher": "Prof. Roberto",
        "icon": "üß¨",
        "avatar": "üßë‚Äçüî¨",
        "description": "Especialista em biologia do ENEM com sistema RAG local e analogias das suas s√©ries favoritas",
        "intro": "E a√≠, Futura Psic√≥loga Sther! Sou o Professor Roberto de Biologia! Tenho acesso direto aos seus materiais de biologia e vou usar analogias das suas s√©ries favoritas para te ensinar. Vamos desvendar os mist√©rios da vida juntos! üß¨üî¨"
    },
    "Geografia": {
        "teacher": "Profa. Marina",
        "icon": "üåç",
        "avatar": "üë©‚Äçüè´",
        "description": "Geografia f√≠sica, humana e geopol√≠tica",
        "intro": "Fala, Futura Psic√≥loga Sther Souza! Sou a Professora Marina de Geografia. Vamos explorar o mundo e suas transforma√ß√µes!"
    },
    "Hist√≥ria": {
        "teacher": "Prof. Eduardo",
        "icon": "üèõÔ∏è",
        "avatar": "üßë‚Äçüè´",
        "description": "Especialista em hist√≥ria do ENEM com sistema RAG local e analogias das suas s√©ries favoritas",
        "intro": "Eai, Sther! Sou o Professor Eduardo de Hist√≥ria! Tenho acesso direto aos seus materiais de hist√≥ria e vou usar analogias das suas s√©ries favoritas para te ensinar. Vamos viajar no tempo e entender nosso passado juntos! üèõÔ∏èüìö"
    },
    "Qu√≠mica": {
        "teacher": "Profa. Luciana",
        "icon": "‚öóÔ∏è",
        "avatar": "üë©‚Äçüî¨",
        "description": "Qu√≠mica org√¢nica, inorg√¢nica e f√≠sico-qu√≠mica",
        "intro": "Oi, Lind√≠ssima Sther! Sou a Professora Luciana de Qu√≠mica. Vamos misturar conhecimento e descobrir rea√ß√µes incr√≠veis!"
    },
    "F√≠sica": {
        "teacher": "Prof. Fernando",
        "icon": "üß™",
        "avatar": "üßë‚Äçüî¨",
        "description": "Especialista em f√≠sica do ENEM com sistema RAG local e analogias das suas s√©ries favoritas",
        "intro": "E a√≠, Minha futura psic√≥loga Sther! Sou o Professor Fernando de F√≠sica! Tenho acesso direto aos seus materiais de f√≠sica e vou usar analogias das suas s√©ries favoritas para te ensinar. Vamos desvendar os mist√©rios do universo juntos! üß™‚ö°"
    },
    "Reda√ß√£o": {
        "teacher": "Profa. Carla",
        "icon": "‚úçÔ∏è",
        "avatar": "üë©‚Äçüè´",
        "description": "T√©cnicas de reda√ß√£o e disserta√ß√£o argumentativa",
        "intro": "Ol√°, Sther (futura) Souza! Sou a Professora Carla de Reda√ß√£o. Vamos transformar suas ideias em textos nota 1000!"
    },
    "L√≠ngua Portuguesa": {
        "teacher": "Professora Let√≠cia",
        "icon": "üë©‚Äçüè´",
        "avatar": "üë©‚Äçüè´",
        "description": "Gram√°tica, literatura e interpreta√ß√£o de texto",
        "intro": "Oi, Princesa Sther! Sou a Professora Let√≠cia. Vamos desvendar os segredos da l√≠ngua portuguesa e da literatura!"
    },
    "Boas-vindas": {
        "teacher": "Assistente IA",
        "icon": "üëã",
        "avatar": "ü§ñ",
        "description": "Sua assistente para o ENEM",
        "intro": "Ol√°, Sther! Bem-vinda ao ENEM AI Helper. Escolha uma mat√©ria na barra lateral para come√ßar a estudar!"
    }
}

def handle_api_error(error_message: str):
    """Detecta erros de API key sem usar cache"""
    error_str = str(error_message).lower()
    
    # Detecta se √© um erro de API key inv√°lida
    if any(term in error_str for term in ['invalid api key', 'error code: 401', 'unauthorized', 'invalid_api_key']):
        st.warning("üîß **API Key invalidada detectada**")
        st.info("üîÑ **Por favor, gere uma nova API key no Groq Console e atualize as configura√ß√µes.**")
        return True
    
    return False

def get_api_key():
    """Carrega a chave da API do Streamlit secrets ou vari√°veis de ambiente - VERS√ÉO LIMPA SEM CACHE"""
    
    # Primeiro tenta Streamlit Secrets (para Cloud)
    try:
        if hasattr(st, 'secrets') and "GROQ_API_KEY" in st.secrets:
            api_key = st.secrets["GROQ_API_KEY"]
            if api_key and isinstance(api_key, str) and api_key.strip() and len(api_key.strip()) > 10:
                return api_key.strip()
    except:
        pass
    
    # Fallback para vari√°veis de ambiente (para local)
    try:
        api_key = os.environ.get("GROQ_API_KEY")
        if api_key and isinstance(api_key, str) and api_key.strip() and len(api_key.strip()) > 10:
            return api_key.strip()
    except:
        pass
    
    return None

# Inicializa√ß√£o do session state
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = {subject: [] for subject in SUBJECTS.keys()}
if 'current_subject' not in st.session_state:
    st.session_state.current_subject = "Boas-vindas"
if 'processing_message' not in st.session_state:
    st.session_state.processing_message = False
if 'generated_exercises' not in st.session_state:
    st.session_state.generated_exercises = {subject: [] for subject in SUBJECTS.keys()}
if 'last_user_question' not in st.session_state:
    st.session_state.last_user_question = {subject: "" for subject in SUBJECTS.keys()}

# Adiciona diagn√≥stico de API key se necess√°rio
if 'show_api_diagnostic' not in st.session_state:
    st.session_state.show_api_diagnostic = False

# Inicializa vari√°veis de controle para Enter
for subject in SUBJECTS.keys():
    if f'send_message_{subject}' not in st.session_state:
        st.session_state[f'send_message_{subject}'] = False
    if f'last_message_{subject}' not in st.session_state:
        st.session_state[f'last_message_{subject}'] = ""

class GroqTeacher:
    """Professor gen√©rico usando DeepSeek R1 Distill via Groq"""
    
    def __init__(self, subject_info: Dict):
        self.subject_info = subject_info
        self.name = subject_info["teacher"]
        self.subject = None  # Will be set when used
    
    def get_response(self, user_message: str, api_key: str) -> str:
        """Gera resposta usando DeepSeek R1 Distill via Groq"""
        
        # Valida√ß√£o robusta da API key
        if not api_key or not isinstance(api_key, str) or not api_key.strip():
            return f"""
üîë **Configure sua API Key da Groq**

Para ativar {self.name}, voc√™ precisa:
1. Obter uma API Key da Groq (https://console.groq.com)
2. Inserir a chave na barra lateral
3. Come√ßar a conversar!

üí° {self.name} est√° pronto para te ajudar com {self.subject}!
"""
        
        # Limpa a API key para garantir que n√£o h√° espa√ßos ou caracteres extras
        clean_api_key = api_key.strip()
        
        try:
            # Cria uma nova inst√¢ncia do cliente a cada chamada para evitar cache corrompido
            client = Groq(api_key=clean_api_key)
            
            # Prompt estruturado e profissional para cada professor
            system_prompt = f"""# IDENTIDADE DO PROFESSOR
Voc√™ √© {self.name}, professor(a) especialista em {self.subject} para o ENEM.
Voc√™ √© professor particular exclusivo da Sther Souza, uma estudante de 17 anos.

# DIRETRIZES DE COMPORTAMENTO
## Personalidade:
- Did√°tico, paciente e bem-humorado
- Linguagem adequada para jovens de 17 anos
- Seja um professor que gosta de ensinar
- Seja carinhoso, mas profissional
- Seja engra√ßado, mas profissional
- D√™ uma aula para uma jovem de 17 anos que tem dificuldades em sua mat√©ria

## Metodologia de Ensino:
- Use analogias e exemplos pr√°ticos
- Relacione com situa√ß√µes do cotidiano brasileiro
- Foque nos t√≥picos que caem no ENEM
- Responda sempre em portugu√™s brasileiro

## Estrutura da Resposta:
1. üé¨ **SEMPRE inicie com uma analogia das s√©ries favoritas da Sther** (FRIENDS, The Big Bang Theory, Stranger Things, Grey's Anatomy, WandaVision)
2. Responda a pergunta de forma clara e completa
3. Use formata√ß√£o em markdown para organizar o conte√∫do
4. Inclua exemplos pr√°ticos quando relevante
5. SEMPRE termine perguntando sobre exerc√≠cios
6. Use sintaxe laTex para f√≥rumlas matem√°ticas, ou seja, use $...$ para f√≥rmulas inline e $$...$$ para f√≥rmulas em bloco com destaque

## üìê FORMATA√á√ÉO DE F√ìRMULAS (SE APLIC√ÅVEL):
- Se precisar escrever uma f√≥rmula matem√°tica, use os delimitadores do LaTeX.
- **F√≥rmula inline**: $ f(x) = ax^2 + bx + c $
- **F√≥rmula em destaque**: $$ x = \\frac{{-b \\pm \\sqrt{{b^2-4ac}}}}{{2a}} $$
- NUNCA use colchetes `[ ]` para f√≥rmulas.

## üé≠ ANALOGIAS DAS S√âRIES POR T√ìPICO (USE SEMPRE):

### üçï FRIENDS:
- **√Ålgebra**: "Como Monica organizava suas receitas por categorias - na √°lgebra, organizamos vari√°veis e constantes!"
- **Fun√ß√µes**: "Pense nas fun√ß√µes como o relacionamento de Ross e Rachel - para cada 'entrada' h√° uma 'sa√≠da' espec√≠fica!"
- **Geometria**: "Como quando Phoebe tentava ensinar Joey sobre as 'coordenadas' do apartamento!"
- **Probabilidade**: "Lembra quando Chandler calculava as chances? 'Could this BE more matem√°tico?'"

### üß™ THE BIG BANG THEORY:

- **√Ålgebra**: "Como Leonard tentava explicar conceitos para Penny - cada pe√ßa tem seu lugar!"
- **C√°lculo**: "Como Howard calculava trajet√≥rias para a NASA - derivadas emocionais!"
- **Estat√≠stica**: "Raj usaria estat√≠stica para calcular suas chances no amor!"

### üåå STRANGER THINGS:
- **Geometria**: "Como Dustin explicava sobre as dimens√µes no Mundo Invertido!"
- **Trigonometria**: "Como eles usavam coordenadas para navegar em Hawkins!"
- **√Ålgebra**: "Como quando Will precisava resolver os c√≥digos do Mundo Invertido!"

### üè• GREY'S ANATOMY:
- **Fun√ß√µes**: "Como Meredith dizia: 'Voc√™ √© minha pessoa!' - cada entrada tem sua 'pessoa' espec√≠fica!"
- **Estat√≠stica**: "Como analisavam estat√≠sticas de sucesso das cirurgias no Seattle Grace!"
- **Probabilidade**: "Derek sempre calculava os riscos antes de cada cirurgia!"

### ‚ú® WANDAVISION:
- **Geometria**: "Como Wanda criava realidades com geometrias perfeitas em Westview!"
- **Trigonometria**: "Vis√£o calculava √¢ngulos e trajet√≥rias com precis√£o para voar!"


# FORMATO DA RESPOSTA OBRIGAT√ìRIO:
Sua resposta deve seguir EXATAMENTE esta estrutura:

1. üëã "Ol√° Sther! Como vai sua caminhada at√© a psicologia? Espero te ajudar nessa jornada t√£o especial e importante hoje!" 
2. üé¨ Inicie SEMPRE com uma analogia das s√©ries favoritas da Sther
3. üìö Responda a pergunta conectando com a analogia. Explique t√≥pico por t√≥pico, deixando uma explica√ß√£o clara e o mais completa que pude. (lembre-se SEMPRE das suas diretrizes de comportamento e de usar a sintaxe laTex para f√≥rmulas matem√°ticas)
4. üìù Quando aplic√°vel, use exemplos que reforcem a analogia
5. üéØ Conecte de volta com as s√©ries
6. ‚ùì Pergunta obrigat√≥ria sobre exerc√≠cios

# INSTRU√á√ÉO OBRIGAT√ìRIA
SEMPRE termine sua resposta com uma dessas frases espec√≠ficas:
- "Que tal praticar com alguns exerc√≠cios do ENEM sobre este t√≥pico, Sther?"
- "Quer que eu traga alguns exerc√≠cios do ENEM para voc√™ praticar, Sther?"
- "Vamos consolidar o aprendizado com exerc√≠cios do ENEM, Sther?"
- "Que tal testar seus conhecimentos com quest√µes do ENEM, Sther?"

# RESTRI√á√ïES
- Mantenha foco no curr√≠culo do ENEM
- Evite informa√ß√µes excessivamente avan√ßadas
- Use linguagem simples mas precisa"""
            
            response = client.chat.completions.create(
                model="llama-3.3-70b-versatile",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_message}
                ],
                temperature=0.1,
                max_tokens=1500
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            # Log do erro sem expor a API key
            error_msg = str(e)
            
            return f"""
‚ùå **Erro na comunica√ß√£o**

Detalhes: {error_msg}

üí° Verifique sua API Key e conex√£o com a internet.
"""

def get_teacher_response(subject: str, user_message: str, api_key: str) -> str:
    """Retorna resposta do professor espec√≠fico com melhor tratamento de erro"""
    
    # Valida√ß√£o inicial da API key
    if not api_key or not isinstance(api_key, str) or not api_key.strip():
        return """
‚ùå **API Key inv√°lida ou n√£o fornecida**

Por favor, configure sua API Key corretamente nas configura√ß√µes do Streamlit Cloud.
"""
    
    try:
        # Professor Carlos especializado (RAG Local)
        if subject == "Matem√°tica" and "carlos" in _imported_modules:
            return _imported_modules["carlos"]["response"](user_message, api_key)
        
        # Professora Luciana especializada (RAG Local de Qu√≠mica)
        elif subject == "Qu√≠mica" and "luciana" in _imported_modules:
            return _imported_modules["luciana"]["response"](user_message, api_key)
        
        # Professor Roberto especializado (RAG Local de Biologia)
        elif subject == "Biologia" and "roberto" in _imported_modules:
            return _imported_modules["roberto"]["response"](user_message, api_key)
        
        # Professor Eduardo especializado (RAG Local de Hist√≥ria)
        elif subject == "Hist√≥ria" and "eduardo" in _imported_modules:
            return _imported_modules["eduardo"]["response"](user_message, api_key)
        
        # Professora Marina especializada (RAG Local de Geografia)
        elif subject == "Geografia" and "marina" in _imported_modules:
            return _imported_modules["marina"]["response"](user_message, api_key)
        
        # Professora Let√≠cia (RAG Local de Portugu√™s)
        elif subject == "L√≠ngua Portuguesa" and "leticia" in _imported_modules:
            return _imported_modules["leticia"]["response"](user_message, api_key)
        
        # Professor Fernando especializado (RAG Local de F√≠sica)
        elif subject == "F√≠sica" and "fernando" in _imported_modules:
            return _imported_modules["fernando"]["response"](user_message, api_key)
        
        # Outros professores (Groq gen√©rico)
        else:
            teacher = GroqTeacher(SUBJECTS[subject])
            teacher.subject = subject
            return teacher.get_response(user_message, api_key)
            
    except Exception as e:
        # Resposta de fallback em caso de erro
        error_response = f"""
‚ùå **Erro no Sistema do Professor**

Ocorreu um erro ao processar sua mensagem:
```
{str(e)}
```

üí° **Tente:**
1. Reformular sua pergunta
2. Verificar se a mat√©ria est√° funcionando
3. Tentar uma pergunta mais simples

üîÑ **Modo de emerg√™ncia**: Vou tentar responder de forma b√°sica...

---

Ol√°, Sther! Desculpe, tive um problema t√©cnico, mas estou aqui para te ajudar com {subject}. 

Pode reformular sua pergunta? Vou fazer o meu melhor para responder sobre o t√≥pico que voc√™ perguntou: "{user_message}"

üí™ N√£o desista! Estamos aqui para te ajudar a conquistar o ENEM!
"""
        return error_response

def add_teacher_intro(subject: str):
    """Adiciona mensagem de introdu√ß√£o do professor"""
    
    if not st.session_state.chat_history[subject]:
        intro_message = {
            "role": "assistant",
            "content": SUBJECTS[subject]["intro"],
            "timestamp": datetime.now().strftime("%H:%M")
        }
        st.session_state.chat_history[subject].append(intro_message)

def display_chat_history(subject: str):
    """Exibe hist√≥rico do chat"""
    
    for message in st.session_state.chat_history[subject]:
        with st.container():
            if message["role"] == "user":
                st.markdown(f"""
                <div style="text-align: right; margin: 1rem 0;">
                    <div style="background-color: #09278d; color: white; padding: 1rem; border-radius: 15px; display: inline-block; max-width: 70%;">
                        <strong>Sther:</strong> {message['content']}
                        <br><small>{message['timestamp']}</small>
                    </div>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div style="text-align: left; margin: 1rem 0;">
                    <div class="arithmatex" style="background-color: #f1f5f9; color: #1e293b; padding: 1rem; border-radius: 15px; border-left: 4px solid #09278d; max-width: 80%;">
                        <strong style="color: #1e293b;">{SUBJECTS[subject]['teacher']}:</strong><br><span style="color: #1e293b;">{message['content']}</span>
                        <br><small style="color: #64748b;">{message['timestamp']}</small>
                    </div>
                </div>
                """, unsafe_allow_html=True)

def cleanup_unused_modules(current_subject: str):
    """Remove m√≥dulos n√£o utilizados da mem√≥ria para economizar recursos"""
    subject_module_map = {
        "Matem√°tica": "carlos",
        "Qu√≠mica": "luciana", 
        "Biologia": "roberto",
        "Hist√≥ria": "eduardo",
        "Geografia": "marina",
        "F√≠sica": "fernando",
        "L√≠ngua Portuguesa": "leticia",
        "Reda√ß√£o": "redacao"
    }
    
    # N√£o remover o m√≥dulo do mapa mental ou dos exerc√≠cios
    modules_to_keep = ["mindmap", "exercicios"]
    if current_subject in subject_module_map:
        modules_to_keep.append(subject_module_map[current_subject])
        
    for module_key in list(_imported_modules.keys()):
        if module_key not in modules_to_keep:
            del _imported_modules[module_key]
            # gc.collect() # Opcional: for√ßar coleta de lixo

def render_math_content(content: str) -> None:
    """
    Renderiza conte√∫do com f√≥rmulas matem√°ticas usando MathJax.
    O processamento agora √© feito diretamente pelo LLM, que foi instru√≠do
    a gerar LaTeX corretamente.
    """
    # A fun√ß√£o de processamento `process_mathematical_formulas_new` foi removida 
    # pois estava causando erros de formata√ß√£o.
    
    # Usa st.markdown com unsafe_allow_html=True para permitir MathJax
    st.markdown(content, unsafe_allow_html=True)
    
    # For√ßa re-renderiza√ß√£o do MathJax
    st.markdown("""
    <script>
    if (window.MathJax) {
        MathJax.typesetPromise();
    }
    </script>
    """, unsafe_allow_html=True)

def main():
    # Header
    st.markdown("""
    <div style="text-align: center; padding: 2rem 0;">
        <h1 style="color: #09278d; font-size: 3rem; margin-bottom: 0;">üéì ENEM AI Helper</h1>
        <h2 style="color: #1e3a8a; margin-top: 0;">Professores Particulares para Sther</h2>
        <p style="color: #64748b; font-size: 1.2rem;">Sistema inteligente com especialistas em cada mat√©ria do ENEM</p>
    </div>
    """, unsafe_allow_html=True)

    # Valida√ß√£o da API Key
    api_key = get_api_key()

    if not api_key:
        st.warning("üîë **API Key n√£o configurada!**")
        st.info("""
            Para usar o ENEM AI Helper, voc√™ precisa configurar sua API Key da Groq.
            
            **Se voc√™ estiver executando no Streamlit Cloud:**
            1. Crie um arquivo `secrets.toml` na pasta `.streamlit`.
            2. Adicione sua chave da seguinte forma:
               ```toml
               GROQ_API_KEY = "sua_chave_aqui"
               ```
            
            **Se voc√™ estiver executando localmente:**
            1. Crie um arquivo chamado `.env` na pasta principal do projeto.
            2. Adicione sua chave da seguinte forma:
               ```
               GROQ_API_KEY="sua_chave_aqui"
               ```

            Ap√≥s configurar a chave, reinicie a aplica√ß√£o.
        """)
        st.stop()

    # Inicializa estado da sess√£o
    if "current_subject" not in st.session_state:
        st.session_state.current_subject = "Boas-vindas"
    
    # Adiciona a chave de Boas-vindas se n√£o existir
    if "Boas-vindas" not in SUBJECTS:
        SUBJECTS["Boas-vindas"] = {
            "teacher": "Assistente IA", "icon": "üëã", "avatar": "ü§ñ", 
            "description": "Sua assistente para o ENEM", 
            "intro": "Ol√°, Sther! Bem-vinda ao ENEM AI Helper. Escolha uma mat√©ria para come√ßar."
        }
        
    # Inicializa o hist√≥rico de chat para todas as mat√©rias, incluindo Boas-vindas
    for subject in SUBJECTS.keys():
        if f"chat_history_{subject}" not in st.session_state:
            st.session_state[f"chat_history_{subject}"] = []

    # Sidebar
    with st.sidebar:
        st.markdown("### üéØ Selecione a Mat√©ria")
        
        # Seletor de mat√©ria
        current_subject = st.selectbox(
            "Escolha sua mat√©ria:",
            options=list(SUBJECTS.keys()),
            index=list(SUBJECTS.keys()).index(st.session_state.current_subject),
            format_func=lambda x: f"{SUBJECTS[x]['icon']} {x}"
        )
        
        if current_subject != st.session_state.current_subject:
            st.session_state.current_subject = current_subject
            cleanup_unused_modules(current_subject)
            lazy_import_professor(current_subject)
            st.rerun()
        else:
            lazy_import_professor(current_subject)
        
        # Garante que subject_info sempre tenha um valor padr√£o
        subject_info = SUBJECTS.get(current_subject, SUBJECTS["Boas-vindas"])
        
        st.markdown(f"""
        <div class="teacher-intro">
            <h3>{subject_info['icon']} {subject_info['teacher']}</h3>
            <p>{subject_info['description']}</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Painel de Status da Base de Conhecimento (apenas para Matem√°tica)
        if current_subject == "Matem√°tica" and "carlos" in _imported_modules:
            with st.expander("üîé Status da Base de Conhecimento", expanded=True):
                try:
                    # Importa o singleton diretamente para pegar os stats
                    from local_math_rag import local_math_rag
                    stats = local_math_rag.get_stats()
                    
                    status_icon = "‚úÖ" if stats.get("status") == "Carregado" else "‚ùå"
                    st.markdown(f"**Status:** {status_icon} {stats.get('status', 'N/A')}")
                    st.markdown(f"**Documentos Indexados:** {stats.get('total_documents', 'N/A')}")

                    sample_docs = stats.get("sample_documents", [])
                    if sample_docs:
                        st.markdown("**Amostra de Documentos na Base:**")
                        for doc_name in sample_docs:
                            st.markdown(f"- `{doc_name}`")
                except Exception as e:
                    st.error(f"Erro ao obter status: {e}")

        if st.button("üóëÔ∏è Limpar Hist√≥rico da Mat√©ria"):
            st.session_state[f"chat_history_{current_subject}"] = []
            st.rerun()

        # Status da API Key
        st.markdown("---")
        st.markdown("### üîß Status da API Key")
        
        # Mostra status da API key
        current_api_key = get_api_key()
        if current_api_key:
            api_preview = f"{current_api_key[:8]}...{current_api_key[-4:]}" if len(current_api_key) > 12 else "***"
            st.success(f"‚úÖ API Key carregada: `{api_preview}`")
        else:
            st.error("‚ùå API Key n√£o encontrada")
            st.info("Configure sua API Key no Streamlit Cloud ou arquivo .env")

    # √Årea Principal com Abas
    tab1, tab2, tab3 = st.tabs(["üí¨ Chat", "üß† Mapa Mental", "üìö Exerc√≠cios Personalizados"])
    
    with tab1:
        # √Årea de Chat Principal
        st.header(f"Conversando com {subject_info.get('teacher', 'Assistente')}")

        # Adiciona introdu√ß√£o do professor se o chat estiver vazio
        if not st.session_state[f"chat_history_{current_subject}"]:
            st.session_state[f"chat_history_{current_subject}"].append(
                AIMessage(content=subject_info["intro"])
            )

        # Exibe o hist√≥rico de chat
        for message in st.session_state[f"chat_history_{current_subject}"]:
            avatar = subject_info.get('avatar', 'ü§ñ') if isinstance(message, AIMessage) else "üßë‚Äçüéì"
            with st.chat_message(name="assistant" if isinstance(message, AIMessage) else "user", avatar=avatar):
                # Para mat√©rias que podem conter f√≥rmulas matem√°ticas, usa renderiza√ß√£o especial
                if current_subject in ["Matem√°tica", "F√≠sica", "Qu√≠mica"] and isinstance(message, AIMessage):
                    render_math_content(message.content)
                else:
                    st.markdown(message.content)
        
        # Input do usu√°rio
        if prompt := st.chat_input(f"Envie uma mensagem para {subject_info.get('teacher', 'Assistente')}..."):
            # Salva a √∫ltima pergunta para os exerc√≠cios personalizados
            st.session_state.last_user_question = {
                'content': prompt,
                'subject': current_subject
            }
            
            st.session_state[f"chat_history_{current_subject}"].append(HumanMessage(content=prompt))
            
            with st.chat_message("user", avatar="üßë‚Äçüéì"):
                st.markdown(prompt)
                
            with st.chat_message("assistant", avatar=subject_info.get("avatar", "ü§ñ")):
                message_placeholder = st.empty()
                
                # Obt√©m a resposta do professor adequado
                try:
                    full_response = get_teacher_response(current_subject, prompt, api_key)
                    
                    # Verifica se h√° erro de API key e tenta resolver
                    if handle_api_error(full_response):
                        # Tenta novamente com uma nova API key
                        new_api_key = get_api_key()
                        if new_api_key and new_api_key != api_key:
                            st.info("üîÑ Tentando novamente com API key atualizada...")
                            full_response = get_teacher_response(current_subject, prompt, new_api_key)
                except Exception as e:
                    from encoding_utils import safe_api_error
                    full_response = safe_api_error(e)
                    handle_api_error(full_response)  # Tenta resolver automaticamente
                
                # Simula efeito de digita√ß√£o e renderiza com f√≥rmulas matem√°ticas
                if current_subject in ["Matem√°tica", "F√≠sica", "Qu√≠mica"]:
                    # Para mat√©rias com f√≥rmulas, usa renderiza√ß√£o especial
                    with message_placeholder.container():
                        render_math_content(full_response + "‚ñå")
                    time.sleep(0.01)
                    message_placeholder.empty()
                    with message_placeholder.container():
                        render_math_content(full_response)
                else:
                    # Para outras mat√©rias, usa markdown padr√£o
                    message_placeholder.markdown(full_response + "‚ñå")
                    time.sleep(0.01)
                    message_placeholder.markdown(full_response)

                st.session_state[f"chat_history_{current_subject}"].append(AIMessage(content=full_response))
                st.rerun()
    
    with tab2:
        # Mapa Mental
        try:
            lazy_import_mindmap()
            if "mindmap" in _imported_modules:
                _imported_modules["mindmap"]()
            else:
                st.error("‚ùå Sistema de Mapa Mental n√£o dispon√≠vel")
                st.info("Verifique se o arquivo `mapa_mental_markmap.py` est√° presente e as depend√™ncias est√£o instaladas.")
        except Exception as e:
            st.error(f"‚ùå Erro ao carregar Mapa Mental: {e}")
            st.info("""
            **Para ativar o Mapa Mental:**
            1. Instale: `pip install streamlit-markmap==1.0.1`
            2. Verifique se o arquivo `mapa_mental_markmap.py` est√° presente
            """)
    
    with tab3:
        # Exerc√≠cios Personalizados
        try:
            lazy_import_exercises()
            if "exercicios" in _imported_modules:
                _imported_modules["exercicios"].setup_ui()
            else:
                st.error("‚ùå Sistema de Exerc√≠cios Personalizados n√£o dispon√≠vel")
                st.info("Verifique se o arquivo `exercicios_personalizados.py` est√° presente e os arquivos JSON de quest√µes est√£o dispon√≠veis.")
        except Exception as e:
            st.error(f"‚ùå Erro ao carregar Exerc√≠cios Personalizados: {e}")
            st.info("""
            **Para ativar os Exerc√≠cios Personalizados:**
            1. Verifique se o arquivo `exercicios_personalizados.py` est√° presente
            2. Certifique-se de que os arquivos `questions_primeiro_dia.json` e `questions_segundo_enem.json` existem
            """)

if __name__ == "__main__":
    main() 