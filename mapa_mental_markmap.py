#!/usr/bin/env python3
"""
Sistema de Mapa Mental com Streamlit-Markmap
Gera mapas mentais interativos baseados nas d√∫vidas da Sther
"""

import streamlit as st
import re
import os
from typing import Dict, List, Any, Optional
from groq import Groq
import time

try:
    from streamlit_markmap import markmap
    MARKMAP_AVAILABLE = True
except ImportError:
    MARKMAP_AVAILABLE = False
    st.error("‚ùå streamlit-markmap n√£o instalado. Execute: pip install streamlit-markmap==1.0.1")

def get_example_question(subject: str) -> str:
    """Retorna pergunta de exemplo para cada mat√©ria"""
    examples = {
        'Matem√°tica': 'Como resolver uma equa√ß√£o do segundo grau?',
        'F√≠sica': 'Como calcular a velocidade de um objeto?',
        'Qu√≠mica': 'Como funciona uma rea√ß√£o de combust√£o?',
        'Biologia': 'Como ocorre a fotoss√≠ntese?',
        'Geografia': 'Como se formam as chuvas?',
        'Hist√≥ria': 'Quais foram as causas da Revolu√ß√£o Francesa?',
        'L√≠ngua Portuguesa': 'Quais s√£o as figuras de linguagem?',
        'Reda√ß√£o': 'Como estruturar uma disserta√ß√£o argumentativa?'
    }
    return examples.get(subject, 'Fa√ßa uma pergunta sobre sua d√∫vida!')

def get_formula_example(subject: str) -> str:
    """Retorna exemplo de f√≥rmula b√°sica explicativa para cada mat√©ria"""
    examples = {
        'Matem√°tica': '- Fun√ß√£o linear: $f(x) = ax + b$ (onde "a" √© coeficiente angular)',
        'F√≠sica': '- Velocidade m√©dia: $v = \\frac{\\Delta s}{\\Delta t}$ (dist√¢ncia/tempo)',
        'Qu√≠mica': '- Concentra√ß√£o molar: $C = \\frac{n}{V}$ (mol/litro)',
        'Biologia': '- Respira√ß√£o: $C_6H_{12}O_6 + 6O_2 \\rightarrow 6CO_2 + 6H_2O + ATP$',
        'Geografia': '- Densidade demogr√°fica = Popula√ß√£o total / √Årea territorial',
        'Hist√≥ria': '- Periodiza√ß√£o: Antecedentes ‚Üí Evento ‚Üí Consequ√™ncias',
        'L√≠ngua Portuguesa': '- Estrutura frasal: Sujeito + Predicado + Complementos',
        'Reda√ß√£o': '- Estrutura: Introdu√ß√£o (tese) + Desenvolvimento + Conclus√£o'
    }
    return examples.get(subject, '- Princ√≠pio fundamental da √°rea')

def get_advanced_formula_example(subject: str) -> str:
    """Retorna exemplo de f√≥rmula avan√ßada explicativa para cada mat√©ria"""
    examples = {
        'Matem√°tica': '- F√≥rmula de Bhaskara: $x = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$ (resolve equa√ß√µes 2¬∫ grau)',
        'F√≠sica': '- Segunda Lei de Newton: $F = ma$ (for√ßa = massa √ó acelera√ß√£o)',
        'Qu√≠mica': '- Potencial hidrogeni√¥nico: $pH = -\\log[H^+]$ (mede acidez)',
        'Biologia': '- Fotoss√≠ntese: $6CO_2 + 6H_2O \\xrightarrow{luz} C_6H_{12}O_6 + 6O_2$ (produz glicose)',
        'Geografia': '- Taxa de crescimento populacional: $TC = \\frac{P_f - P_i}{P_i} \\times 100$',
        'Hist√≥ria': '- An√°lise multicausal: Fatores econ√¥micos + sociais + pol√≠ticos',
        'L√≠ngua Portuguesa': '- An√°lise sint√°tica: Per√≠odos compostos por coordena√ß√£o/subordina√ß√£o',
        'Reda√ß√£o': '- Estrat√©gias argumentativas: Dados + exemplos + autoridade'
    }
    return examples.get(subject, '- Aplica√ß√£o avan√ßada do conceito')

def get_subject_system_prompt(subject: str) -> str:
    """Retorna prompt de sistema espec√≠fico para cada mat√©ria"""
    prompts = {
        'Matem√°tica': "Voc√™ √© um especialista em educa√ß√£o matem√°tica e mapas mentais.",
        'F√≠sica': "Voc√™ √© um especialista em educa√ß√£o de f√≠sica e mapas mentais, com foco em ENEM.",
        'Qu√≠mica': "Voc√™ √© um especialista em educa√ß√£o de qu√≠mica e mapas mentais, com foco em ENEM.",
        'Biologia': "Voc√™ √© um especialista em educa√ß√£o de biologia e mapas mentais, com foco em ENEM.",
        'Geografia': "Voc√™ √© um especialista em educa√ß√£o de geografia e mapas mentais, com foco em ENEM.",
        'Hist√≥ria': "Voc√™ √© um especialista em educa√ß√£o de hist√≥ria e mapas mentais, com foco em ENEM.",
        'L√≠ngua Portuguesa': "Voc√™ √© um especialista em educa√ß√£o de portugu√™s e mapas mentais, com foco em ENEM.",
        'Reda√ß√£o': "Voc√™ √© um especialista em educa√ß√£o de reda√ß√£o e mapas mentais, com foco em ENEM."
    }
    return prompts.get(subject, "Voc√™ √© um especialista em educa√ß√£o e mapas mentais.")

def get_api_key_for_mindmap():
    """Carrega a chave da API do Streamlit secrets ou vari√°veis de ambiente."""
    # Tenta Streamlit Secrets (para Cloud)
    if hasattr(st, 'secrets') and "GROQ_API_KEY" in st.secrets:
        api_key = st.secrets["GROQ_API_KEY"]
        if api_key and isinstance(api_key, str) and api_key.strip():
            return api_key.strip()
    
    # Fallback para vari√°veis de ambiente (para local)
    api_key = os.environ.get("GROQ_API_KEY")
    if api_key and isinstance(api_key, str) and api_key.strip():
        return api_key.strip()
    
    return None

# Defini√ß√µes de classes para compatibilidade com o hist√≥rico de chat
class HumanMessage:
    def __init__(self, content):
        self.content = content

class AIMessage:
    def __init__(self, content):
        self.content = content 

def display_mapa_mental_markmap():
    """Interface principal do mapa mental usando streamlit-markmap"""
    
    st.markdown("# üß† Mapa Mental Interativo")
    st.markdown("Visualiza√ß√£o din√¢mica dos conceitos relacionados √† sua d√∫vida!")
    
    if not MARKMAP_AVAILABLE:
        st.error("""
        üì¶ **Depend√™ncia n√£o encontrada**
        
        Para usar os mapas mentais, instale a depend√™ncia:
        ```bash
        pip install streamlit-markmap==1.0.1
        ```
        """)
        return
    
    # Verificar se h√° hist√≥rico de chat da mat√©ria atual
    current_subject = st.session_state.get('current_subject', 'Matem√°tica')
    chat_history_key = f"chat_history_{current_subject}"
    chat_history = st.session_state.get(chat_history_key, [])
    
    if not chat_history:
        # Obt√©m informa√ß√µes da mat√©ria atual
        subject_icons = {
            'Matem√°tica': 'üßÆ',
            'F√≠sica': '‚ö°',
            'Qu√≠mica': '‚öóÔ∏è',
            'Biologia': 'üß¨',
            'Geografia': 'üåç',
            'Hist√≥ria': 'üèõÔ∏è',
            'L√≠ngua Portuguesa': 'üìö',
            'Reda√ß√£o': '‚úçÔ∏è'
        }
        
        subject_icon = subject_icons.get(current_subject, 'üìö')
        
        st.info(f"""
        üìù **Como funciona o Mapa Mental:**
        
        1. **üí¨ Fa√ßa uma pergunta** na aba "Chat" para o professor de {current_subject}
        2. **üß† Volte para esta aba** e veja o mapa mental autom√°tico
        3. **üîç Explore os conceitos** de forma visual e interativa
        4. **üîÑ Regenere** se quiser uma nova perspectiva
        
        {subject_icon} **Exemplo para {current_subject}:** 
        - "{get_example_question(current_subject)}" ‚Üí Mapa mental autom√°tico!
        """)
        return
    
    # Obter √∫ltima pergunta do usu√°rio
    ultima_pergunta = obter_ultima_pergunta(chat_history)
    
    if not ultima_pergunta:
        st.warning("üí¨ Fa√ßa uma pergunta na aba Chat primeiro para gerar o mapa mental!")
        return
    
    # Verificar API key
    api_key = get_api_key_for_mindmap()
    if not api_key:
        st.warning("""
        üîë **Configure sua API Key primeiro!**
        
        Sua chave da Groq n√£o foi encontrada. Por favor, configure-a nos Secrets do Streamlit Cloud com o nome `GROQ_API_KEY`.
        """)
        return
    
    # Interface de controle
    col1, col2, col3 = st.columns([3, 1, 1])
    
    with col1:
        st.markdown(f"### üó∫Ô∏è Mapa Mental de {current_subject}")
        with st.expander("üìã Contexto da pergunta", expanded=False):
            st.markdown(f"**Pergunta:** {ultima_pergunta}")
            st.markdown(f"**Mat√©ria:** {current_subject}")
    
    with col2:
        nivel_detalhamento = st.selectbox(
            "N√≠vel:",
            ["B√°sico", "Intermedi√°rio", "Avan√ßado"],
            index=1,
            help="N√≠vel de detalhamento do mapa mental"
        )
    
    with col3:
        # Bot√£o para gerar/regenerar o mapa mental
        if st.button("üß† Gerar Mapa Mental", help="Gerar mapa mental baseado na sua pergunta"):
            # Marcar que o mapa mental deve ser gerado
            st.session_state.gerar_mapa_mental = True
            st.session_state.nivel_mapa_mental = nivel_detalhamento
            st.success("üß† Gerando mapa mental...")
            st.rerun()
    
    # Verificar se o mapa mental deve ser exibido
    if st.session_state.get('gerar_mapa_mental', False):
        # Controles de debug (em expander para n√£o poluir a interface)
        with st.expander("üîß Configura√ß√µes Avan√ßadas (Debug)", expanded=False):
            col_debug1, col_debug2 = st.columns(2)
            
            with col_debug1:
                show_debug = st.checkbox("Mostrar Debug", value=False)
                test_pan = st.checkbox("Testar Pan/Zoom", value=True)
            
            with col_debug2:
                if st.button("üóëÔ∏è Limpar Cache"):
                    # Limpar caches de mapa mental
                    keys_to_remove = [k for k in st.session_state.keys() if 'markmap_' in k or 'first_render_' in k]
                    for key in keys_to_remove:
                        del st.session_state[key]
                    st.success("Cache limpo!")
                    st.rerun()
        
        debug_options = {
            'show_debug': locals().get('show_debug', False),
            'test_pan': locals().get('test_pan', True)
        }
        
        # Exibir mapa mental
        exibir_mapa_mental_markmap(ultima_pergunta, api_key, nivel_detalhamento, debug_options, current_subject)
        
        # Limpar flag ap√≥s exibir
        st.session_state.gerar_mapa_mental = False

def obter_ultima_pergunta(chat_history: List[Any]) -> Optional[str]:
    """Obt√©m a √∫ltima pergunta feita pelo usu√°rio a partir de uma lista de objetos."""
    
    # Itera sobre o hist√≥rico de tr√°s para frente
    for mensagem in reversed(chat_history):
        # Verifica se a mensagem √© uma inst√¢ncia de HumanMessage
        if hasattr(mensagem, '__class__') and mensagem.__class__.__name__ == 'HumanMessage':
            return getattr(mensagem, 'content', '')
            
    return None

def garantir_configuracoes_interatividade(markdown_content: str) -> str:
    """Garante que o markdown tenha configura√ß√µes b√°sicas de interatividade"""
    
    # Configura√ß√µes b√°sicas e compat√≠veis
    config_basica = """---
markmap:
  pan: true
  zoom: true
  initialExpandLevel: 2
  maxWidth: 300
  colorFreezeLevel: 2
  duration: 500
  spacingHorizontal: 80
  spacingVertical: 5
---"""
    
    # Se n√£o tem frontmatter, adicionar
    if not markdown_content.startswith('---'):
        return config_basica + "\n\n" + markdown_content
    
    # Se tem frontmatter, verificar se tem configura√ß√µes b√°sicas
    lines = markdown_content.split('\n')
    yaml_end = -1
    
    # Encontrar o final do YAML
    for i, line in enumerate(lines):
        if i > 0 and line.strip() == '---':
            yaml_end = i
            break
    
    if yaml_end > 0:
        # Extrair YAML existente
        yaml_content = '\n'.join(lines[1:yaml_end])
        remaining_content = '\n'.join(lines[yaml_end+1:])
        
        # Verificar se tem configura√ß√µes b√°sicas
        if 'pan: true' not in yaml_content or 'zoom: true' not in yaml_content:
            # Adicionar configura√ß√µes b√°sicas se faltarem
            yaml_content += '\n  pan: true\n  zoom: true'
        
        # Reconstruir markdown
        return f"""---
markmap:
{yaml_content}
---

{remaining_content}"""
    
    # Fallback: adicionar configura√ß√µes b√°sicas
    return config_basica + "\n\n" + markdown_content 

def exibir_mapa_mental_markmap(pergunta: str, api_key: str, nivel: str, debug_options: dict = None, current_subject: str = 'Matem√°tica'):
    """Gera e exibe o mapa mental usando streamlit-markmap"""
    
    if debug_options is None:
        debug_options = {'show_debug': False, 'test_pan': True}
    
    # Cache baseado na pergunta, n√≠vel e mat√©ria
    cache_key = f"markmap_{hash(pergunta)}_{nivel}_{current_subject}"
    
    # Verificar se √© a primeira renderiza√ß√£o para esta pergunta
    first_render_key = f"first_render_{cache_key}"
    is_first_render = first_render_key not in st.session_state
    
    # Verificar cache
    if cache_key not in st.session_state:
        with st.spinner("üß† Gerando mapa mental interativo..."):
            markdown_content = gerar_markdown_mapa_mental(pergunta, api_key, nivel, current_subject)
            st.session_state[cache_key] = markdown_content
            # Marcar que n√£o √© mais a primeira renderiza√ß√£o
            st.session_state[first_render_key] = False
    else:
        markdown_content = st.session_state[cache_key]
    
    if markdown_content:
        # Exibir estat√≠sticas do mapa
        stats = analisar_markdown_stats(markdown_content)
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üìä Conceitos", stats['conceitos'])
        with col2:
            st.metric("üîó Conex√µes", stats['conexoes'])
        with col3:
            st.metric("üìö N√≠veis", stats['niveis'])
        with col4:
            st.metric("üßÆ F√≥rmulas", stats['formulas'])
        
        st.markdown("---")
        
        # Debug info (se habilitado)
        if debug_options.get('show_debug', False):
            with st.expander("üîç Debug Info - Markdown Gerado", expanded=False):
                st.code(markdown_content, language="markdown")
                
                # Verificar se cont√©m configura√ß√µes de pan/zoom
                has_pan = 'pan:' in markdown_content
                has_zoom = 'zoom:' in markdown_content
                
                st.write(f"‚úÖ Cont√©m 'pan:': {has_pan}")
                st.write(f"‚úÖ Cont√©m 'zoom:': {has_zoom}")
                st.write(f"üîÑ Primeira renderiza√ß√£o: {is_first_render}")
                
                if not has_pan or not has_zoom:
                    st.warning("‚ö†Ô∏è Configura√ß√µes de pan/zoom podem estar faltando!")
        
        # Garantir que as configura√ß√µes de interatividade estejam presentes
        markdown_content = garantir_configuracoes_interatividade(markdown_content)
        
        # Renderizar mapa mental
        markmap(markdown_content, height=600)
    else:
        st.error("‚ùå Erro ao gerar mapa mental. Tente novamente.")

def gerar_markdown_mapa_mental(pergunta: str, api_key: str, nivel: str, current_subject: str) -> str:
    """Gera o conte√∫do markdown do mapa mental usando IA com RAG"""
    
    try:
        # Detectar t√≥pico espec√≠fico da pergunta ANTES de gerar o prompt
        topico_especifico = extrair_topico_especifico(pergunta, current_subject)
        
        # INTEGRA√á√ÉO COM RAG - Buscar conte√∫do real do Hugging Face
        rag_content = buscar_conteudo_rag(pergunta, current_subject, api_key)
        
        # Configura√ß√µes por n√≠vel com diferen√ßas REAIS
        nivel_config = {
            "B√°sico": {
                "conceitos": 3,
                "profundidade": 2,
                "detalhes": "defini√ß√µes b√°sicas",
                "expansion": "initialExpandLevel: 1",
                "style": "conceitos fundamentais apenas"
            },
            "Intermedi√°rio": {
                "conceitos": 6,
                "profundidade": 3,
                "detalhes": "f√≥rmulas e aplica√ß√µes",
                "expansion": "initialExpandLevel: 2", 
                "style": "m√©todos e estrat√©gias"
            },
            "Avan√ßado": {
                "conceitos": 12,
                "profundidade": 4,
                "detalhes": "demonstra√ß√µes e conex√µes profundas",
                "expansion": "initialExpandLevel: 3",
                "style": "an√°lise completa e aplica√ß√µes complexas"
            }
        }
        
        config = nivel_config.get(nivel, nivel_config["Intermedi√°rio"])
        
        client = Groq(api_key=api_key)
        
        # Prompt completamente reformulado para ser OBJETIVO e EXPLICATIVO
        prompt = f"""
Voc√™ √© um especialista em educa√ß√£o para ENEM. Crie um mapa mental EXPLICATIVO sobre "{topico_especifico}" para uma estudante de 17 anos.

**PERGUNTA DA ESTUDANTE:** "{pergunta}"
**T√ìPICO:** {topico_especifico}
**N√çVEL:** {nivel}

**CONTE√öDO RAG:**
{rag_content}

**REGRAS OBRIGAT√ìRIAS:**

1. **M√ÅXIMO 4 N√çVEIS HIER√ÅRQUICOS** (# ‚Üí ## ‚Üí ### ‚Üí ####)
2. **SEM PERGUNTAS** - apenas EXPLICA√á√ïES diretas
3. **SEM MEN√á√ïES VAGAS** - explique sempre os conceitos
4. **LINGUAGEM CLARA** para estudante de 17 anos
5. **INFORMA√á√ïES ESPEC√çFICAS** baseadas no RAG

**ESTRUTURA OBRIGAT√ìRIA:**

```
---
markmap:
  initialExpandLevel: 2
  maxWidth: 300
---

# üéØ {topico_especifico}

## üìö Defini√ß√£o
- [Explica√ß√£o clara do que √© o conceito]
- [Por que √© importante no ENEM]

## üîç Caracter√≠sticas Principais  
- [Caracter√≠stica 1 explicada]
- [Caracter√≠stica 2 explicada]
- [F√≥rmula se aplic√°vel: $formula$]

## üéØ Como Funciona
### [Processo/Etapa 1]
- [Explica√ß√£o detalhada]
### [Processo/Etapa 2] 
- [Explica√ß√£o detalhada]

## üí° Aplica√ß√µes no ENEM
- [Tipo de quest√£o 1 + exemplo]
- [Tipo de quest√£o 2 + exemplo]
- [Dica espec√≠fica para resolver]
```

**EXEMPLO DO QUE FAZER:**
‚úÖ "## Respira√ß√£o Celular
- Processo que transforma glicose em energia (ATP)
- Ocorre nas mitoc√¥ndrias das c√©lulas
- F√≥rmula: $C_6H_{12}O_6 + 6O_2 ‚Üí 6CO_2 + 6H_2O + ATP$"

**EXEMPLO DO QUE N√ÉO FAZER:**
‚ùå "## O que √© respira√ß√£o celular?"
‚ùå "## Contexto hist√≥rico" (sem explicar qual contexto)

Agora crie o mapa explicativo:
"""
        
        # Usar modelo mais recente e est√°vel
        response = client.chat.completions.create(
            model="llama-3.2-90b-text-preview",
            messages=[
                {"role": "system", "content": f"{get_subject_system_prompt(current_subject)} Voc√™ est√° criando um mapa mental explicativo para Sther, de 17 anos, que vai prestar ENEM. Seja preciso e direcionado ao t√≥pico da pergunta."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.1   # Muito baixo para m√°xima consist√™ncia e foco
        )
        
        markdown_content = response.choices[0].message.content.strip()
        
        # Limpar e validar o markdown
        markdown_content = limpar_markdown(markdown_content)
        
        # Validar se o conte√∫do √© espec√≠fico (verificar se menciona o t√≥pico)
        if not validar_especificidade_mapa(markdown_content, topico_especifico):
            # Se n√£o for espec√≠fico, usar vers√£o b√°sica espec√≠fica
            markdown_content = criar_mapa_mental_especifico(pergunta, topico_especifico, nivel, current_subject)
        
        # Se ainda n√£o conseguiu gerar conte√∫do adequado, usar fallback
        if not markdown_content or len(markdown_content) < 100:
            markdown_content = criar_mapa_mental_especifico(pergunta, topico_especifico, nivel, current_subject)
        
        return markdown_content
        
    except Exception as e:
        # Melhor tratamento de erro com fallback espec√≠fico
        error_msg = str(e)
        
        if "decommissioned" in error_msg or "model_decommissioned" in error_msg:
            st.error("üîß **Modelo de IA atualizado necess√°rio** - usando mapa mental espec√≠fico")
        else:
            st.warning(f"‚ö†Ô∏è Erro na gera√ß√£o via IA: {error_msg[:100]}... - usando mapa mental espec√≠fico")
        
        # Fallback que tamb√©m √© espec√≠fico
        topico_especifico = extrair_topico_especifico(pergunta, current_subject)
        return criar_mapa_mental_especifico(pergunta, topico_especifico, nivel, current_subject)

def limpar_markdown(texto: str) -> str:
    """Limpa e valida o conte√∫do markdown"""
    
    # Remover blocos de c√≥digo markdown se existirem
    texto = re.sub(r'```markdown\n?', '', texto)
    texto = re.sub(r'```\n?', '', texto)
    
    # Garantir que come√ßa com #
    linhas = texto.split('\n')
    if linhas and not linhas[0].strip().startswith('#'):
        # Procurar primeira linha com #
        for i, linha in enumerate(linhas):
            if linha.strip().startswith('#'):
                texto = '\n'.join(linhas[i:])
                break
    
    return texto.strip() 

def extrair_topico_especifico(pergunta: str, current_subject: str) -> str:
    """Extrai o t√≥pico espec√≠fico da pergunta com detec√ß√£o avan√ßada"""
    pergunta_lower = pergunta.lower()
    
    # MATEM√ÅTICA - T√≥picos espec√≠ficos
    if current_subject == 'Matem√°tica':
        if any(palavra in pergunta_lower for palavra in ['matriz', 'matrizes', 'determinante']):
            return 'Matrizes e Determinantes'
        elif any(palavra in pergunta_lower for palavra in ['segundo grau', 'bhaskara', 'quadr√°tica']):
            return 'Equa√ß√µes do 2¬∫ Grau'
        elif any(palavra in pergunta_lower for palavra in ['trigonometria', 'seno', 'cosseno', 'tangente']):
            return 'Trigonometria'
        elif any(palavra in pergunta_lower for palavra in ['fun√ß√£o', 'funcao', 'linear', 'afim']):
            return 'Fun√ß√µes'
        elif any(palavra in pergunta_lower for palavra in ['logaritmo', 'log', 'exponencial']):
            return 'Logaritmos e Exponenciais'
        elif any(palavra in pergunta_lower for palavra in ['geometria', '√°rea', 'volume', 'per√≠metro']):
            return 'Geometria'
        elif any(palavra in pergunta_lower for palavra in ['probabilidade', 'estat√≠stica', 'm√©dia']):
            return 'Estat√≠stica e Probabilidade'
    
    # F√çSICA - T√≥picos espec√≠ficos
    elif current_subject == 'F√≠sica':
        if any(palavra in pergunta_lower for palavra in ['for√ßa', 'newton', 'din√¢mica', 'dinamica']):
            return 'Din√¢mica'
        elif any(palavra in pergunta_lower for palavra in ['termodin√¢mica', 'termodinamica', 'calor', 'temperatura']):
            return 'Termodin√¢mica'
        elif any(palavra in pergunta_lower for palavra in ['eletricidade', 'circuito', 'corrente', 'voltagem']):
            return 'Eletricidade'
        elif any(palavra in pergunta_lower for palavra in ['onda', 'ondas', 'som', 'luz']):
            return 'Ondulat√≥ria'
        elif any(palavra in pergunta_lower for palavra in ['velocidade', 'acelera√ß√£o', 'movimento']):
            return 'Cinem√°tica'
        elif any(palavra in pergunta_lower for palavra in ['energia', 'trabalho', 'pot√™ncia']):
            return 'Energia e Trabalho'
    
    # QU√çMICA - T√≥picos espec√≠ficos
    elif current_subject == 'Qu√≠mica':
        if any(palavra in pergunta_lower for palavra in ['√°tomo', 'atomo', 'estrutura at√¥mica']):
            return 'Estrutura At√¥mica'
        elif any(palavra in pergunta_lower for palavra in ['liga√ß√£o', 'ligacao', 'i√¥nica', 'covalente']):
            return 'Liga√ß√µes Qu√≠micas'
        elif any(palavra in pergunta_lower for palavra in ['rea√ß√£o', 'reacao', 'equa√ß√£o qu√≠mica']):
            return 'Rea√ß√µes Qu√≠micas'
        elif any(palavra in pergunta_lower for palavra in ['solu√ß√£o', 'solu√ßao', 'concentra√ß√£o']):
            return 'Solu√ß√µes'
        elif any(palavra in pergunta_lower for palavra in ['√°cido', 'base', 'ph']):
            return '√Åcidos e Bases'
        elif any(palavra in pergunta_lower for palavra in ['org√¢nica', 'organica', 'carbono']):
            return 'Qu√≠mica Org√¢nica'
    
    # BIOLOGIA - T√≥picos espec√≠ficos
    elif current_subject == 'Biologia':
        if any(palavra in pergunta_lower for palavra in ['c√©lula', 'celula', 'membrana']):
            return 'Citologia'
        elif any(palavra in pergunta_lower for palavra in ['dna', 'gene', 'gen√©tica', 'genetica']):
            return 'Gen√©tica'
        elif any(palavra in pergunta_lower for palavra in ['fotoss√≠ntese', 'fotossintese', 'respira√ß√£o']):
            return 'Metabolismo Celular'
        elif any(palavra in pergunta_lower for palavra in ['evolu√ß√£o', 'evolu√ßao', 'darwin']):
            return 'Evolu√ß√£o'
        elif any(palavra in pergunta_lower for palavra in ['ecologia', 'ecosystem', 'cadeia alimentar']):
            return 'Ecologia'
        elif any(palavra in pergunta_lower for palavra in ['corpo humano', 'sistema', 'anatomia']):
            return 'Anatomia e Fisiologia'
    
    # GEOGRAFIA - T√≥picos espec√≠ficos
    elif current_subject == 'Geografia':
        if any(palavra in pergunta_lower for palavra in ['clima', 'temperatura', 'chuva']):
            return 'Climatologia'
        elif any(palavra in pergunta_lower for palavra in ['relevo', 'montanha', 'plan√≠cie']):
            return 'Geomorfologia'
        elif any(palavra in pergunta_lower for palavra in ['popula√ß√£o', 'demografia', 'migra√ß√£o']):
            return 'Geografia da Popula√ß√£o'
        elif any(palavra in pergunta_lower for palavra in ['urbano', 'cidade', 'metr√≥pole']):
            return 'Geografia Urbana'
        elif any(palavra in pergunta_lower for palavra in ['brasil', 'regi√£o', 'territ√≥rio']):
            return 'Geografia do Brasil'
    
    # HIST√ìRIA - T√≥picos espec√≠ficos
    elif current_subject == 'Hist√≥ria':
        if any(palavra in pergunta_lower for palavra in ['guerra fria', 'capitalismo', 'socialismo']):
            return 'Guerra Fria'
        elif any(palavra in pergunta_lower for palavra in ['revolu√ß√£o francesa', 'iluminismo']):
            return 'Revolu√ß√£o Francesa'
        elif any(palavra in pergunta_lower for palavra in ['brasil col√¥nia', 'coloniza√ß√£o']):
            return 'Brasil Colonial'
        elif any(palavra in pergunta_lower for palavra in ['primeira guerra', 'segunda guerra']):
            return 'Guerras Mundiais'
        elif any(palavra in pergunta_lower for palavra in ['rep√∫blica', 'ditadura', 'democracia']):
            return 'Hist√≥ria Pol√≠tica do Brasil'
    
    # L√çNGUA PORTUGUESA - T√≥picos espec√≠ficos
    elif current_subject == 'L√≠ngua Portuguesa':
        if any(palavra in pergunta_lower for palavra in ['figura de linguagem', 'met√°fora', 'meton√≠mia']):
            return 'Figuras de Linguagem'
        elif any(palavra in pergunta_lower for palavra in ['sintaxe', 'sujeito', 'predicado']):
            return 'Sintaxe'
        elif any(palavra in pergunta_lower for palavra in ['interpreta√ß√£o', 'texto', 'leitura']):
            return 'Interpreta√ß√£o de Textos'
        elif any(palavra in pergunta_lower for palavra in ['literatura', 'modernismo', 'romantismo']):
            return 'Literatura Brasileira'
    
    # Fallback: extrair palavras-chave da pergunta
    palavras = pergunta.split()
    if len(palavras) > 1:
        # Pegar palavras importantes (substantivos geralmente)
        palavras_importantes = []
        for palavra in palavras[:3]:  # Primeiras 3 palavras
            palavra_limpa = palavra.lower().strip('.,?!')
            if len(palavra_limpa) > 3 and palavra_limpa not in ['como', 'qual', 'onde', 'quando', 'quem']:
                palavras_importantes.append(palavra_limpa.title())
        
        if palavras_importantes:
            return ' '.join(palavras_importantes[:2])
    
    return current_subject

def buscar_conteudo_rag(pergunta: str, current_subject: str, api_key: str) -> str:
    """Busca conte√∫do espec√≠fico usando o sistema RAG dos professores"""
    try:
        # Importar o sistema RAG apropriado baseado na mat√©ria
        rag_system = None
        
        if current_subject == 'Matem√°tica':
            from local_math_rag import get_local_math_rag_instance
            rag_system = get_local_math_rag_instance()
        elif current_subject == 'F√≠sica':
            from local_physics_rag import LocalphysicsRAG
            rag_system = LocalphysicsRAG()
        elif current_subject == 'Qu√≠mica':
            from local_chemistry_rag import LocalChemistryRAG
            rag_system = LocalChemistryRAG()
        elif current_subject == 'Biologia':
            from local_biology_rag import LocalBiologyRAG
            rag_system = LocalBiologyRAG()
        elif current_subject == 'Geografia':
            from local_geography_rag import LocalGeographyRAG
            rag_system = LocalGeographyRAG()
        elif current_subject == 'Hist√≥ria':
            from local_history_rag import LocalHistoryRAG
            rag_system = LocalHistoryRAG()
        elif current_subject == 'L√≠ngua Portuguesa':
            from local_portuguese_rag import LocalPortugueseRAG
            rag_system = LocalPortugueseRAG()
        
        if rag_system:
            # Inicializar o sistema RAG
            success = rag_system.initialize(api_key)
            if success:
                # Buscar conte√∫do relevante
                docs = rag_system.search_relevant_content(pergunta, k=3)
                if docs:
                    # Concatenar conte√∫do dos documentos encontrados
                    conteudo = "\n\n".join([doc.page_content[:500] for doc in docs])
                    return f"CONTE√öDO ESPEC√çFICO ENCONTRADO:\n{conteudo}"
        
        # Fallback se n√£o conseguir usar RAG
        return f"T√ìPICO: {extrair_topico_especifico(pergunta, current_subject)} da mat√©ria {current_subject}"
        
    except Exception as e:
        # Fallback em caso de erro
        return f"T√ìPICO: {extrair_topico_especifico(pergunta, current_subject)} da mat√©ria {current_subject}"

def validar_especificidade_mapa(markdown_content: str, topico_especifico: str) -> bool:
    """Valida se o mapa mental √© espec√≠fico ao t√≥pico identificado"""
    if not markdown_content or not topico_especifico:
        return False
    return topico_especifico.lower() in markdown_content.lower()

def criar_mapa_mental_especifico(pergunta: str, topico_especifico: str, nivel: str, current_subject: str) -> str:
    """Cria um mapa mental espec√≠fico e explicativo para o t√≥pico identificado"""
    
    # Emojis por mat√©ria
    emoji_materia = {
        'Matem√°tica': 'üßÆ', 'F√≠sica': '‚ö°', 'Qu√≠mica': '‚öóÔ∏è', 'Biologia': 'üß¨',
        'Geografia': 'üåç', 'Hist√≥ria': 'üèõÔ∏è', 'L√≠ngua Portuguesa': 'üìö', 'Reda√ß√£o': '‚úçÔ∏è'
    }
    emoji = emoji_materia.get(current_subject, 'üìö')
    
    # Configurar n√≠veis com conte√∫do espec√≠fico para FOTOSS√çNTESE como exemplo
    if "fotoss√≠ntese" in topico_especifico.lower() or "fotossintese" in pergunta.lower():
        if nivel == "B√°sico":
            conceitos_basicos = f"""
# {emoji} Fotoss√≠ntese

## üìö Defini√ß√£o
- Processo que transforma luz solar em energia qu√≠mica
- Plantas produzem glicose usando CO‚ÇÇ e √°gua
- Libera oxig√™nio como produto secund√°rio

## üîç Onde Acontece
- Ocorre nas folhas das plantas
- Estrutura: cloroplastos (organelas verdes)
- Pigmento: clorofila capta a luz solar

## üéØ Import√¢ncia
- Produz oxig√™nio que respiramos
- Base da cadeia alimentar
- Remove CO‚ÇÇ da atmosfera
"""
        elif nivel == "Intermedi√°rio":
            conceitos_basicos = f"""
# {emoji} Fotoss√≠ntese

## üìö Defini√ß√£o Completa
- Processo anab√≥lico que converte energia luminosa em qu√≠mica
- Transforma mat√©ria inorg√¢nica em org√¢nica
- Equa√ß√£o: $6CO_2 + 6H_2O \\rightarrow C_6H_{12}O_6 + 6O_2$

## üîç Estruturas Envolvidas
### Cloroplastos
- Organelas das c√©lulas vegetais
- Cont√™m clorofila (pigmento verde)
- Tilacoide: onde ocorre a fase clara
### Estroma
- Fluido interno do cloroplasto
- Local da fase escura (Ciclo de Calvin)

## ‚ö° Duas Etapas Principais
### Fase Clara (Fotoqu√≠mica)
- Ocorre nos tilacoides
- Capta energia solar
- Produz ATP e NADPH
### Fase Escura (Ciclo de Calvin)
- Ocorre no estroma
- Fixa CO‚ÇÇ em glicose
- N√£o depende diretamente da luz

## üí° Aplica√ß√µes no ENEM
- Quest√µes sobre equa√ß√£o qu√≠mica
- Rela√ß√£o com respira√ß√£o celular
- Impacto ambiental e aquecimento global
"""
        else:  # Avan√ßado
            conceitos_basicos = f"""
# {emoji} Fotoss√≠ntese

## üìö Defini√ß√£o Cient√≠fica
- Processo anab√≥lico enderg√¥nico
- Converte energia radiante em energia qu√≠mica
- Equa√ß√£o global: $6CO_2 + 6H_2O \\xrightarrow{luz} C_6H_{12}O_6 + 6O_2$
- ŒîG positivo (requer energia)

## üî¨ Aspectos Bioqu√≠micos
### Fase Fotoqu√≠mica
- Fotossistemas I e II
- Transporte de el√©trons
- Fotofosforila√ß√£o: $ADP + Pi \\rightarrow ATP$
- Fot√≥lise da √°gua: $2H_2O \\rightarrow 4H^+ + 4e^- + O_2$
### Ciclo de Calvin-Benson
- Fixa√ß√£o: CO‚ÇÇ + RuBP ‚Üí compostos de 3C
- Redu√ß√£o: NADPH reduz 3-fosfoglicerato
- Regenera√ß√£o: RuBP √© regenerada

## üåç Tipos de Fotoss√≠ntese
### Plantas C3
- Fixam CO‚ÇÇ diretamente no Ciclo de Calvin
- Maioria das plantas (arroz, trigo)
### Plantas C4
- Primeiro fixam CO‚ÇÇ em compostos de 4 carbonos
- Adapta√ß√£o a climas quentes (milho, cana)
### Plantas CAM
- Abrem est√¥matos √† noite
- Adapta√ß√£o a climas √°ridos (cactos)

## üí° Conex√µes ENEM
- Rela√ß√£o inversa com respira√ß√£o celular
- Impacto das mudan√ßas clim√°ticas
- Efici√™ncia energ√©tica em diferentes biomas
- Biotecnologia e plantas transg√™nicas
"""
    
    # Template gen√©rico para outros t√≥picos
    else:
        conceitos_basicos = criar_template_generico(topico_especifico, nivel, current_subject, emoji)
    
    # Configurar expans√£o baseada no n√≠vel (m√°ximo 4 n√≠veis)
    expansion_level = 1 if nivel == "B√°sico" else 2 if nivel == "Intermedi√°rio" else 3
    
    return f"""---
markmap:
  pan: true
  zoom: true
  initialExpandLevel: {expansion_level}
  maxWidth: 300
  colorFreezeLevel: 2
  duration: 500
  spacingHorizontal: 80
  spacingVertical: 5
---

{conceitos_basicos}
"""

def criar_template_generico(topico_especifico: str, nivel: str, current_subject: str, emoji: str) -> str:
    """Cria template gen√©rico explicativo para qualquer t√≥pico"""
    
    # Conte√∫do espec√≠fico por mat√©ria
    definicoes_especificas = {
        'Matem√°tica': {
            'Equa√ß√µes do 2¬∫ Grau': 'Equa√ß√µes da forma ax¬≤ + bx + c = 0, onde a ‚â† 0',
            'Trigonometria': 'Estudo das rela√ß√µes entre √¢ngulos e lados de tri√¢ngulos',
            'Fun√ß√µes': 'Rela√ß√£o entre dois conjuntos onde cada elemento tem uma imagem √∫nica',
            'Logaritmos': 'Opera√ß√£o inversa da potencia√ß√£o, usado para resolver equa√ß√µes exponenciais'
        },
        'F√≠sica': {
            'Cinem√°tica': 'Estudo do movimento sem considerar suas causas',
            'Din√¢mica': 'Estudo das for√ßas que causam o movimento',
            'Termodin√¢mica': 'Estudo das rela√ß√µes entre calor, trabalho e energia',
            'Eletricidade': 'Estudo dos fen√¥menos relacionados a cargas el√©tricas'
        },
        'Qu√≠mica': {
            'Liga√ß√µes Qu√≠micas': 'For√ßas que mant√™m √°tomos unidos formando compostos',
            'Rea√ß√µes Qu√≠micas': 'Processos de transforma√ß√£o de subst√¢ncias qu√≠micas',
            'Solu√ß√µes': 'Misturas homog√™neas de duas ou mais subst√¢ncias',
            '√Åcidos e Bases': 'Subst√¢ncias que doam ou recebem pr√≥tons (H‚Å∫)'
        },
        'Biologia': {
            'Respira√ß√£o Celular': 'Processo que transforma glicose em energia (ATP) nas c√©lulas',
            'Fotoss√≠ntese': 'Processo que converte luz solar em energia qu√≠mica nas plantas',
            'Gen√©tica': 'Estudo da hereditariedade e varia√ß√£o dos seres vivos',
            'Ecologia': 'Estudo das rela√ß√µes entre seres vivos e o ambiente'
        }
    }
    
    # Buscar defini√ß√£o espec√≠fica ou usar gen√©rica
    definicao = ""
    if current_subject in definicoes_especificas:
        for topico, desc in definicoes_especificas[current_subject].items():
            if topico.lower() in topico_especifico.lower():
                definicao = desc
                break
    
    if not definicao:
        definicao = f"Conceito fundamental de {current_subject} relacionado a {topico_especifico.lower()}"
    
    if nivel == "B√°sico":
        return f"""
# {emoji} {topico_especifico}

## üìö Defini√ß√£o
- {definicao}
- Conceito importante para o ENEM
- {get_formula_example(current_subject)}

## üîç Caracter√≠sticas Principais
- Propriedade fundamental do conceito
- Aplica√ß√£o pr√°tica b√°sica
- Exemplo simples de uso

## üí° Como Identificar no ENEM
- Palavras-chave t√≠picas nas quest√µes
- Sinais que indicam esse tema
- Estrat√©gia b√°sica de resolu√ß√£o
"""
    elif nivel == "Intermedi√°rio":
        return f"""
# {emoji} {topico_especifico}

## üìö Defini√ß√£o Completa
- {definicao}
- Import√¢ncia no contexto da mat√©ria
- Rela√ß√£o com outros conceitos

## üîç Como Funciona
### Processo Principal
- Etapa 1: descri√ß√£o detalhada
- Etapa 2: desenvolvimento
- {get_formula_example(current_subject)}
### Aplica√ß√µes Pr√°ticas
- Uso em situa√ß√µes reais
- Exemplos do cotidiano

## üéØ Estrat√©gias de Resolu√ß√£o
- M√©todo 1: abordagem sistem√°tica
- M√©todo 2: t√©cnica alternativa
- Dicas para evitar erros comuns

## üí° No ENEM
- Tipos de quest√£o mais frequentes
- Compet√™ncias avaliadas
- Tempo m√©dio de resolu√ß√£o
"""
    else:  # Avan√ßado
        return f"""
# {emoji} {topico_especifico}

## üìö Fundamento Te√≥rico
- {definicao}
- Base cient√≠fica do conceito
- Desenvolvimento hist√≥rico relevante
- {get_advanced_formula_example(current_subject)}

## üî¨ An√°lise Detalhada
### Aspectos Fundamentais
- Princ√≠pio 1: explica√ß√£o aprofundada
- Princ√≠pio 2: rela√ß√µes complexas
- Demonstra√ß√£o matem√°tica quando aplic√°vel
### Varia√ß√µes e Casos Especiais
- Situa√ß√£o espec√≠fica 1
- Situa√ß√£o espec√≠fica 2
- Exce√ß√µes importantes

## üéØ Aplica√ß√µes Avan√ßadas
### Resolu√ß√£o Complexa
- T√©cnica especializada 1
- T√©cnica especializada 2
- An√°lise de casos limites
### Interdisciplinaridade
- Conex√£o com outras mat√©rias
- Aplica√ß√µes tecnol√≥gicas
- Relev√¢ncia cient√≠fica atual

## üí° Dom√≠nio Completo ENEM
- Quest√µes de alta complexidade
- An√°lise cr√≠tica e interpreta√ß√£o
- Estrat√©gias de otimiza√ß√£o de tempo
- Armadilhas comuns e como evit√°-las
"""

def detectar_topico_principal(pergunta: str, current_subject: str) -> str:
    """Detecta o t√≥pico principal da pergunta baseado na mat√©ria"""
    palavras = pergunta.split()
    if len(palavras) > 2:
        return ' '.join(palavras[:2]).title()
    return current_subject

def analisar_markdown_stats(markdown: str) -> Dict[str, int]:
    """Analisa estat√≠sticas do markdown do mapa mental"""
    linhas = markdown.split('\n')
    return {
        'conceitos': len([l for l in linhas if l.strip().startswith('#')]),
        'conexoes': len([l for l in linhas if '‚Üî' in l or '‚Üí' in l or '‚Üê' in l]),
        'niveis': 3,
        'formulas': len(re.findall(r'\$[^$]+\$', markdown))
    }

def display_mapa_mental_wrapper():
    """Wrapper para compatibilidade com o app principal"""
    if 'gerar_mapa_mental' not in st.session_state:
        st.session_state.gerar_mapa_mental = False
    display_mapa_mental_markmap()

if __name__ == "__main__":
    try:
        st.set_page_config(
            page_title="Mapa Mental Markmap",
            page_icon="üß†",
            layout="wide"
        )
    except st.errors.StreamlitAPIException:
        pass
    display_mapa_mental_markmap() 