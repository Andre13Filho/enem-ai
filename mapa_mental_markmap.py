#!/usr/bin/env python3
"""
Sistema de Mapa Mental com Streamlit-Markmap
Gera mapas mentais interativos baseados nas d√∫vidas da Sther
"""

import streamlit as st
import re
import os
from typing import Dict, List, Any, Optional
from groq import Groq
import time

try:
    from streamlit_markmap import markmap
    MARKMAP_AVAILABLE = True
except ImportError:
    MARKMAP_AVAILABLE = False
    st.error("‚ùå streamlit-markmap n√£o instalado. Execute: pip install streamlit-markmap==1.0.1")

def get_example_question(subject: str) -> str:
    """Retorna pergunta de exemplo para cada mat√©ria"""
    examples = {
        'Matem√°tica': 'Como resolver uma equa√ß√£o do segundo grau?',
        'F√≠sica': 'Como calcular a velocidade de um objeto?',
        'Qu√≠mica': 'Como funciona uma rea√ß√£o de combust√£o?',
        'Biologia': 'Como ocorre a fotoss√≠ntese?',
        'Geografia': 'Como se formam as chuvas?',
        'Hist√≥ria': 'Quais foram as causas da Revolu√ß√£o Francesa?',
        'L√≠ngua Portuguesa': 'Quais s√£o as figuras de linguagem?',
        'Reda√ß√£o': 'Como estruturar uma disserta√ß√£o argumentativa?'
    }
    return examples.get(subject, 'Fa√ßa uma pergunta sobre sua d√∫vida!')

def get_formula_example(subject: str) -> str:
    """Retorna exemplo de f√≥rmula b√°sica para cada mat√©ria"""
    examples = {
        'Matem√°tica': '- $f(x) = ax + b$',
        'F√≠sica': '- $v = \\frac{\\Delta s}{\\Delta t}$',
        'Qu√≠mica': '- $C = \\frac{n}{V}$',
        'Biologia': '- Respira√ß√£o: $C_6H_{12}O_6 + O_2 \\rightarrow CO_2 + H_2O$',
        'Geografia': '- Densidade demogr√°fica = Popula√ß√£o/√Årea',
        'Hist√≥ria': '- Cronologia de eventos',
        'L√≠ngua Portuguesa': '- Estrutura: Sujeito + Predicado',
        'Reda√ß√£o': '- Introdu√ß√£o + Desenvolvimento + Conclus√£o'
    }
    return examples.get(subject, '- Conceito fundamental')

def get_advanced_formula_example(subject: str) -> str:
    """Retorna exemplo de f√≥rmula avan√ßada para cada mat√©ria"""
    examples = {
        'Matem√°tica': '- $$x = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$$',
        'F√≠sica': '- $$F = ma$$\\n- $$E = mc^2$$',
        'Qu√≠mica': '- $$pH = -\\log[H^+]$$',
        'Biologia': '- Fotoss√≠ntese: $6CO_2 + 6H_2O \\rightarrow C_6H_{12}O_6 + 6O_2$',
        'Geografia': '- √çndices demogr√°ficos complexos',
        'Hist√≥ria': '- An√°lise de causas e consequ√™ncias',
        'L√≠ngua Portuguesa': '- Figuras de linguagem e sintaxe',
        'Reda√ß√£o': '- Argumenta√ß√£o e coes√£o textual'
    }
    return examples.get(subject, '- Conceito avan√ßado')

def get_subject_system_prompt(subject: str) -> str:
    """Retorna prompt de sistema espec√≠fico para cada mat√©ria"""
    prompts = {
        'Matem√°tica': "Voc√™ √© um especialista em educa√ß√£o matem√°tica e mapas mentais.",
        'F√≠sica': "Voc√™ √© um especialista em educa√ß√£o de f√≠sica e mapas mentais, com foco em ENEM.",
        'Qu√≠mica': "Voc√™ √© um especialista em educa√ß√£o de qu√≠mica e mapas mentais, com foco em ENEM.",
        'Biologia': "Voc√™ √© um especialista em educa√ß√£o de biologia e mapas mentais, com foco em ENEM.",
        'Geografia': "Voc√™ √© um especialista em educa√ß√£o de geografia e mapas mentais, com foco em ENEM.",
        'Hist√≥ria': "Voc√™ √© um especialista em educa√ß√£o de hist√≥ria e mapas mentais, com foco em ENEM.",
        'L√≠ngua Portuguesa': "Voc√™ √© um especialista em educa√ß√£o de portugu√™s e mapas mentais, com foco em ENEM.",
        'Reda√ß√£o': "Voc√™ √© um especialista em educa√ß√£o de reda√ß√£o e mapas mentais, com foco em ENEM."
    }
    return prompts.get(subject, "Voc√™ √© um especialista em educa√ß√£o e mapas mentais.")

def get_api_key_for_mindmap():
    """Carrega a chave da API do Streamlit secrets ou vari√°veis de ambiente."""
    # Tenta Streamlit Secrets (para Cloud)
    if hasattr(st, 'secrets') and "GROQ_API_KEY" in st.secrets:
        api_key = st.secrets["GROQ_API_KEY"]
        if api_key and isinstance(api_key, str) and api_key.strip():
            return api_key.strip()
    
    # Fallback para vari√°veis de ambiente (para local)
    api_key = os.environ.get("GROQ_API_KEY")
    if api_key and isinstance(api_key, str) and api_key.strip():
        return api_key.strip()
    
    return None

# Defini√ß√µes de classes para compatibilidade com o hist√≥rico de chat
class HumanMessage:
    def __init__(self, content):
        self.content = content

class AIMessage:
    def __init__(self, content):
        self.content = content 

def display_mapa_mental_markmap():
    """Interface principal do mapa mental usando streamlit-markmap"""
    
    st.markdown("# üß† Mapa Mental Interativo")
    st.markdown("Visualiza√ß√£o din√¢mica dos conceitos relacionados √† sua d√∫vida!")
    
    if not MARKMAP_AVAILABLE:
        st.error("""
        üì¶ **Depend√™ncia n√£o encontrada**
        
        Para usar os mapas mentais, instale a depend√™ncia:
        ```bash
        pip install streamlit-markmap==1.0.1
        ```
        """)
        return
    
    # Verificar se h√° hist√≥rico de chat da mat√©ria atual
    current_subject = st.session_state.get('current_subject', 'Matem√°tica')
    chat_history_key = f"chat_history_{current_subject}"
    chat_history = st.session_state.get(chat_history_key, [])
    
    if not chat_history:
        # Obt√©m informa√ß√µes da mat√©ria atual
        subject_icons = {
            'Matem√°tica': 'üßÆ',
            'F√≠sica': '‚ö°',
            'Qu√≠mica': '‚öóÔ∏è',
            'Biologia': 'üß¨',
            'Geografia': 'üåç',
            'Hist√≥ria': 'üèõÔ∏è',
            'L√≠ngua Portuguesa': 'üìö',
            'Reda√ß√£o': '‚úçÔ∏è'
        }
        
        subject_icon = subject_icons.get(current_subject, 'üìö')
        
        st.info(f"""
        üìù **Como funciona o Mapa Mental:**
        
        1. **üí¨ Fa√ßa uma pergunta** na aba "Chat" para o professor de {current_subject}
        2. **üß† Volte para esta aba** e veja o mapa mental autom√°tico
        3. **üîç Explore os conceitos** de forma visual e interativa
        4. **üîÑ Regenere** se quiser uma nova perspectiva
        
        {subject_icon} **Exemplo para {current_subject}:** 
        - "{get_example_question(current_subject)}" ‚Üí Mapa mental autom√°tico!
        """)
        return
    
    # Obter √∫ltima pergunta do usu√°rio
    ultima_pergunta = obter_ultima_pergunta(chat_history)
    
    if not ultima_pergunta:
        st.warning("üí¨ Fa√ßa uma pergunta na aba Chat primeiro para gerar o mapa mental!")
        return
    
    # Verificar API key
    api_key = get_api_key_for_mindmap()
    if not api_key:
        st.warning("""
        üîë **Configure sua API Key primeiro!**
        
        Sua chave da Groq n√£o foi encontrada. Por favor, configure-a nos Secrets do Streamlit Cloud com o nome `GROQ_API_KEY`.
        """)
        return
    
    # Interface de controle
    col1, col2, col3 = st.columns([3, 1, 1])
    
    with col1:
        st.markdown(f"### üó∫Ô∏è Mapa Mental de {current_subject}")
        with st.expander("üìã Contexto da pergunta", expanded=False):
            st.markdown(f"**Pergunta:** {ultima_pergunta}")
            st.markdown(f"**Mat√©ria:** {current_subject}")
    
    with col2:
        nivel_detalhamento = st.selectbox(
            "N√≠vel:",
            ["B√°sico", "Intermedi√°rio", "Avan√ßado"],
            index=1,
            help="N√≠vel de detalhamento do mapa mental"
        )
    
    with col3:
        # Bot√£o para gerar/regenerar o mapa mental
        if st.button("üß† Gerar Mapa Mental", help="Gerar mapa mental baseado na sua pergunta"):
            # Marcar que o mapa mental deve ser gerado
            st.session_state.gerar_mapa_mental = True
            st.session_state.nivel_mapa_mental = nivel_detalhamento
            st.success("üß† Gerando mapa mental...")
            st.rerun()
    
    # Verificar se o mapa mental deve ser exibido
    if st.session_state.get('gerar_mapa_mental', False):
        # Controles de debug (em expander para n√£o poluir a interface)
        with st.expander("üîß Configura√ß√µes Avan√ßadas (Debug)", expanded=False):
            col_debug1, col_debug2 = st.columns(2)
            
            with col_debug1:
                show_debug = st.checkbox("Mostrar Debug", value=False)
                test_pan = st.checkbox("Testar Pan/Zoom", value=True)
            
            with col_debug2:
                if st.button("üóëÔ∏è Limpar Cache"):
                    # Limpar caches de mapa mental
                    keys_to_remove = [k for k in st.session_state.keys() if 'markmap_' in k or 'first_render_' in k]
                    for key in keys_to_remove:
                        del st.session_state[key]
                    st.success("Cache limpo!")
                    st.rerun()
        
        debug_options = {
            'show_debug': locals().get('show_debug', False),
            'test_pan': locals().get('test_pan', True)
        }
        
        # Exibir mapa mental
        exibir_mapa_mental_markmap(ultima_pergunta, api_key, nivel_detalhamento, debug_options, current_subject)
        
        # Limpar flag ap√≥s exibir
        st.session_state.gerar_mapa_mental = False

def obter_ultima_pergunta(chat_history: List[Any]) -> Optional[str]:
    """Obt√©m a √∫ltima pergunta feita pelo usu√°rio a partir de uma lista de objetos."""
    
    # Itera sobre o hist√≥rico de tr√°s para frente
    for mensagem in reversed(chat_history):
        # Verifica se a mensagem √© uma inst√¢ncia de HumanMessage
        if hasattr(mensagem, '__class__') and mensagem.__class__.__name__ == 'HumanMessage':
            return getattr(mensagem, 'content', '')
            
    return None

def garantir_configuracoes_interatividade(markdown_content: str) -> str:
    """Garante que o markdown tenha configura√ß√µes b√°sicas de interatividade"""
    
    # Configura√ß√µes b√°sicas e compat√≠veis
    config_basica = """---
markmap:
  pan: true
  zoom: true
  initialExpandLevel: 2
  maxWidth: 300
  colorFreezeLevel: 2
  duration: 500
  spacingHorizontal: 80
  spacingVertical: 5
---"""
    
    # Se n√£o tem frontmatter, adicionar
    if not markdown_content.startswith('---'):
        return config_basica + "\n\n" + markdown_content
    
    # Se tem frontmatter, verificar se tem configura√ß√µes b√°sicas
    lines = markdown_content.split('\n')
    yaml_end = -1
    
    # Encontrar o final do YAML
    for i, line in enumerate(lines):
        if i > 0 and line.strip() == '---':
            yaml_end = i
            break
    
    if yaml_end > 0:
        # Extrair YAML existente
        yaml_content = '\n'.join(lines[1:yaml_end])
        remaining_content = '\n'.join(lines[yaml_end+1:])
        
        # Verificar se tem configura√ß√µes b√°sicas
        if 'pan: true' not in yaml_content or 'zoom: true' not in yaml_content:
            # Adicionar configura√ß√µes b√°sicas se faltarem
            yaml_content += '\n  pan: true\n  zoom: true'
        
        # Reconstruir markdown
        return f"""---
markmap:
{yaml_content}
---

{remaining_content}"""
    
    # Fallback: adicionar configura√ß√µes b√°sicas
    return config_basica + "\n\n" + markdown_content 

def exibir_mapa_mental_markmap(pergunta: str, api_key: str, nivel: str, debug_options: dict = None, current_subject: str = 'Matem√°tica'):
    """Gera e exibe o mapa mental usando streamlit-markmap"""
    
    if debug_options is None:
        debug_options = {'show_debug': False, 'test_pan': True}
    
    # Cache baseado na pergunta, n√≠vel e mat√©ria
    cache_key = f"markmap_{hash(pergunta)}_{nivel}_{current_subject}"
    
    # Verificar se √© a primeira renderiza√ß√£o para esta pergunta
    first_render_key = f"first_render_{cache_key}"
    is_first_render = first_render_key not in st.session_state
    
    # Verificar cache
    if cache_key not in st.session_state:
        with st.spinner("üß† Gerando mapa mental interativo..."):
            markdown_content = gerar_markdown_mapa_mental(pergunta, api_key, nivel, current_subject)
            st.session_state[cache_key] = markdown_content
            # Marcar que n√£o √© mais a primeira renderiza√ß√£o
            st.session_state[first_render_key] = False
    else:
        markdown_content = st.session_state[cache_key]
    
    if markdown_content:
        # Exibir estat√≠sticas do mapa
        stats = analisar_markdown_stats(markdown_content)
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üìä Conceitos", stats['conceitos'])
        with col2:
            st.metric("üîó Conex√µes", stats['conexoes'])
        with col3:
            st.metric("üìö N√≠veis", stats['niveis'])
        with col4:
            st.metric("üßÆ F√≥rmulas", stats['formulas'])
        
        st.markdown("---")
        
        # Debug info (se habilitado)
        if debug_options.get('show_debug', False):
            with st.expander("üîç Debug Info - Markdown Gerado", expanded=False):
                st.code(markdown_content, language="markdown")
                
                # Verificar se cont√©m configura√ß√µes de pan/zoom
                has_pan = 'pan:' in markdown_content
                has_zoom = 'zoom:' in markdown_content
                
                st.write(f"‚úÖ Cont√©m 'pan:': {has_pan}")
                st.write(f"‚úÖ Cont√©m 'zoom:': {has_zoom}")
                st.write(f"üîÑ Primeira renderiza√ß√£o: {is_first_render}")
                
                if not has_pan or not has_zoom:
                    st.warning("‚ö†Ô∏è Configura√ß√µes de pan/zoom podem estar faltando!")
        
        # Garantir que as configura√ß√µes de interatividade estejam presentes
        markdown_content = garantir_configuracoes_interatividade(markdown_content)
        
        # Renderizar mapa mental
        markmap(markdown_content, height=600)
    else:
        st.error("‚ùå Erro ao gerar mapa mental. Tente novamente.")

def gerar_markdown_mapa_mental(pergunta: str, api_key: str, nivel: str, current_subject: str) -> str:
    """Gera o conte√∫do markdown do mapa mental usando IA"""
    
    try:
        client = Groq(api_key=api_key)
        
        # Detectar t√≥pico espec√≠fico da pergunta ANTES de gerar o prompt
        topico_especifico = extrair_topico_especifico(pergunta, current_subject)
        
        # Configura√ß√µes por n√≠vel
        nivel_config = {
            "B√°sico": {
                "conceitos": "4-6 conceitos fundamentais",
                "profundidade": "2-3 n√≠veis de hierarquia",
                "detalhes": "explica√ß√µes simples e diretas",
                "foco": "conceitos b√°sicos essenciais"
            },
            "Intermedi√°rio": {
                "conceitos": "7-10 conceitos relacionados",
                "profundidade": "3-4 n√≠veis de hierarquia",
                "detalhes": "f√≥rmulas principais e exemplos pr√°ticos",
                "foco": "aplica√ß√µes e m√©todos de resolu√ß√£o"
            },
            "Avan√ßado": {
                "conceitos": "10-14 conceitos e subdivis√µes",
                "profundidade": "4-5 n√≠veis de hierarquia",
                "detalhes": "f√≥rmulas completas, demonstra√ß√µes e conex√µes",
                "foco": "an√°lise profunda e aplica√ß√µes complexas"
            }
        }
        
        config = nivel_config.get(nivel, nivel_config["Intermedi√°rio"])
        
        # Prompt completamente reformulado para ser ESPEC√çFICO √† d√∫vida
        prompt = f"""
Voc√™ √© um especialista em educa√ß√£o e mapas mentais, focado em ENEM. Sua tarefa √© criar um mapa mental ESPEC√çFICO e DIRECIONADO.

**PERGUNTA DA ESTUDANTE:** "{pergunta}"
**MAT√âRIA:** {current_subject}
**T√ìPICO IDENTIFICADO:** {topico_especifico}
**N√çVEL:** {nivel}

**INSTRU√á√ïES CR√çTICAS:**

1. **FOQUE EXCLUSIVAMENTE NO T√ìPICO:** O mapa mental deve ser sobre "{topico_especifico}" especificamente, N√ÉO sobre {current_subject} em geral.

2. **ANALISE A PERGUNTA:** Se a pergunta menciona um conceito espec√≠fico (ex: "matrizes", "termodin√¢mica", "fun√ß√£o quadr√°tica"), TODO o mapa deve girar em torno DESSE conceito.

3. **ESTRUTURA DIRECIONADA:**
   - T√≠tulo principal: O t√≥pico espec√≠fico da pergunta
   - Ramifica√ß√µes: Aspectos diretos desse t√≥pico
   - Subt√≥picos: Conceitos que ajudam a entender especificamente esse assunto
   - {config['conceitos']} no total
   - {config['profundidade']} m√°ximo
   - Foco: {config['foco']}

4. **EVITE GENERALIDADES:** N√ÉO inclua conceitos gerais da mat√©ria que n√£o se relacionam diretamente com o t√≥pico da pergunta.

5. **FORMATO DE SA√çDA:**
   - Inclua sempre o frontmatter YAML
   - Use emojis relevantes
   - F√≥rmulas em LaTeX quando necess√°rio
   - Responda APENAS com o markdown

**EXEMPLO CORRETO:**
Se pergunta = "Como resolver equa√ß√µes do segundo grau?"
Mapa = Foco total em "Equa√ß√µes do Segundo Grau", n√£o em "Matem√°tica geral"

Agora crie o mapa espec√≠fico para "{topico_especifico}":
"""
        
        # Usar modelo mais recente e est√°vel
        response = client.chat.completions.create(
            model="llama-3.2-90b-text-preview",
            messages=[
                {"role": "system", "content": f"{get_subject_system_prompt(current_subject)} Voc√™ est√° criando um mapa mental espec√≠fico para Sther, de 17 anos, que vai prestar ENEM. Seja preciso e direcionado ao t√≥pico da pergunta."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=2000,
            temperature=0.2   # Reduzido para mais foco e consist√™ncia
        )
        
        markdown_content = response.choices[0].message.content.strip()
        
        # Limpar e validar o markdown
        markdown_content = limpar_markdown(markdown_content)
        
        # Validar se o conte√∫do √© espec√≠fico (verificar se menciona o t√≥pico)
        if not validar_especificidade_mapa(markdown_content, topico_especifico):
            # Se n√£o for espec√≠fico, usar vers√£o b√°sica espec√≠fica
            markdown_content = criar_mapa_mental_especifico(pergunta, topico_especifico, nivel, current_subject)
        
        # Se ainda n√£o conseguiu gerar conte√∫do adequado, usar fallback
        if not markdown_content or len(markdown_content) < 100:
            markdown_content = criar_mapa_mental_especifico(pergunta, topico_especifico, nivel, current_subject)
        
        return markdown_content
        
    except Exception as e:
        # Melhor tratamento de erro com fallback espec√≠fico
        error_msg = str(e)
        
        if "decommissioned" in error_msg or "model_decommissioned" in error_msg:
            st.error("üîß **Modelo de IA atualizado necess√°rio** - usando mapa mental espec√≠fico")
        else:
            st.warning(f"‚ö†Ô∏è Erro na gera√ß√£o via IA: {error_msg[:100]}... - usando mapa mental espec√≠fico")
        
        # Fallback que tamb√©m √© espec√≠fico
        topico_especifico = extrair_topico_especifico(pergunta, current_subject)
        return criar_mapa_mental_especifico(pergunta, topico_especifico, nivel, current_subject)

def limpar_markdown(texto: str) -> str:
    """Limpa e valida o conte√∫do markdown"""
    
    # Remover blocos de c√≥digo markdown se existirem
    texto = re.sub(r'```markdown\n?', '', texto)
    texto = re.sub(r'```\n?', '', texto)
    
    # Garantir que come√ßa com #
    linhas = texto.split('\n')
    if linhas and not linhas[0].strip().startswith('#'):
        # Procurar primeira linha com #
        for i, linha in enumerate(linhas):
            if linha.strip().startswith('#'):
                texto = '\n'.join(linhas[i:])
                break
    
    return texto.strip() 

def extrair_topico_especifico(pergunta: str, current_subject: str) -> str:
    """Extrai o t√≥pico espec√≠fico da pergunta"""
    pergunta_lower = pergunta.lower()
    
    # Detec√ß√£o espec√≠fica para alguns t√≥picos principais
    if 'matriz' in pergunta_lower:
        return 'Matrizes'
    elif 'segundo grau' in pergunta_lower or 'bhaskara' in pergunta_lower:
        return 'Equa√ß√µes do 2¬∫ Grau'
    elif 'trigonometria' in pergunta_lower or 'seno' in pergunta_lower:
        return 'Trigonometria'
    elif 'for√ßa' in pergunta_lower or 'newton' in pergunta_lower:
        return 'Din√¢mica'
    elif 'termodinamica' in pergunta_lower or 'calor' in pergunta_lower:
        return 'Termodin√¢mica'
    else:
        # Extrair primeiras palavras como t√≥pico
        palavras = pergunta.split()
        if len(palavras) > 2:
            return ' '.join(palavras[:2]).title()
        return current_subject

def validar_especificidade_mapa(markdown_content: str, topico_especifico: str) -> bool:
    """Valida se o mapa mental √© espec√≠fico ao t√≥pico identificado"""
    if not markdown_content or not topico_especifico:
        return False
    return topico_especifico.lower() in markdown_content.lower()

def criar_mapa_mental_especifico(pergunta: str, topico_especifico: str, nivel: str, current_subject: str) -> str:
    """Cria um mapa mental espec√≠fico para o t√≥pico identificado"""
    
    # Emojis por mat√©ria
    emoji_materia = {
        'Matem√°tica': 'üßÆ', 'F√≠sica': '‚ö°', 'Qu√≠mica': '‚öóÔ∏è', 'Biologia': 'üß¨',
        'Geografia': 'üåç', 'Hist√≥ria': 'üèõÔ∏è', 'L√≠ngua Portuguesa': 'üìö', 'Reda√ß√£o': '‚úçÔ∏è'
    }
    emoji = emoji_materia.get(current_subject, 'üìö')
    
    return f"""---
markmap:
  pan: true
  zoom: true
  initialExpandLevel: 2
  maxWidth: 300
  colorFreezeLevel: 2
  duration: 500
  spacingHorizontal: 80
  spacingVertical: 5
---

# {emoji} {topico_especifico}

## üìö Conceitos Fundamentais
### üîç Defini√ß√£o
- O que √© {topico_especifico.lower()}
- Caracter√≠sticas principais

### üìê Propriedades
- Elementos essenciais
- {get_formula_example(current_subject)}

## üéØ Aplica√ß√µes
### üìù Como resolver
- M√©todos principais
- Estrat√©gias de solu√ß√£o

### üéì No ENEM
- Tipos de quest√£o
- Dicas importantes
"""

def detectar_topico_principal(pergunta: str, current_subject: str) -> str:
    """Detecta o t√≥pico principal da pergunta baseado na mat√©ria"""
    palavras = pergunta.split()
    if len(palavras) > 2:
        return ' '.join(palavras[:2]).title()
    return current_subject

def analisar_markdown_stats(markdown: str) -> Dict[str, int]:
    """Analisa estat√≠sticas do markdown do mapa mental"""
    linhas = markdown.split('\n')
    return {
        'conceitos': len([l for l in linhas if l.strip().startswith('#')]),
        'conexoes': len([l for l in linhas if '‚Üî' in l or '‚Üí' in l or '‚Üê' in l]),
        'niveis': 3,
        'formulas': len(re.findall(r'\$[^$]+\$', markdown))
    }

def display_mapa_mental_wrapper():
    """Wrapper para compatibilidade com o app principal"""
    if 'gerar_mapa_mental' not in st.session_state:
        st.session_state.gerar_mapa_mental = False
    display_mapa_mental_markmap()

if __name__ == "__main__":
    try:
        st.set_page_config(
            page_title="Mapa Mental Markmap",
            page_icon="üß†",
            layout="wide"
        )
    except st.errors.StreamlitAPIException:
        pass
    display_mapa_mental_markmap() 