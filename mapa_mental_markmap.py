#!/usr/bin/env python3
"""
Sistema de Mapa Mental com Streamlit-Markmap
Gera mapas mentais interativos baseados nas d√∫vidas da Sther
"""

import streamlit as st
import re
import os
from typing import Dict, List, Any, Optional
from groq import Groq
import time

try:
    from streamlit_markmap import markmap
    MARKMAP_AVAILABLE = True
except ImportError:
    MARKMAP_AVAILABLE = False
    st.error("‚ùå streamlit-markmap n√£o instalado. Execute: pip install streamlit-markmap==1.0.1")

def get_example_question(subject: str) -> str:
    """Retorna pergunta de exemplo para cada mat√©ria"""
    examples = {
        'Matem√°tica': 'Como resolver uma equa√ß√£o do segundo grau?',
        'F√≠sica': 'Como calcular a velocidade de um objeto?',
        'Qu√≠mica': 'Como funciona uma rea√ß√£o de combust√£o?',
        'Biologia': 'Como ocorre a fotoss√≠ntese?',
        'Geografia': 'Como se formam as chuvas?',
        'Hist√≥ria': 'Quais foram as causas da Revolu√ß√£o Francesa?',
        'L√≠ngua Portuguesa': 'Quais s√£o as figuras de linguagem?',
        'Reda√ß√£o': 'Como estruturar uma disserta√ß√£o argumentativa?'
    }
    return examples.get(subject, 'Fa√ßa uma pergunta sobre sua d√∫vida!')

def get_formula_example(subject: str) -> str:
    """Retorna exemplo de f√≥rmula b√°sica explicativa para cada mat√©ria"""
    examples = {
        'Matem√°tica': '- Fun√ß√£o linear: $f(x) = ax + b$ (onde "a" √© coeficiente angular)',
        'F√≠sica': '- Velocidade m√©dia: $v = \\frac{\\Delta s}{\\Delta t}$ (dist√¢ncia/tempo)',
        'Qu√≠mica': '- Concentra√ß√£o molar: $C = \\frac{n}{V}$ (mol/litro)',
        'Biologia': '- Respira√ß√£o: $C_6H_{12}O_6 + 6O_2 \\rightarrow 6CO_2 + 6H_2O + ATP$',
        'Geografia': '- Densidade demogr√°fica = Popula√ß√£o total / √Årea territorial',
        'Hist√≥ria': '- Periodiza√ß√£o: Antecedentes ‚Üí Evento ‚Üí Consequ√™ncias',
        'L√≠ngua Portuguesa': '- Estrutura frasal: Sujeito + Predicado + Complementos',
        'Reda√ß√£o': '- Estrutura: Introdu√ß√£o (tese) + Desenvolvimento + Conclus√£o'
    }
    return examples.get(subject, '- Princ√≠pio fundamental da √°rea')

def get_advanced_formula_example(subject: str) -> str:
    """Retorna exemplo de f√≥rmula avan√ßada explicativa para cada mat√©ria"""
    examples = {
        'Matem√°tica': '- F√≥rmula de Bhaskara: $x = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$ (resolve equa√ß√µes 2¬∫ grau)',
        'F√≠sica': '- Segunda Lei de Newton: $F = ma$ (for√ßa = massa √ó acelera√ß√£o)',
        'Qu√≠mica': '- Potencial hidrogeni√¥nico: $pH = -\\log[H^+]$ (mede acidez)',
        'Biologia': '- Fotoss√≠ntese: $6CO_2 + 6H_2O \\xrightarrow{luz} C_6H_{12}O_6 + 6O_2$ (produz glicose)',
        'Geografia': '- Taxa de crescimento populacional: $TC = \\frac{P_f - P_i}{P_i} \\times 100$',
        'Hist√≥ria': '- An√°lise multicausal: Fatores econ√¥micos + sociais + pol√≠ticos',
        'L√≠ngua Portuguesa': '- An√°lise sint√°tica: Per√≠odos compostos por coordena√ß√£o/subordina√ß√£o',
        'Reda√ß√£o': '- Estrat√©gias argumentativas: Dados + exemplos + autoridade'
    }
    return examples.get(subject, '- Aplica√ß√£o avan√ßada do conceito')

def get_subject_system_prompt(subject: str) -> str:
    """Retorna prompt de sistema espec√≠fico para cada mat√©ria"""
    prompts = {
        'Matem√°tica': "Voc√™ √© um especialista em educa√ß√£o matem√°tica e mapas mentais.",
        'F√≠sica': "Voc√™ √© um especialista em educa√ß√£o de f√≠sica e mapas mentais, com foco em ENEM.",
        'Qu√≠mica': "Voc√™ √© um especialista em educa√ß√£o de qu√≠mica e mapas mentais, com foco em ENEM.",
        'Biologia': "Voc√™ √© um especialista em educa√ß√£o de biologia e mapas mentais, com foco em ENEM.",
        'Geografia': "Voc√™ √© um especialista em educa√ß√£o de geografia e mapas mentais, com foco em ENEM.",
        'Hist√≥ria': "Voc√™ √© um especialista em educa√ß√£o de hist√≥ria e mapas mentais, com foco em ENEM.",
        'L√≠ngua Portuguesa': "Voc√™ √© um especialista em educa√ß√£o de portugu√™s e mapas mentais, com foco em ENEM.",
        'Reda√ß√£o': "Voc√™ √© um especialista em educa√ß√£o de reda√ß√£o e mapas mentais, com foco em ENEM."
    }
    return prompts.get(subject, "Voc√™ √© um especialista em educa√ß√£o e mapas mentais.")

def get_api_key_for_mindmap():
    """Carrega a chave da API do Streamlit secrets ou vari√°veis de ambiente."""
    # Tenta Streamlit Secrets (para Cloud)
    if hasattr(st, 'secrets') and "GROQ_API_KEY" in st.secrets:
        api_key = st.secrets["GROQ_API_KEY"]
        if api_key and isinstance(api_key, str) and api_key.strip():
            return api_key.strip()
    
    # Fallback para vari√°veis de ambiente (para local)
    api_key = os.environ.get("GROQ_API_KEY")
    if api_key and isinstance(api_key, str) and api_key.strip():
        return api_key.strip()
    
    return None

# Defini√ß√µes de classes para compatibilidade com o hist√≥rico de chat
class HumanMessage:
    def __init__(self, content):
        self.content = content

class AIMessage:
    def __init__(self, content):
        self.content = content 

def display_mapa_mental_markmap():
    """Interface principal do mapa mental usando streamlit-markmap"""
    
    st.markdown("# üß† Mapa Mental Interativo")
    st.markdown("Visualiza√ß√£o din√¢mica dos conceitos relacionados √† sua d√∫vida!")
    
    if not MARKMAP_AVAILABLE:
        st.error("""
        üì¶ **Depend√™ncia n√£o encontrada**
        
        Para usar os mapas mentais, instale a depend√™ncia:
        ```bash
        pip install streamlit-markmap==1.0.1
        ```
        """)
        return
    
    # Verificar se h√° hist√≥rico de chat da mat√©ria atual
    current_subject = st.session_state.get('current_subject', 'Matem√°tica')
    chat_history_key = f"chat_history_{current_subject}"
    chat_history = st.session_state.get(chat_history_key, [])
    
    if not chat_history:
        # Obt√©m informa√ß√µes da mat√©ria atual
        subject_icons = {
            'Matem√°tica': 'üßÆ',
            'F√≠sica': '‚ö°',
            'Qu√≠mica': '‚öóÔ∏è',
            'Biologia': 'üß¨',
            'Geografia': 'üåç',
            'Hist√≥ria': 'üèõÔ∏è',
            'L√≠ngua Portuguesa': 'üìö',
            'Reda√ß√£o': '‚úçÔ∏è'
        }
        
        subject_icon = subject_icons.get(current_subject, 'üìö')
        
        st.info(f"""
        üìù **Como funciona o Mapa Mental:**
        
        1. **üí¨ Fa√ßa uma pergunta** na aba "Chat" para o professor de {current_subject}
        2. **üß† Volte para esta aba** e veja o mapa mental autom√°tico
        3. **üîç Explore os conceitos** de forma visual e interativa
        4. **üîÑ Regenere** se quiser uma nova perspectiva
        
        {subject_icon} **Exemplo para {current_subject}:** 
        - "{get_example_question(current_subject)}" ‚Üí Mapa mental autom√°tico!
        """)
        return
    
    # Obter √∫ltima pergunta do usu√°rio
    ultima_pergunta = obter_ultima_pergunta(chat_history)
    
    if not ultima_pergunta:
        st.warning("üí¨ Fa√ßa uma pergunta na aba Chat primeiro para gerar o mapa mental!")
        return
    
    # Verificar API key
    api_key = get_api_key_for_mindmap()
    if not api_key:
        st.warning("""
        üîë **Configure sua API Key primeiro!**
        
        Sua chave da Groq n√£o foi encontrada. Por favor, configure-a nos Secrets do Streamlit Cloud com o nome `GROQ_API_KEY`.
        """)
        return
    
    # Interface de controle
    col1, col2, col3 = st.columns([3, 1, 1])
    
    with col1:
        st.markdown(f"### üó∫Ô∏è Mapa Mental de {current_subject}")
        with st.expander("üìã Contexto da pergunta", expanded=False):
            st.markdown(f"**Pergunta:** {ultima_pergunta}")
            st.markdown(f"**Mat√©ria:** {current_subject}")
    
    with col2:
        nivel_detalhamento = st.selectbox(
            "N√≠vel:",
            ["B√°sico", "Intermedi√°rio", "Avan√ßado"],
            index=1,
            help="N√≠vel de detalhamento do mapa mental"
        )
    
    with col3:
        # Bot√£o para gerar/regenerar o mapa mental
        if st.button("üß† Gerar Mapa Mental", help="Gerar mapa mental baseado na sua pergunta"):
            # Marcar que o mapa mental deve ser gerado
            st.session_state.gerar_mapa_mental = True
            st.session_state.nivel_mapa_mental = nivel_detalhamento
            st.success("üß† Gerando mapa mental...")
            st.rerun()
    
    # Verificar se o mapa mental deve ser exibido
    if st.session_state.get('gerar_mapa_mental', False):
        # Controles de debug (em expander para n√£o poluir a interface)
        with st.expander("üîß Configura√ß√µes Avan√ßadas (Debug)", expanded=False):
            col_debug1, col_debug2 = st.columns(2)
            
            with col_debug1:
                show_debug = st.checkbox("Mostrar Debug", value=False)
                test_pan = st.checkbox("Testar Pan/Zoom", value=True)
            
            with col_debug2:
                if st.button("üóëÔ∏è Limpar Cache"):
                    # Limpar caches de mapa mental
                    keys_to_remove = [k for k in st.session_state.keys() if 'markmap_' in k or 'first_render_' in k]
                    for key in keys_to_remove:
                        del st.session_state[key]
                    st.success("Cache limpo!")
                    st.rerun()
        
        debug_options = {
            'show_debug': locals().get('show_debug', False),
            'test_pan': locals().get('test_pan', True)
        }
        
        # Exibir mapa mental
        exibir_mapa_mental_markmap(ultima_pergunta, api_key, nivel_detalhamento, debug_options, current_subject)
        
        # Limpar flag ap√≥s exibir
        st.session_state.gerar_mapa_mental = False

def obter_ultima_pergunta(chat_history: List[Any]) -> Optional[str]:
    """Obt√©m a √∫ltima pergunta feita pelo usu√°rio a partir de uma lista de objetos."""
    
    # Itera sobre o hist√≥rico de tr√°s para frente
    for mensagem in reversed(chat_history):
        # Verifica se a mensagem √© uma inst√¢ncia de HumanMessage
        if hasattr(mensagem, '__class__') and mensagem.__class__.__name__ == 'HumanMessage':
            return getattr(mensagem, 'content', '')
            
    return None

def garantir_configuracoes_interatividade(markdown_content: str) -> str:
    """Garante que o markdown tenha configura√ß√µes b√°sicas de interatividade"""
    
    # Configura√ß√µes b√°sicas e compat√≠veis
    config_basica = """---
markmap:
  pan: true
  zoom: true
  initialExpandLevel: 2
  maxWidth: 300
  colorFreezeLevel: 2
  duration: 500
  spacingHorizontal: 80
  spacingVertical: 5
---"""
    
    # Se n√£o tem frontmatter, adicionar
    if not markdown_content.startswith('---'):
        return config_basica + "\n\n" + markdown_content
    
    # Se tem frontmatter, verificar se tem configura√ß√µes b√°sicas
    lines = markdown_content.split('\n')
    yaml_end = -1
    
    # Encontrar o final do YAML
    for i, line in enumerate(lines):
        if i > 0 and line.strip() == '---':
            yaml_end = i
            break
    
    if yaml_end > 0:
        # Extrair YAML existente
        yaml_content = '\n'.join(lines[1:yaml_end])
        remaining_content = '\n'.join(lines[yaml_end+1:])
        
        # Verificar se tem configura√ß√µes b√°sicas
        if 'pan: true' not in yaml_content or 'zoom: true' not in yaml_content:
            # Adicionar configura√ß√µes b√°sicas se faltarem
            yaml_content += '\n  pan: true\n  zoom: true'
        
        # Reconstruir markdown
        return f"""---
markmap:
{yaml_content}
---

{remaining_content}"""
    
    # Fallback: adicionar configura√ß√µes b√°sicas
    return config_basica + "\n\n" + markdown_content 

def exibir_mapa_mental_markmap(pergunta: str, api_key: str, nivel: str, debug_options: dict = None, current_subject: str = 'Matem√°tica'):
    """Gera e exibe o mapa mental usando streamlit-markmap"""
    
    if debug_options is None:
        debug_options = {'show_debug': False, 'test_pan': True}
    
    # Cache baseado na pergunta, n√≠vel e mat√©ria
    cache_key = f"markmap_{hash(pergunta)}_{nivel}_{current_subject}"
    
    # Verificar se √© a primeira renderiza√ß√£o para esta pergunta
    first_render_key = f"first_render_{cache_key}"
    is_first_render = first_render_key not in st.session_state
    
    # Verificar cache
    if cache_key not in st.session_state:
        with st.spinner("üß† Gerando mapa mental interativo..."):
            markdown_content = gerar_markdown_mapa_mental(pergunta, api_key, nivel, current_subject)
            st.session_state[cache_key] = markdown_content
            # Marcar que n√£o √© mais a primeira renderiza√ß√£o
            st.session_state[first_render_key] = False
    else:
        markdown_content = st.session_state[cache_key]
    
    if markdown_content:
        # Exibir estat√≠sticas do mapa
        stats = analisar_markdown_stats(markdown_content)
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üìä Conceitos", stats['conceitos'])
        with col2:
            st.metric("üîó Conex√µes", stats['conexoes'])
        with col3:
            st.metric("üìö N√≠veis", stats['niveis'])
        with col4:
            st.metric("üßÆ F√≥rmulas", stats['formulas'])
        
        st.markdown("---")
        
        # Debug info (se habilitado)
        if debug_options.get('show_debug', False):
            with st.expander("üîç Debug Info - Markdown Gerado", expanded=False):
                st.code(markdown_content, language="markdown")
                
                # Verificar se cont√©m configura√ß√µes de pan/zoom
                has_pan = 'pan:' in markdown_content
                has_zoom = 'zoom:' in markdown_content
                
                st.write(f"‚úÖ Cont√©m 'pan:': {has_pan}")
                st.write(f"‚úÖ Cont√©m 'zoom:': {has_zoom}")
                st.write(f"üîÑ Primeira renderiza√ß√£o: {is_first_render}")
                
                if not has_pan or not has_zoom:
                    st.warning("‚ö†Ô∏è Configura√ß√µes de pan/zoom podem estar faltando!")
        
        # Garantir que as configura√ß√µes de interatividade estejam presentes
        markdown_content = garantir_configuracoes_interatividade(markdown_content)
        
        # Renderizar mapa mental
        markmap(markdown_content, height=600)
    else:
        st.error("‚ùå Erro ao gerar mapa mental. Tente novamente.")

def gerar_markdown_mapa_mental(pergunta: str, api_key: str, nivel: str, current_subject: str) -> str:
    """Gera o conte√∫do markdown do mapa mental usando IA com RAG"""
    
    try:
        # Detectar t√≥pico espec√≠fico da pergunta ANTES de gerar o prompt
        topico_especifico = extrair_topico_especifico(pergunta, current_subject)
        
        # INTEGRA√á√ÉO COM RAG - Buscar conte√∫do real do Hugging Face
        rag_content = buscar_conteudo_rag(pergunta, current_subject, api_key)
        
        # Configura√ß√µes por n√≠vel com diferen√ßas REAIS
        nivel_config = {
            "B√°sico": {
                "conceitos": 3,
                "profundidade": 2,
                "detalhes": "defini√ß√µes b√°sicas",
                "expansion": "initialExpandLevel: 1",
                "style": "conceitos fundamentais apenas"
            },
            "Intermedi√°rio": {
                "conceitos": 6,
                "profundidade": 3,
                "detalhes": "f√≥rmulas e aplica√ß√µes",
                "expansion": "initialExpandLevel: 2", 
                "style": "m√©todos e estrat√©gias"
            },
            "Avan√ßado": {
                "conceitos": 12,
                "profundidade": 4,
                "detalhes": "demonstra√ß√µes e conex√µes profundas",
                "expansion": "initialExpandLevel: 3",
                "style": "an√°lise completa e aplica√ß√µes complexas"
            }
        }
        
        config = nivel_config.get(nivel, nivel_config["Intermedi√°rio"])
        
        client = Groq(api_key=api_key)
        
        # Prompt completamente reformulado para ser OBJETIVO e EXPLICATIVO
        prompt = f"""
Voc√™ √© um especialista em educa√ß√£o para ENEM. Crie um mapa mental EXPLICATIVO sobre "{topico_especifico}" para uma estudante de 17 anos.

**PERGUNTA DA ESTUDANTE:** "{pergunta}"
**T√ìPICO:** {topico_especifico}
**N√çVEL:** {nivel}
**AMBIENTE:** Streamlit Cloud (usar conhecimento direto)

**CONTE√öDO ESPEC√çFICO:**
{rag_content}

**REGRAS OBRIGAT√ìRIAS:**

1. **M√ÅXIMO 4 N√çVEIS HIER√ÅRQUICOS** (# ‚Üí ## ‚Üí ### ‚Üí ####)
2. **SEM PERGUNTAS** - apenas EXPLICA√á√ïES diretas
3. **SEM MEN√á√ïES VAGAS** - explique sempre os conceitos
4. **LINGUAGEM CLARA** para estudante de 17 anos
5. **INFORMA√á√ïES ESPEC√çFICAS** baseadas no seu conhecimento especializado

**ESTRUTURA OBRIGAT√ìRIA:**

```
---
markmap:
  initialExpandLevel: 2
  maxWidth: 300
---

# üéØ {topico_especifico}

## üìö Defini√ß√£o
- [Explica√ß√£o clara do que √© o conceito]
- [Por que √© importante no ENEM]

## üîç Caracter√≠sticas Principais  
- [Caracter√≠stica 1 explicada]
- [Caracter√≠stica 2 explicada]
- [F√≥rmula se aplic√°vel: $formula$]

## üéØ Como Funciona
### [Processo/Etapa 1]
- [Explica√ß√£o detalhada]
### [Processo/Etapa 2] 
- [Explica√ß√£o detalhada]

## üí° Aplica√ß√µes no ENEM
- [Tipo de quest√£o 1 + exemplo]
- [Tipo de quest√£o 2 + exemplo]
- [Dica espec√≠fica para resolver]
```

**FOCO ESPECIAL:**
Para FOTOSS√çNTESE: Explique as duas fases (clara e escura), cloroplastos, equa√ß√£o qu√≠mica completa.
Para outros t√≥picos: Use seu conhecimento especializado em {current_subject}.

**EXEMPLO DO QUE FAZER:**
‚úÖ "## Respira√ß√£o Celular
- Processo que transforma glicose em energia (ATP)
- Ocorre nas mitoc√¥ndrias das c√©lulas
- F√≥rmula: $C_6H_{12}O_6 + 6O_2 ‚Üí 6CO_2 + 6H_2O + ATP$"

**EXEMPLO DO QUE N√ÉO FAZER:**
‚ùå "## O que √© respira√ß√£o celular?"
‚ùå "## Contexto hist√≥rico" (sem explicar qual contexto)

Agora crie o mapa explicativo focado especificamente em {topico_especifico}:
"""
        
        # Usar modelo mais recente e est√°vel
        response = client.chat.completions.create(
            model="llama-3.2-90b-text-preview",
            messages=[
                {"role": "system", "content": f"{get_subject_system_prompt(current_subject)} Voc√™ est√° criando um mapa mental explicativo para Sther, de 17 anos, que vai prestar ENEM. Seja preciso e direcionado ao t√≥pico da pergunta."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.1   # Muito baixo para m√°xima consist√™ncia e foco
        )
        
        markdown_content = response.choices[0].message.content.strip()
        
        # Limpar e validar o markdown
        markdown_content = limpar_markdown(markdown_content)
        
        # Validar se o conte√∫do √© espec√≠fico (verificar se menciona o t√≥pico)
        if not validar_especificidade_mapa(markdown_content, topico_especifico):
            # Se n√£o for espec√≠fico, usar vers√£o b√°sica espec√≠fica
            markdown_content = criar_mapa_mental_especifico(pergunta, topico_especifico, nivel, current_subject)
        
        # Se ainda n√£o conseguiu gerar conte√∫do adequado, usar fallback
        if not markdown_content or len(markdown_content) < 100:
            markdown_content = criar_mapa_mental_especifico(pergunta, topico_especifico, nivel, current_subject)
        
        return markdown_content
        
    except Exception as e:
        # Melhor tratamento de erro com fallback espec√≠fico
        error_msg = str(e)
        
        # N√£o mostrar erros de importa√ß√£o FAISS no Streamlit Cloud
        if "faiss" in error_msg.lower() or "no such file" in error_msg.lower():
            st.info("üåê Usando modo cloud - gerando mapa mental espec√≠fico...")
        elif "decommissioned" in error_msg or "model_decommissioned" in error_msg:
            st.error("üîß **Modelo de IA atualizado necess√°rio** - usando mapa mental espec√≠fico")
        else:
            st.warning(f"‚ö†Ô∏è Erro na gera√ß√£o via IA: {error_msg[:100]}... - usando mapa mental espec√≠fico")
        
        # Fallback que tamb√©m √© espec√≠fico
        topico_especifico = extrair_topico_especifico(pergunta, current_subject)
        return criar_mapa_mental_especifico(pergunta, topico_especifico, nivel, current_subject)

def limpar_markdown(texto: str) -> str:
    """Limpa e valida o conte√∫do markdown"""
    
    # Remover blocos de c√≥digo markdown se existirem
    texto = re.sub(r'```markdown\n?', '', texto)
    texto = re.sub(r'```\n?', '', texto)
    
    # Garantir que come√ßa com #
    linhas = texto.split('\n')
    if linhas and not linhas[0].strip().startswith('#'):
        # Procurar primeira linha com #
        for i, linha in enumerate(linhas):
            if linha.strip().startswith('#'):
                texto = '\n'.join(linhas[i:])
                break
    
    return texto.strip() 

def extrair_topico_especifico(pergunta: str, current_subject: str) -> str:
    """Extrai o t√≥pico espec√≠fico da pergunta com detec√ß√£o avan√ßada para TODAS as mat√©rias do ENEM"""
    pergunta_lower = pergunta.lower()
    
    # MATEM√ÅTICA - Cobertura completa dos t√≥picos ENEM
    if current_subject == 'Matem√°tica':
        # √Ålgebra
        if any(palavra in pergunta_lower for palavra in ['equa√ß√£o', 'equacao', 'primeiro grau', 'linear']):
            return 'Equa√ß√µes do 1¬∫ Grau'
        elif any(palavra in pergunta_lower for palavra in ['segundo grau', 'bhaskara', 'quadr√°tica', 'par√°bola']):
            return 'Equa√ß√µes do 2¬∫ Grau'
        elif any(palavra in pergunta_lower for palavra in ['sistema', 'linear', 'substitui√ß√£o', 'elimina√ß√£o']):
            return 'Sistemas de Equa√ß√µes'
        elif any(palavra in pergunta_lower for palavra in ['inequa√ß√£o', 'inequacao', 'desigualdade']):
            return 'Inequa√ß√µes'
        
        # Fun√ß√µes
        elif any(palavra in pergunta_lower for palavra in ['fun√ß√£o', 'funcao', 'dom√≠nio', 'imagem']):
            return 'Fun√ß√µes'
        elif any(palavra in pergunta_lower for palavra in ['afim', 'linear', 'coeficiente angular']):
            return 'Fun√ß√£o Afim'
        elif any(palavra in pergunta_lower for palavra in ['quadr√°tica', 'parabola', 'v√©rtice']):
            return 'Fun√ß√£o Quadr√°tica'
        elif any(palavra in pergunta_lower for palavra in ['exponencial', 'crescimento', 'decaimento']):
            return 'Fun√ß√£o Exponencial'
        elif any(palavra in pergunta_lower for palavra in ['logaritmo', 'log', 'logar√≠tmica']):
            return 'Logaritmos'
        
        # Trigonometria
        elif any(palavra in pergunta_lower for palavra in ['trigonometria', 'seno', 'cosseno', 'tangente']):
            return 'Trigonometria'
        elif any(palavra in pergunta_lower for palavra in ['c√≠rculo trigonom√©trico', 'radianos', 'graus']):
            return 'C√≠rculo Trigonom√©trico'
        
        # Geometria
        elif any(palavra in pergunta_lower for palavra in ['√°rea', 'per√≠metro', 'geometria plana']):
            return 'Geometria Plana'
        elif any(palavra in pergunta_lower for palavra in ['volume', 'prisma', 'pir√¢mide', 'cilindro', 'cone', 'esfera']):
            return 'Geometria Espacial'
        elif any(palavra in pergunta_lower for palavra in ['tri√¢ngulo', 'teorema de pit√°goras', 'pitagoras']):
            return 'Tri√¢ngulos'
        elif any(palavra in pergunta_lower for palavra in ['circunfer√™ncia', 'c√≠rculo', 'pi']):
            return 'C√≠rculo e Circunfer√™ncia'
        
        # √Ålgebra Linear
        elif any(palavra in pergunta_lower for palavra in ['matriz', 'matrizes', 'determinante']):
            return 'Matrizes e Determinantes'
        
        # Estat√≠stica
        elif any(palavra in pergunta_lower for palavra in ['m√©dia', 'mediana', 'moda', 'estat√≠stica']):
            return 'Estat√≠stica'
        elif any(palavra in pergunta_lower for palavra in ['probabilidade', 'chance', 'evento']):
            return 'Probabilidade'
        elif any(palavra in pergunta_lower for palavra in ['combina√ß√£o', 'arranjo', 'permuta√ß√£o']):
            return 'An√°lise Combinat√≥ria'
        
        # Progress√µes
        elif any(palavra in pergunta_lower for palavra in ['progress√£o aritm√©tica', 'pa']):
            return 'Progress√£o Aritm√©tica'
        elif any(palavra in pergunta_lower for palavra in ['progress√£o geom√©trica', 'pg']):
            return 'Progress√£o Geom√©trica'
    
    # F√çSICA - Cobertura completa dos t√≥picos ENEM
    elif current_subject == 'F√≠sica':
        # Mec√¢nica
        if any(palavra in pergunta_lower for palavra in ['velocidade', 'acelera√ß√£o', 'movimento uniforme']):
            return 'Cinem√°tica'
        elif any(palavra in pergunta_lower for palavra in ['for√ßa', 'newton', 'din√¢mica', 'leis de newton']):
            return 'Din√¢mica'
        elif any(palavra in pergunta_lower for palavra in ['trabalho', 'energia', 'pot√™ncia', 'conserva√ß√£o']):
            return 'Energia e Trabalho'
        elif any(palavra in pergunta_lower for palavra in ['impulso', 'quantidade de movimento', 'colis√£o']):
            return 'Impulso e Quantidade de Movimento'
        elif any(palavra in pergunta_lower for palavra in ['gravita√ß√£o', 'gravidade', 'kepler']):
            return 'Gravita√ß√£o Universal'
        elif any(palavra in pergunta_lower for palavra in ['est√°tica', 'equil√≠brio', 'alavanca']):
            return 'Est√°tica'
        
        # Termologia
        elif any(palavra in pergunta_lower for palavra in ['temperatura', 'calor', 'term√¥metro']):
            return 'Temperatura e Calor'
        elif any(palavra in pergunta_lower for palavra in ['dilata√ß√£o', 'expans√£o t√©rmica']):
            return 'Dilata√ß√£o T√©rmica'
        elif any(palavra in pergunta_lower for palavra in ['calorimetria', 'capacidade t√©rmica']):
            return 'Calorimetria'
        elif any(palavra in pergunta_lower for palavra in ['termodin√¢mica', 'm√°quina t√©rmica', 'ciclo']):
            return 'Termodin√¢mica'
        elif any(palavra in pergunta_lower for palavra in ['mudan√ßa de estado', 'fus√£o', 'vaporiza√ß√£o']):
            return 'Mudan√ßas de Estado'
        
        # √ìptica
        elif any(palavra in pergunta_lower for palavra in ['luz', 'reflex√£o', 'refra√ß√£o']):
            return '√ìptica Geom√©trica'
        elif any(palavra in pergunta_lower for palavra in ['espelho', 'lente', 'imagem']):
            return 'Espelhos e Lentes'
        
        # Ondulat√≥ria
        elif any(palavra in pergunta_lower for palavra in ['onda', 'ondas', 'frequ√™ncia', 'amplitude']):
            return 'Ondulat√≥ria'
        elif any(palavra in pergunta_lower for palavra in ['som', 'ac√∫stica', 'eco']):
            return 'Ac√∫stica'
        
        # Eletricidade
        elif any(palavra in pergunta_lower for palavra in ['corrente', 'tens√£o', 'resist√™ncia', 'ohm']):
            return 'Eletricidade B√°sica'
        elif any(palavra in pergunta_lower for palavra in ['circuito', 'lei de ohm', 'resistor']):
            return 'Circuitos El√©tricos'
        elif any(palavra in pergunta_lower for palavra in ['campo el√©trico', 'carga', 'coulomb']):
            return 'Campo El√©trico'
        elif any(palavra in pergunta_lower for palavra in ['campo magn√©tico', '√≠m√£', 'magnetismo']):
            return 'Magnetismo'
        elif any(palavra in pergunta_lower for palavra in ['indu√ß√£o', 'gerador', 'motor']):
            return 'Indu√ß√£o Eletromagn√©tica'
        
        # F√≠sica Moderna
        elif any(palavra in pergunta_lower for palavra in ['relatividade', 'einstein', 'qu√¢ntica']):
            return 'F√≠sica Moderna'
    
    # QU√çMICA - Cobertura completa dos t√≥picos ENEM
    elif current_subject == 'Qu√≠mica':
        # Qu√≠mica Geral
        if any(palavra in pergunta_lower for palavra in ['√°tomo', 'atomo', 'pr√≥ton', 'n√™utron', 'el√©tron']):
            return 'Estrutura At√¥mica'
        elif any(palavra in pergunta_lower for palavra in ['tabela peri√≥dica', 'elemento', 'propriedades peri√≥dicas']):
            return 'Tabela Peri√≥dica'
        elif any(palavra in pergunta_lower for palavra in ['liga√ß√£o', 'ligacao', 'i√¥nica', 'covalente', 'met√°lica']):
            return 'Liga√ß√µes Qu√≠micas'
        elif any(palavra in pergunta_lower for palavra in ['geometria molecular', 'hibridiza√ß√£o', 'polaridade']):
            return 'Geometria Molecular'
        
        # F√≠sico-Qu√≠mica
        elif any(palavra in pergunta_lower for palavra in ['mol', 'massa molar', 'avogadro']):
            return 'Quantidade de Mat√©ria'
        elif any(palavra in pergunta_lower for palavra in ['solu√ß√£o', 'solu√ßao', 'concentra√ß√£o', 'molaridade']):
            return 'Solu√ß√µes'
        elif any(palavra in pergunta_lower for palavra in ['termoqu√≠mica', 'entalpia', 'calor de rea√ß√£o']):
            return 'Termoqu√≠mica'
        elif any(palavra in pergunta_lower for palavra in ['cin√©tica', 'velocidade de rea√ß√£o', 'catalisador']):
            return 'Cin√©tica Qu√≠mica'
        elif any(palavra in pergunta_lower for palavra in ['equil√≠brio', 'equilibrio', 'constante', 'le chatelier']):
            return 'Equil√≠brio Qu√≠mico'
        elif any(palavra in pergunta_lower for palavra in ['eletroqu√≠mica', 'pilha', 'eletr√≥lise']):
            return 'Eletroqu√≠mica'
        
        # Qu√≠mica Inorg√¢nica
        elif any(palavra in pergunta_lower for palavra in ['√°cido', 'base', 'ph', 'neutraliza√ß√£o']):
            return '√Åcidos e Bases'
        elif any(palavra in pergunta_lower for palavra in ['sal', '√≥xido', 'hidreto']):
            return 'Fun√ß√µes Inorg√¢nicas'
        elif any(palavra in pergunta_lower for palavra in ['rea√ß√£o', 'reacao', 'balanceamento', 'estequiometria']):
            return 'Rea√ß√µes Qu√≠micas'
        
        # Qu√≠mica Org√¢nica
        elif any(palavra in pergunta_lower for palavra in ['carbono', 'org√¢nica', 'organica', 'cadeia carb√¥nica']):
            return 'Qu√≠mica Org√¢nica'
        elif any(palavra in pergunta_lower for palavra in ['hidrocarboneto', 'alcano', 'alceno', 'alcino']):
            return 'Hidrocarbonetos'
        elif any(palavra in pergunta_lower for palavra in ['√°lcool', 'alde√≠do', 'cetona', '√°cido carbox√≠lico']):
            return 'Fun√ß√µes Org√¢nicas'
        elif any(palavra in pergunta_lower for palavra in ['isomeria', 'is√¥mero']):
            return 'Isomeria'
        elif any(palavra in pergunta_lower for palavra in ['pol√≠mero', 'pl√°stico', 'polimeriza√ß√£o']):
            return 'Pol√≠meros'
        
        # Bioqu√≠mica
        elif any(palavra in pergunta_lower for palavra in ['prote√≠na', 'amino√°cido', 'enzima']):
            return 'Bioqu√≠mica'
    
    # BIOLOGIA - Cobertura completa dos t√≥picos ENEM
    elif current_subject == 'Biologia':
        # Citologia
        if any(palavra in pergunta_lower for palavra in ['c√©lula', 'celula', 'membrana', 'organela']):
            return 'Citologia'
        elif any(palavra in pergunta_lower for palavra in ['mitose', 'meiose', 'divis√£o celular']):
            return 'Divis√£o Celular'
        elif any(palavra in pergunta_lower for palavra in ['fotoss√≠ntese', 'fotossintese', 'cloroplasto']):
            return 'Fotoss√≠ntese'
        elif any(palavra in pergunta_lower for palavra in ['respira√ß√£o celular', 'mitoc√¥ndria', 'atp']):
            return 'Respira√ß√£o Celular'
        
        # Gen√©tica
        elif any(palavra in pergunta_lower for palavra in ['dna', 'rna', 'gene', 'cromossomo']):
            return 'Gen√©tica Molecular'
        elif any(palavra in pergunta_lower for palavra in ['mendel', 'dominante', 'recessivo', 'hereditariedade']):
            return 'Gen√©tica Cl√°ssica'
        elif any(palavra in pergunta_lower for palavra in ['muta√ß√£o', 'evolu√ß√£o', 'sele√ß√£o natural']):
            return 'Evolu√ß√£o'
        
        # Fisiologia
        elif any(palavra in pergunta_lower for palavra in ['sistema nervoso', 'neur√¥nio', 'impulso']):
            return 'Sistema Nervoso'
        elif any(palavra in pergunta_lower for palavra in ['sistema circulat√≥rio', 'cora√ß√£o', 'sangue']):
            return 'Sistema Circulat√≥rio'
        elif any(palavra in pergunta_lower for palavra in ['sistema digest√≥rio', 'digest√£o', 'enzima digestiva']):
            return 'Sistema Digest√≥rio'
        elif any(palavra in pergunta_lower for palavra in ['sistema respirat√≥rio', 'pulm√£o', 'respira√ß√£o']):
            return 'Sistema Respirat√≥rio'
        elif any(palavra in pergunta_lower for palavra in ['sistema reprodutor', 'reprodu√ß√£o', 'horm√¥nio']):
            return 'Sistema Reprodutor'
        
        # Ecologia
        elif any(palavra in pergunta_lower for palavra in ['ecologia', 'ecosystem', 'cadeia alimentar', 'teia']):
            return 'Ecologia'
        elif any(palavra in pergunta_lower for palavra in ['popula√ß√£o', 'comunidade', 'bioma']):
            return 'Ecossistemas'
        elif any(palavra in pergunta_lower for palavra in ['polui√ß√£o', 'aquecimento global', 'sustentabilidade']):
            return 'Impactos Ambientais'
        
        # Bot√¢nica
        elif any(palavra in pergunta_lower for palavra in ['planta', 'flor', 'fruto', 'semente']):
            return 'Bot√¢nica'
        
        # Zoologia
        elif any(palavra in pergunta_lower for palavra in ['animal', 'vertebrado', 'invertebrado']):
            return 'Zoologia'
        
        # Microbiologia
        elif any(palavra in pergunta_lower for palavra in ['bact√©ria', 'v√≠rus', 'fungo', 'protozo√°rio']):
            return 'Microbiologia'
    
    # GEOGRAFIA - Cobertura completa dos t√≥picos ENEM
    elif current_subject == 'Geografia':
        # Geografia F√≠sica
        if any(palavra in pergunta_lower for palavra in ['clima', 'temperatura', 'chuva', 'precipita√ß√£o']):
            return 'Climatologia'
        elif any(palavra in pergunta_lower for palavra in ['relevo', 'montanha', 'plan√≠cie', 'planalto']):
            return 'Geomorfologia'
        elif any(palavra in pergunta_lower for palavra in ['solo', 'eros√£o', 'intemperismo']):
            return 'Pedologia'
        elif any(palavra in pergunta_lower for palavra in ['rio', 'bacia hidrogr√°fica', '√°gua']):
            return 'Hidrografia'
        elif any(palavra in pergunta_lower for palavra in ['vegeta√ß√£o', 'bioma', 'floresta', 'cerrado']):
            return 'Biogeografia'
        
        # Geografia Humana
        elif any(palavra in pergunta_lower for palavra in ['popula√ß√£o', 'demografia', 'migra√ß√£o', 'natalidade']):
            return 'Geografia da Popula√ß√£o'
        elif any(palavra in pergunta_lower for palavra in ['cidade', 'urbano', 'metr√≥pole', 'urbaniza√ß√£o']):
            return 'Geografia Urbana'
        elif any(palavra in pergunta_lower for palavra in ['agricultura', 'rural', 'agropecu√°ria']):
            return 'Geografia Agr√°ria'
        elif any(palavra in pergunta_lower for palavra in ['ind√∫stria', 'industrial', 'produ√ß√£o']):
            return 'Geografia Industrial'
        
        # Geografia Regional
        elif any(palavra in pergunta_lower for palavra in ['brasil', 'regi√£o', 'nordeste', 'sudeste']):
            return 'Geografia do Brasil'
        elif any(palavra in pergunta_lower for palavra in ['globaliza√ß√£o', 'mundial', 'internacional']):
            return 'Geografia Mundial'
        
        # Cartografia
        elif any(palavra in pergunta_lower for palavra in ['mapa', 'escala', 'coordenada', 'gps']):
            return 'Cartografia'
        
        # Geopol√≠tica
        elif any(palavra in pergunta_lower for palavra in ['fronteira', 'territ√≥rio', 'geopol√≠tica']):
            return 'Geopol√≠tica'
    
    # HIST√ìRIA - Cobertura completa dos t√≥picos ENEM
    elif current_subject == 'Hist√≥ria':
        # Hist√≥ria Antiga
        if any(palavra in pergunta_lower for palavra in ['gr√©cia', 'roma', 'antiguidade']):
            return 'Hist√≥ria Antiga'
        
        # Hist√≥ria Medieval
        elif any(palavra in pergunta_lower for palavra in ['idade m√©dia', 'feudalismo', 'medieval']):
            return 'Idade M√©dia'
        
        # Hist√≥ria Moderna
        elif any(palavra in pergunta_lower for palavra in ['renascimento', 'reforma protestante', 'absolutismo']):
            return 'Hist√≥ria Moderna'
        elif any(palavra in pergunta_lower for palavra in ['grandes navega√ß√µes', 'descobrimento', 'coloniza√ß√£o']):
            return 'Grandes Navega√ß√µes'
        elif any(palavra in pergunta_lower for palavra in ['revolu√ß√£o francesa', 'iluminismo', 'robespierre']):
            return 'Revolu√ß√£o Francesa'
        elif any(palavra in pergunta_lower for palavra in ['revolu√ß√£o industrial', 'm√°quina a vapor']):
            return 'Revolu√ß√£o Industrial'
        
        # Hist√≥ria Contempor√¢nea
        elif any(palavra in pergunta_lower for palavra in ['primeira guerra', 'guerra mundial']):
            return 'Primeira Guerra Mundial'
        elif any(palavra in pergunta_lower for palavra in ['segunda guerra', 'nazismo', 'hitler']):
            return 'Segunda Guerra Mundial'
        elif any(palavra in pergunta_lower for palavra in ['guerra fria', 'capitalismo', 'socialismo', 'urss']):
            return 'Guerra Fria'
        
        # Hist√≥ria do Brasil
        elif any(palavra in pergunta_lower for palavra in ['brasil col√¥nia', 'colonial', 'capitanias']):
            return 'Brasil Colonial'
        elif any(palavra in pergunta_lower for palavra in ['independ√™ncia', 'dom pedro', '1822']):
            return 'Independ√™ncia do Brasil'
        elif any(palavra in pergunta_lower for palavra in ['imp√©rio', 'dom pedro ii', 'monarquia']):
            return 'Brasil Imp√©rio'
        elif any(palavra in pergunta_lower for palavra in ['rep√∫blica', 'proclama√ß√£o da rep√∫blica']):
            return 'Rep√∫blica Brasileira'
        elif any(palavra in pergunta_lower for palavra in ['get√∫lio vargas', 'era vargas', 'estado novo']):
            return 'Era Vargas'
        elif any(palavra in pergunta_lower for palavra in ['ditadura militar', 'golpe de 64', 'ai-5']):
            return 'Ditadura Militar'
        elif any(palavra in pergunta_lower for palavra in ['redemocratiza√ß√£o', 'constitui√ß√£o de 88']):
            return 'Nova Rep√∫blica'
        
        # Escravid√£o
        elif any(palavra in pergunta_lower for palavra in ['escravid√£o', 'aboli√ß√£o', 'lei √°urea', 'quilombo']):
            return 'Escravid√£o no Brasil'
    
    # L√çNGUA PORTUGUESA - Cobertura completa dos t√≥picos ENEM
    elif current_subject == 'L√≠ngua Portuguesa':
        # Gram√°tica
        if any(palavra in pergunta_lower for palavra in ['sintaxe', 'sujeito', 'predicado', 'complemento']):
            return 'Sintaxe'
        elif any(palavra in pergunta_lower for palavra in ['morfologia', 'substantivo', 'adjetivo', 'verbo']):
            return 'Morfologia'
        elif any(palavra in pergunta_lower for palavra in ['crase', 'acento', 'ortografia']):
            return 'Ortografia e Acentua√ß√£o'
        elif any(palavra in pergunta_lower for palavra in ['concord√¢ncia', 'verbal', 'nominal']):
            return 'Concord√¢ncia'
        elif any(palavra in pergunta_lower for palavra in ['reg√™ncia', 'preposi√ß√£o']):
            return 'Reg√™ncia'
        elif any(palavra in pergunta_lower for palavra in ['pontua√ß√£o', 'v√≠rgula', 'ponto']):
            return 'Pontua√ß√£o'
        
        # Estil√≠stica
        elif any(palavra in pergunta_lower for palavra in ['figura de linguagem', 'met√°fora', 'meton√≠mia']):
            return 'Figuras de Linguagem'
        elif any(palavra in pergunta_lower for palavra in ['fun√ß√£o da linguagem', 'emotiva', 'referencial']):
            return 'Fun√ß√µes da Linguagem'
        
        # Literatura
        elif any(palavra in pergunta_lower for palavra in ['literatura', 'movimento liter√°rio']):
            return 'Literatura Brasileira'
        elif any(palavra in pergunta_lower for palavra in ['barroco', 'greg√≥rio de matos']):
            return 'Barroco'
        elif any(palavra in pergunta_lower for palavra in ['arcadismo', '√°rcade']):
            return 'Arcadismo'
        elif any(palavra in pergunta_lower for palavra in ['romantismo', 'jos√© de alencar', 'gon√ßalves dias']):
            return 'Romantismo'
        elif any(palavra in pergunta_lower for palavra in ['realismo', 'machado de assis']):
            return 'Realismo'
        elif any(palavra in pergunta_lower for palavra in ['parnasianismo', 'olavo bilac']):
            return 'Parnasianismo'
        elif any(palavra in pergunta_lower for palavra in ['simbolismo', 'cruz e sousa']):
            return 'Simbolismo'
        elif any(palavra in pergunta_lower for palavra in ['modernismo', 'semana de arte moderna', 'm√°rio de andrade']):
            return 'Modernismo'
        
        # Interpreta√ß√£o
        elif any(palavra in pergunta_lower for palavra in ['interpreta√ß√£o', 'texto', 'leitura', 'compreens√£o']):
            return 'Interpreta√ß√£o de Textos'
        elif any(palavra in pergunta_lower for palavra in ['g√™nero textual', 'cr√¥nica', 'artigo']):
            return 'G√™neros Textuais'
    
    # REDA√á√ÉO - T√≥picos espec√≠ficos
    elif current_subject == 'Reda√ß√£o':
        if any(palavra in pergunta_lower for palavra in ['disserta√ß√£o', 'argumenta√ß√£o', 'enem']):
            return 'Disserta√ß√£o Argumentativa'
        elif any(palavra in pergunta_lower for palavra in ['introdu√ß√£o', 'tese', 'contextualiza√ß√£o']):
            return 'Introdu√ß√£o'
        elif any(palavra in pergunta_lower for palavra in ['desenvolvimento', 'argumento', 'fundamenta√ß√£o']):
            return 'Desenvolvimento'
        elif any(palavra in pergunta_lower for palavra in ['conclus√£o', 'proposta', 'interven√ß√£o']):
            return 'Conclus√£o'
        elif any(palavra in pergunta_lower for palavra in ['coes√£o', 'coer√™ncia', 'conectivo']):
            return 'Coes√£o e Coer√™ncia'
    
    # Fallback inteligente: extrair palavras-chave da pergunta
    palavras = pergunta.split()
    if len(palavras) > 1:
        # Pegar palavras importantes (substantivos geralmente)
        palavras_importantes = []
        for palavra in palavras[:3]:  # Primeiras 3 palavras
            palavra_limpa = palavra.lower().strip('.,?!')
            if len(palavra_limpa) > 3 and palavra_limpa not in ['como', 'qual', 'onde', 'quando', 'quem', 'para', 'sobre']:
                palavras_importantes.append(palavra_limpa.title())
        
        if palavras_importantes:
            return ' '.join(palavras_importantes[:2])
    
    return current_subject

def buscar_conteudo_rag(pergunta: str, current_subject: str, api_key: str) -> str:
    """Busca conte√∫do espec√≠fico usando o sistema RAG dos professores"""
    try:
        # No ambiente Streamlit Cloud, usar sempre o fallback espec√≠fico
        # para evitar erros de carregamento dos √≠ndices FAISS
        if hasattr(st, 'secrets'):  # Detecta ambiente Streamlit Cloud
            return f"T√ìPICO ESPEC√çFICO: {extrair_topico_especifico(pergunta, current_subject)} - Conte√∫do direcionado para ENEM"
        
        # Importar o sistema RAG apropriado baseado na mat√©ria (apenas local)
        rag_system = None
        
        if current_subject == 'Matem√°tica':
            from local_math_rag import get_local_math_rag_instance
            rag_system = get_local_math_rag_instance()
        elif current_subject == 'F√≠sica':
            from local_physics_rag import LocalphysicsRAG
            rag_system = LocalphysicsRAG()
        elif current_subject == 'Qu√≠mica':
            from local_chemistry_rag import LocalChemistryRAG
            rag_system = LocalChemistryRAG()
        elif current_subject == 'Biologia':
            from local_biology_rag import LocalBiologyRAG
            rag_system = LocalBiologyRAG()
        elif current_subject == 'Geografia':
            from local_geography_rag import LocalGeographyRAG
            rag_system = LocalGeographyRAG()
        elif current_subject == 'Hist√≥ria':
            from local_history_rag import LocalHistoryRAG
            rag_system = LocalHistoryRAG()
        elif current_subject == 'L√≠ngua Portuguesa':
            from local_portuguese_rag import LocalPortugueseRAG
            rag_system = LocalPortugueseRAG()
        
        if rag_system:
            # Inicializar o sistema RAG com timeout curto
            success = rag_system.initialize(api_key)
            if success:
                # Buscar conte√∫do relevante
                docs = rag_system.search_relevant_content(pergunta, k=3)
                if docs:
                    # Concatenar conte√∫do dos documentos encontrados
                    conteudo = "\n\n".join([doc.page_content[:500] for doc in docs])
                    return f"CONTE√öDO ESPEC√çFICO ENCONTRADO:\n{conteudo}"
        
        # Fallback se n√£o conseguir usar RAG
        return f"T√ìPICO ESPEC√çFICO: {extrair_topico_especifico(pergunta, current_subject)} - Conte√∫do direcionado para ENEM"
        
    except Exception as e:
        # Fallback silencioso em caso de erro (sem logs desnecess√°rios)
        return f"T√ìPICO ESPEC√çFICO: {extrair_topico_especifico(pergunta, current_subject)} - Conte√∫do direcionado para ENEM"

def validar_especificidade_mapa(markdown_content: str, topico_especifico: str) -> bool:
    """Valida se o mapa mental √© espec√≠fico ao t√≥pico identificado"""
    if not markdown_content or not topico_especifico:
        return False
    return topico_especifico.lower() in markdown_content.lower()

def criar_mapa_mental_especifico(pergunta: str, topico_especifico: str, nivel: str, current_subject: str) -> str:
    """Cria um mapa mental espec√≠fico e explicativo para qualquer t√≥pico de qualquer mat√©ria do ENEM"""
    
    # Emojis por mat√©ria
    emoji_materia = {
        'Matem√°tica': 'üßÆ', 'F√≠sica': '‚ö°', 'Qu√≠mica': '‚öóÔ∏è', 'Biologia': 'üß¨',
        'Geografia': 'üåç', 'Hist√≥ria': 'üèõÔ∏è', 'L√≠ngua Portuguesa': 'üìö', 'Reda√ß√£o': '‚úçÔ∏è'
    }
    emoji = emoji_materia.get(current_subject, 'üìö')
    
    # Sistema universal: usar o template gen√©rico melhorado para QUALQUER t√≥pico
    conceitos_basicos = criar_template_universal(topico_especifico, nivel, current_subject, emoji, pergunta)
    
    # Configurar expans√£o baseada no n√≠vel (m√°ximo 4 n√≠veis)
    expansion_level = 1 if nivel == "B√°sico" else 2 if nivel == "Intermedi√°rio" else 3
    
    return f"""---
markmap:
  pan: true
  zoom: true
  initialExpandLevel: {expansion_level}
  maxWidth: 300
  colorFreezeLevel: 2
  duration: 500
  spacingHorizontal: 80
  spacingVertical: 5
---

{conceitos_basicos}
"""

def criar_template_universal(topico_especifico: str, nivel: str, current_subject: str, emoji: str, pergunta: str) -> str:
    """Cria template universal explicativo para QUALQUER t√≥pico de QUALQUER mat√©ria"""
    
    # Banco de conhecimento espec√≠fico por t√≥pico e mat√©ria
    conteudo_especifico = obter_conteudo_especifico(topico_especifico, current_subject, pergunta)
    
    if nivel == "B√°sico":
        return f"""
# {emoji} {topico_especifico}

## üìö Defini√ß√£o
{conteudo_especifico['definicao']}

## üîç Caracter√≠sticas Principais
{conteudo_especifico['caracteristicas']}

## üí° Como Identificar no ENEM
{conteudo_especifico['enem_basico']}
"""
    elif nivel == "Intermedi√°rio":
        return f"""
# {emoji} {topico_especifico}

## üìö Defini√ß√£o Completa
{conteudo_especifico['definicao']}

## üîç Como Funciona
{conteudo_especifico['funcionamento']}

## üéØ Estrat√©gias de Resolu√ß√£o
{conteudo_especifico['estrategias']}

## üí° No ENEM
{conteudo_especifico['enem_intermediario']}
"""
    else:  # Avan√ßado
        return f"""
# {emoji} {topico_especifico}

## üìö Fundamento Te√≥rico
{conteudo_especifico['definicao']}

## üî¨ An√°lise Detalhada
{conteudo_especifico['analise_detalhada']}

## üéØ Aplica√ß√µes Avan√ßadas
{conteudo_especifico['aplicacoes_avancadas']}

## üí° Dom√≠nio Completo ENEM
{conteudo_especifico['enem_avancado']}
"""

def obter_conteudo_especifico(topico: str, materia: str, pergunta: str) -> dict:
    """Obt√©m conte√∫do espec√≠fico para qualquer t√≥pico de qualquer mat√©ria"""
    
    # Banco de conhecimento espec√≠fico do ENEM
    if materia == 'Matem√°tica':
        return gerar_conteudo_matematica(topico, pergunta)
    elif materia == 'F√≠sica':
        return gerar_conteudo_fisica(topico, pergunta)
    elif materia == 'Qu√≠mica':
        return gerar_conteudo_quimica(topico, pergunta)
    elif materia == 'Biologia':
        return gerar_conteudo_biologia(topico, pergunta)
    elif materia == 'Geografia':
        return gerar_conteudo_geografia(topico, pergunta)
    elif materia == 'Hist√≥ria':
        return gerar_conteudo_historia(topico, pergunta)
    elif materia == 'L√≠ngua Portuguesa':
        return gerar_conteudo_portugues(topico, pergunta)
    elif materia == 'Reda√ß√£o':
        return gerar_conteudo_redacao(topico, pergunta)
    else:
        return gerar_conteudo_generico(topico, materia, pergunta)

def gerar_conteudo_matematica(topico: str, pergunta: str) -> dict:
    """Gera conte√∫do espec√≠fico para t√≥picos de Matem√°tica"""
    
    conteudos = {
        'Equa√ß√µes do 2¬∫ Grau': {
            'definicao': '- Equa√ß√µes da forma $ax^2 + bx + c = 0$, onde $a ‚â† 0$\n- Representam par√°bolas no plano cartesiano\n- Podem ter 0, 1 ou 2 solu√ß√µes reais',
            'caracteristicas': '- Grau m√°ximo 2 (expoente do x)\n- Coeficiente "a" determina concavidade da par√°bola\n- Discriminante $\\Delta = b^2 - 4ac$ indica n√∫mero de ra√≠zes',
            'funcionamento': '### Resolu√ß√£o por Fatora√ß√£o\n- Encontrar dois n√∫meros que multiplicados d√£o "ac" e somados d√£o "b"\n### F√≥rmula de Bhaskara\n- $x = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$\n- Aplic√°vel para qualquer equa√ß√£o do 2¬∫ grau',
            'estrategias': '- Verificar se √© poss√≠vel fatorar antes de usar Bhaskara\n- Calcular discriminante para saber quantas ra√≠zes existem\n- Usar soma e produto das ra√≠zes: $S = -\\frac{b}{a}$ e $P = \\frac{c}{a}$',
            'analise_detalhada': '### Estudo do Discriminante\n- $\\Delta > 0$: duas ra√≠zes reais distintas\n- $\\Delta = 0$: uma raiz real (raiz dupla)\n- $\\Delta < 0$: n√£o h√° ra√≠zes reais\n### An√°lise Gr√°fica\n- V√©rtice da par√°bola: $V = (-\\frac{b}{2a}, -\\frac{\\Delta}{4a})$',
            'aplicacoes_avancadas': '### Problemas de Otimiza√ß√£o\n- M√°ximos e m√≠nimos de fun√ß√µes quadr√°ticas\n- Problemas de √°rea e per√≠metro\n### Inequa√ß√µes do 2¬∫ Grau\n- An√°lise de sinais da fun√ß√£o quadr√°tica',
            'enem_basico': '- Palavras-chave: "quadr√°tica", "par√°bola", "duas solu√ß√µes"\n- Identificar coeficientes a, b e c\n- Saber que tem formato de par√°bola',
            'enem_intermediario': '- Quest√µes sobre √°rea m√°xima/m√≠nima\n- Problemas contextualizados (f√≠sica, economia)\n- Tempo m√©dio: 3-4 minutos por quest√£o',
            'enem_avancado': '- Problemas interdisciplinares complexos\n- An√°lise de fun√ß√µes compostas\n- Demonstra√ß√µes envolvendo propriedades das ra√≠zes'
        },
        'Trigonometria': {
            'definicao': '- Estudo das rela√ß√µes entre √¢ngulos e lados de tri√¢ngulos\n- Fun√ß√µes: seno, cosseno, tangente\n- Base para ondas, oscila√ß√µes e fen√¥menos peri√≥dicos',
            'caracteristicas': '- Seno: cateto oposto / hipotenusa\n- Cosseno: cateto adjacente / hipotenusa\n- Tangente: cateto oposto / cateto adjacente',
            'funcionamento': '### C√≠rculo Trigonom√©trico\n- Raio = 1, centro na origem\n- √Çngulos em radianos: $180¬∞ = \\pi$ rad\n### Identidades Fundamentais\n- $\\sin^2 x + \\cos^2 x = 1$\n- $\\tan x = \\frac{\\sin x}{\\cos x}$',
            'estrategias': '- Memorizar √¢ngulos not√°veis (30¬∞, 45¬∞, 60¬∞)\n- Usar identidades para simplificar express√µes\n- Desenhar tri√¢ngulos para visualizar rela√ß√µes',
            'analise_detalhada': '### Fun√ß√µes Trigonom√©tricas\n- Per√≠odo do seno e cosseno: $2\\pi$\n- Per√≠odo da tangente: $\\pi$\n### Transforma√ß√µes\n- $f(x) = A\\sin(Bx + C) + D$\n- A: amplitude, B: frequ√™ncia, C: fase, D: deslocamento vertical',
            'aplicacoes_avancadas': '### Equa√ß√µes Trigonom√©tricas\n- Resolu√ß√£o de $\\sin x = a$, $\\cos x = b$\n### Lei dos Senos e Cossenos\n- Tri√¢ngulos quaisquer, n√£o apenas ret√¢ngulos',
            'enem_basico': '- Tri√¢ngulo ret√¢ngulo com √¢ngulos 30¬∞, 45¬∞, 60¬∞\n- Calcular lados usando seno, cosseno, tangente\n- Reconhecer situa√ß√µes que envolvem tri√¢ngulos',
            'enem_intermediario': '- Problemas de altura e dist√¢ncia\n- Quest√µes envolvendo rampas e inclina√ß√µes\n- Aplica√ß√µes em f√≠sica (movimento harm√¥nico)',
            'enem_avancado': '- Equa√ß√µes trigonom√©tricas complexas\n- An√°lise de fun√ß√µes peri√≥dicas\n- Demonstra√ß√µes usando identidades'
        },
        'Probabilidade': {
            'definicao': '- Medida da chance de um evento ocorrer\n- Valor entre 0 (imposs√≠vel) e 1 (certo)\n- F√≥rmula b√°sica: $P(E) = \\frac{\\text{casos favor√°veis}}{\\text{casos poss√≠veis}}$',
            'caracteristicas': '- Espa√ßo amostral: conjunto de todos os resultados poss√≠veis\n- Evento: subconjunto do espa√ßo amostral\n- Probabilidade complementar: $P(A^c) = 1 - P(A)$',
            'funcionamento': '### Regra da Adi√ß√£o\n- $P(A \\cup B) = P(A) + P(B) - P(A \\cap B)$\n### Regra da Multiplica√ß√£o\n- Eventos independentes: $P(A \\cap B) = P(A) \\times P(B)$\n- Eventos dependentes: $P(A \\cap B) = P(A) \\times P(B|A)$',
            'estrategias': '- Identificar se eventos s√£o independentes ou dependentes\n- Usar diagramas de √°rvore para eventos sequenciais\n- Calcular probabilidade complementar quando mais f√°cil',
            'analise_detalhada': '### Probabilidade Condicional\n- $P(A|B) = \\frac{P(A \\cap B)}{P(B)}$\n### Teorema de Bayes\n- Atualiza√ß√£o de probabilidades com nova informa√ß√£o',
            'aplicacoes_avancadas': '### Distribui√ß√µes de Probabilidade\n- Distribui√ß√£o binomial\n- Distribui√ß√£o normal (Gaussiana)\n### Teste de Hip√≥teses\n- An√°lise estat√≠stica de dados',
            'enem_basico': '- Problemas com dados, moedas, cartas\n- Calcular probabilidade simples\n- Reconhecer quando usar probabilidade complementar',
            'enem_intermediario': '- Probabilidade condicional em contextos reais\n- Problemas com extra√ß√£o sem reposi√ß√£o\n- Interpreta√ß√£o de gr√°ficos probabil√≠sticos',
            'enem_avancado': '- An√°lise cr√≠tica de pesquisas estat√≠sticas\n- Problemas envolvendo m√∫ltiplas vari√°veis\n- Tomada de decis√£o baseada em probabilidade'
        }
    }
    
    # Se o t√≥pico espec√≠fico n√£o estiver no banco, usar conte√∫do gen√©rico
    if topico in conteudos:
        return conteudos[topico]
    else:
        return gerar_conteudo_generico(topico, 'Matem√°tica', pergunta)

def gerar_conteudo_biologia(topico: str, pergunta: str) -> dict:
    """Gera conte√∫do espec√≠fico para t√≥picos de Biologia"""
    
    conteudos = {
        'Fotoss√≠ntese': {
            'definicao': '- Processo que converte energia luminosa em energia qu√≠mica\n- Plantas produzem glicose usando CO‚ÇÇ e √°gua\n- Libera oxig√™nio como produto secund√°rio\n- Equa√ß√£o: $6CO_2 + 6H_2O \\xrightarrow{luz} C_6H_{12}O_6 + 6O_2$',
            'caracteristicas': '- Ocorre nos cloroplastos das c√©lulas vegetais\n- Pigmento clorofila capta energia luminosa\n- Processo anab√≥lico (constr√≥i mol√©culas complexas)',
            'funcionamento': '### Fase Clara (Fotoqu√≠mica)\n- Ocorre nos tilacoides\n- Capta energia solar e produz ATP e NADPH\n- Fot√≥lise da √°gua libera oxig√™nio\n### Fase Escura (Ciclo de Calvin)\n- Ocorre no estroma do cloroplasto\n- Fixa CO‚ÇÇ em mol√©culas org√¢nicas\n- N√£o depende diretamente da luz',
            'estrategias': '- Memorizar a equa√ß√£o global da fotoss√≠ntese\n- Distinguir entre fase clara e escura\n- Relacionar com respira√ß√£o celular (processo inverso)',
            'analise_detalhada': '### Fotossistemas I e II\n- Complexos proteicos que captam luz\n- Transporte de el√©trons gera ATP\n### Ciclo de Calvin-Benson\n- Fixa√ß√£o: CO‚ÇÇ + RuBP ‚Üí compostos de 3C\n- Redu√ß√£o: NADPH reduz 3-fosfoglicerato\n- Regenera√ß√£o: RuBP √© regenerada',
            'aplicacoes_avancadas': '### Tipos de Fotoss√≠ntese\n- Plantas C3: fixam CO‚ÇÇ diretamente\n- Plantas C4: adapta√ß√£o a climas quentes\n- Plantas CAM: adapta√ß√£o a climas √°ridos\n### Fatores Limitantes\n- Intensidade luminosa, CO‚ÇÇ, temperatura',
            'enem_basico': '- Identificar que plantas fazem fotoss√≠ntese\n- Saber que produz oxig√™nio e glicose\n- Reconhecer import√¢ncia para vida na Terra',
            'enem_intermediario': '- Quest√µes sobre equa√ß√£o qu√≠mica\n- Rela√ß√£o com cadeia alimentar\n- Impacto ambiental e aquecimento global',
            'enem_avancado': '- Efici√™ncia energ√©tica em diferentes biomas\n- Biotecnologia e plantas transg√™nicas\n- An√°lise de experimentos sobre fotoss√≠ntese'
        },
        'Gen√©tica Cl√°ssica': {
            'definicao': '- Estudo da hereditariedade baseado nas leis de Mendel\n- Transmiss√£o de caracter√≠sticas dos pais para filhos\n- Genes dominantes e recessivos determinam fen√≥tipo',
            'caracteristicas': '- Gen√≥tipo: constitui√ß√£o gen√©tica (AA, Aa, aa)\n- Fen√≥tipo: caracter√≠sticas observ√°veis\n- Domin√¢ncia: alelo que se expressa em heterozigose',
            'funcionamento': '### 1¬™ Lei de Mendel (Segrega√ß√£o)\n- Cada caracter√≠stica √© determinada por par de fatores\n- Na forma√ß√£o dos gametas, fatores se separam\n### 2¬™ Lei de Mendel (Segrega√ß√£o Independente)\n- Genes para caracter√≠sticas diferentes segregam independentemente',
            'estrategias': '- Fazer quadrados de Punnett para cruzamentos\n- Identificar padr√µes de heran√ßa (dominante/recessivo)\n- Calcular probabilidades de descend√™ncia',
            'analise_detalhada': '### Tipos de Heran√ßa\n- Domin√¢ncia completa: $A > a$\n- Codomin√¢ncia: ambos alelos se expressam\n- Heran√ßa ligada ao sexo: genes no cromossomo X\n### An√°lise de Pedigree\n- Rastreamento de caracter√≠sticas em fam√≠lias',
            'aplicacoes_avancadas': '### Aconselhamento Gen√©tico\n- Predi√ß√£o de riscos para doen√ßas heredit√°rias\n### Melhoramento Gen√©tico\n- Sele√ß√£o artificial em plantas e animais\n### Testes de Paternidade\n- An√°lise de marcadores gen√©ticos',
            'enem_basico': '- Identificar caracter√≠sticas dominantes e recessivas\n- Fazer cruzamentos simples (monoibridismo)\n- Calcular propor√ß√µes fenot√≠picas b√°sicas',
            'enem_intermediario': '- Problemas envolvendo diibridismo\n- Heran√ßa ligada ao sexo\n- Interpreta√ß√£o de heredogramas simples',
            'enem_avancado': '- An√°lise de heredogramas complexos\n- C√°lculo de probabilidades em m√∫ltiplas gera√ß√µes\n- Aplica√ß√µes em biotecnologia e medicina'
        },
        'Ecologia': {
            'definicao': '- Estudo das rela√ß√µes entre seres vivos e ambiente\n- Fluxo de energia e ciclo de mat√©ria nos ecossistemas\n- Organiza√ß√£o: indiv√≠duo ‚Üí popula√ß√£o ‚Üí comunidade ‚Üí ecossistema',
            'caracteristicas': '- Produtores: fazem fotoss√≠ntese (plantas)\n- Consumidores: dependem de outros organismos\n- Decompositores: reciclam mat√©ria org√¢nica',
            'funcionamento': '### Cadeias e Teias Alimentares\n- Transfer√™ncia de energia entre n√≠veis tr√≥ficos\n- Apenas 10% da energia passa para pr√≥ximo n√≠vel\n### Ciclos Biogeoqu√≠micos\n- Carbono, nitrog√™nio, f√≥sforo, √°gua\n- Reciclagem de elementos qu√≠micos',
            'estrategias': '- Identificar n√≠veis tr√≥ficos em cadeias alimentares\n- Analisar fluxo de energia (sempre unidirecional)\n- Relacionar atividades humanas com impactos ambientais',
            'analise_detalhada': '### Din√¢mica Populacional\n- Crescimento exponencial vs. log√≠stico\n- Fatores limitantes: competi√ß√£o, preda√ß√£o\n### Sucess√£o Ecol√≥gica\n- Sucess√£o prim√°ria e secund√°ria\n- Comunidade cl√≠max',
            'aplicacoes_avancadas': '### Conserva√ß√£o da Biodiversidade\n- Hotspots de biodiversidade\n- Fragmenta√ß√£o de habitats\n### Mudan√ßas Clim√°ticas\n- Efeito estufa e aquecimento global\n- Impactos nos ecossistemas',
            'enem_basico': '- Identificar produtores, consumidores e decompositores\n- Reconhecer impactos da a√ß√£o humana\n- Saber conceitos b√°sicos de polui√ß√£o',
            'enem_intermediario': '- An√°lise de cadeias alimentares complexas\n- Problemas de polui√ß√£o e suas consequ√™ncias\n- Relacionar atividade humana com degrada√ß√£o ambiental',
            'enem_avancado': '- An√°lise cr√≠tica de pol√≠ticas ambientais\n- Sustentabilidade e desenvolvimento\n- Interpreta√ß√£o de dados sobre mudan√ßas clim√°ticas'
        }
    }
    
    if topico in conteudos:
        return conteudos[topico]
    else:
        return gerar_conteudo_generico(topico, 'Biologia', pergunta)

def gerar_conteudo_fisica(topico: str, pergunta: str) -> dict:
    """Gera conte√∫do espec√≠fico para t√≥picos de F√≠sica"""
    
    conteudos = {
        'Cinem√°tica': {
            'definicao': '- Estuda o movimento sem considerar suas causas\n- Grandezas: posi√ß√£o, velocidade, acelera√ß√£o\n- Base para compreender qualquer tipo de movimento',
            'caracteristicas': '- Movimento uniforme: velocidade constante\n- Movimento uniformemente variado: acelera√ß√£o constante\n- Movimento relativo: depende do referencial',
            'funcionamento': '### Movimento Uniforme (MU)\n- $v = \\frac{\\Delta s}{\\Delta t}$ (velocidade constante)\n- $s = s_0 + vt$ (fun√ß√£o hor√°ria)\n### Movimento Uniformemente Variado (MUV)\n- $v = v_0 + at$ (velocidade)\n- $s = s_0 + v_0t + \\frac{1}{2}at^2$ (posi√ß√£o)',
            'estrategias': '- Identificar tipo de movimento pelo enunciado\n- Fazer gr√°ficos de posi√ß√£o e velocidade vs tempo\n- Usar equa√ß√µes de Torricelli quando n√£o h√° tempo',
            'analise_detalhada': '### An√°lise Gr√°fica\n- Gr√°fico s√ót: inclina√ß√£o = velocidade\n- Gr√°fico v√ót: inclina√ß√£o = acelera√ß√£o, √°rea = deslocamento\n### Lan√ßamento de Proj√©teis\n- Movimento parab√≥lico: composi√ß√£o de MU + MUV',
            'aplicacoes_avancadas': '### Movimento Circular\n- Velocidade angular e linear\n- Acelera√ß√£o centr√≠peta\n### Movimento Harm√¥nico Simples\n- Oscila√ß√µes: p√™ndulo, mola',
            'enem_basico': '- Calcular velocidade m√©dia\n- Converter unidades (km/h ‚Üî m/s)\n- Interpretar gr√°ficos simples de movimento',
            'enem_intermediario': '- Problemas de encontro de m√≥veis\n- Lan√ßamento vertical e queda livre\n- An√°lise de gr√°ficos complexos',
            'enem_avancado': '- Movimento de proj√©teis bidimensional\n- An√°lise vetorial de velocidade\n- Problemas contextualizados (tr√¢nsito, esportes)'
        },
        'Din√¢mica': {
            'definicao': '- Estuda as causas do movimento (for√ßas)\n- Leis de Newton explicam rela√ß√£o for√ßa-movimento\n- Base da mec√¢nica cl√°ssica',
            'caracteristicas': '- 1¬™ Lei: In√©rcia (objeto em repouso tende a continuar em repouso)\n- 2¬™ Lei: F = ma (for√ßa √© proporcional √† acelera√ß√£o)\n- 3¬™ Lei: A√ß√£o e rea√ß√£o (for√ßas aparecem aos pares)',
            'funcionamento': '### Aplica√ß√£o das Leis de Newton\n- Identificar todas as for√ßas que atuam\n- Desenhar diagrama de corpo livre\n- Aplicar $\\sum F = ma$\n### Tipos de For√ßa\n- Peso: $P = mg$\n- Atrito: $f = \\mu N$\n- Normal: perpendicular √† superf√≠cie',
            'estrategias': '- Sempre desenhar diagrama de for√ßas\n- Escolher sistema de coordenadas adequado\n- Aplicar as leis de Newton para cada dire√ß√£o',
            'analise_detalhada': '### For√ßas de Atrito\n- Est√°tico: impede movimento\n- Cin√©tico: op√µe-se ao movimento\n### For√ßa Centr√≠peta\n- $F_c = \\frac{mv^2}{r}$ (movimento circular)',
            'aplicacoes_avancadas': '### Sistemas de Part√≠culas\n- M√∫ltiplos corpos conectados\n- Polias e planos inclinados\n### Aplica√ß√µes em Engenharia\n- Projeto de estruturas\n- Din√¢mica veicular',
            'enem_basico': '- Identificar for√ßas em situa√ß√µes simples\n- Aplicar F = ma em problemas diretos\n- Reconhecer pares a√ß√£o-rea√ß√£o',
            'enem_intermediario': '- Problemas com atrito e planos inclinados\n- Sistemas de polias\n- Movimento circular uniforme',
            'enem_avancado': '- An√°lise de sistemas complexos\n- Aplica√ß√µes em tecnologia e engenharia\n- Problemas interdisciplinares'
        }
    }
    
    if topico in conteudos:
        return conteudos[topico]
    else:
        return gerar_conteudo_generico(topico, 'F√≠sica', pergunta)

def gerar_conteudo_quimica(topico: str, pergunta: str) -> dict:
    """Gera conte√∫do espec√≠fico para t√≥picos de Qu√≠mica"""
    
    conteudos = {
        '√Åcidos e Bases': {
            'definicao': '- √Åcidos: subst√¢ncias que liberam H‚Å∫ em solu√ß√£o aquosa\n- Bases: subst√¢ncias que liberam OH‚Åª em solu√ß√£o aquosa\n- pH mede acidez: 0-7 √°cido, 7 neutro, 7-14 b√°sico',
            'caracteristicas': '- √Åcidos: sabor azedo, conduzem eletricidade, corrosivos\n- Bases: sabor amargo, escorregadias, tamb√©m conduzem eletricidade\n- Indicadores: papel tornassol, fenolftale√≠na',
            'funcionamento': '### Teoria de Arrhenius\n- √Åcido: $HCl \\rightarrow H^+ + Cl^-$\n- Base: $NaOH \\rightarrow Na^+ + OH^-$\n### Escala de pH\n- $pH = -\\log[H^+]$\n- $pOH = -\\log[OH^-]$\n- $pH + pOH = 14$ (a 25¬∞C)',
            'estrategias': '- Memorizar f√≥rmulas de √°cidos e bases comuns\n- Usar escala de pH para classificar subst√¢ncias\n- Balancear rea√ß√µes de neutraliza√ß√£o',
            'analise_detalhada': '### For√ßa de √Åcidos e Bases\n- √Åcidos fortes: HCl, HNO‚ÇÉ, H‚ÇÇSO‚ÇÑ\n- Bases fortes: NaOH, KOH, Ca(OH)‚ÇÇ\n### Constantes de Ioniza√ß√£o\n- $K_a$ para √°cidos, $K_b$ para bases',
            'aplicacoes_avancadas': '### Solu√ß√µes Tamp√£o\n- Resistem a mudan√ßas de pH\n- Importantes em sistemas biol√≥gicos\n### Titula√ß√£o\n- Determina√ß√£o de concentra√ß√£o',
            'enem_basico': '- Identificar subst√¢ncias √°cidas e b√°sicas do cotidiano\n- Usar escala de pH para classificar\n- Reconhecer rea√ß√µes de neutraliza√ß√£o',
            'enem_intermediario': '- C√°lculos envolvendo pH e pOH\n- Problemas de neutraliza√ß√£o\n- Aplica√ß√µes industriais e ambientais',
            'enem_avancado': '- An√°lise de sistemas tamp√£o\n- C√°lculos de constantes de equil√≠brio\n- Interpreta√ß√£o de curvas de titula√ß√£o'
        }
    }
    
    if topico in conteudos:
        return conteudos[topico]
    else:
        return gerar_conteudo_generico(topico, 'Qu√≠mica', pergunta)

def gerar_conteudo_geografia(topico: str, pergunta: str) -> dict:
    """Gera conte√∫do espec√≠fico para t√≥picos de Geografia"""
    
    conteudos = {
        'Climatologia': {
            'definicao': '- Estuda os fen√¥menos atmosf√©ricos em longo prazo\n- Diferen√ßa entre tempo (moment√¢neo) e clima (padr√£o)\n- Fatores: latitude, altitude, maritimidade, correntes',
            'caracteristicas': '- Elementos: temperatura, umidade, press√£o, ventos\n- Fatores: latitude, altitude, maritimidade, relevo\n- Tipos clim√°ticos: equatorial, tropical, temperado, polar',
            'funcionamento': '### Circula√ß√£o Atmosf√©rica\n- C√©lulas de Hadley, Ferrel e Polar\n- Ventos al√≠sios, contra-al√≠sios\n### Massas de Ar\n- Massas quentes e frias\n- Frentes frias e quentes',
            'estrategias': '- Relacionar latitude com temperatura\n- Associar altitude com temperatura (gradiente t√©rmico)\n- Analisar climogramas',
            'analise_detalhada': '### Fen√¥menos Clim√°ticos\n- El Ni√±o e La Ni√±a\n- Mon√ß√µes\n- Furac√µes e ciclones\n### Mudan√ßas Clim√°ticas\n- Aquecimento global\n- Efeito estufa intensificado',
            'aplicacoes_avancadas': '### Impactos Socioecon√¥micos\n- Agricultura e clima\n- Migra√ß√£o clim√°tica\n### Pol√≠ticas Ambientais\n- Protocolo de Kyoto\n- Acordo de Paris',
            'enem_basico': '- Identificar tipos clim√°ticos do Brasil\n- Relacionar clima com vegeta√ß√£o\n- Reconhecer fatores que influenciam o clima',
            'enem_intermediario': '- Interpretar climogramas\n- Analisar fen√¥menos como El Ni√±o\n- Relacionar clima com atividades humanas',
            'enem_avancado': '- An√°lise cr√≠tica das mudan√ßas clim√°ticas\n- Impactos socioecon√¥micos do clima\n- Pol√≠ticas p√∫blicas e acordos internacionais'
        }
    }
    
    if topico in conteudos:
        return conteudos[topico]
    else:
        return gerar_conteudo_generico(topico, 'Geografia', pergunta)

def gerar_conteudo_historia(topico: str, pergunta: str) -> dict:
    """Gera conte√∫do espec√≠fico para t√≥picos de Hist√≥ria"""
    
    conteudos = {
        'Guerra Fria': {
            'definicao': '- Conflito ideol√≥gico entre EUA (capitalismo) e URSS (socialismo)\n- Per√≠odo: 1947-1991\n- Guerra "fria" = sem confronto militar direto',
            'caracteristicas': '- Bipolariza√ß√£o mundial\n- Corrida armamentista nuclear\n- Disputas por zonas de influ√™ncia',
            'funcionamento': '### Principais Eventos\n- Plano Marshall (reconstru√ß√£o da Europa)\n- Constru√ß√£o e queda do Muro de Berlim\n- Crise dos M√≠sseis de Cuba\n### Conflitos Indiretos\n- Guerra da Coreia, Vietn√£\n- Revolu√ß√£o Cubana',
            'estrategias': '- Relacionar eventos √† disputa EUA vs URSS\n- Identificar caracter√≠sticas de cada bloco\n- Analisar consequ√™ncias para pa√≠ses perif√©ricos',
            'analise_detalhada': '### Doutrinas e Estrat√©gias\n- Doutrina Truman (conten√ß√£o do comunismo)\n- Coexist√™ncia pac√≠fica\n- D√©tente (distens√£o)\n### Fim da Guerra Fria\n- Glasnost e Perestroika\n- Queda do Muro de Berlim (1989)',
            'aplicacoes_avancadas': '### Legado\n- Unipolaridade americana\n- Nova ordem mundial\n### Compara√ß√µes\n- Tens√µes atuais EUA-China/R√∫ssia',
            'enem_basico': '- Identificar os dois blocos antag√¥nicos\n- Reconhecer principais eventos\n- Saber per√≠odo de dura√ß√£o',
            'enem_intermediario': '- Analisar impactos na Am√©rica Latina\n- Relacionar com ditaduras militares no Brasil\n- Compreender conceito de bipolaridade',
            'enem_avancado': '- An√°lise geopol√≠tica complexa\n- Compara√ß√£o com tens√µes contempor√¢neas\n- Interpreta√ß√£o de documentos hist√≥ricos'
        }
    }
    
    if topico in conteudos:
        return conteudos[topico]
    else:
        return gerar_conteudo_generico(topico, 'Hist√≥ria', pergunta)

def gerar_conteudo_portugues(topico: str, pergunta: str) -> dict:
    """Gera conte√∫do espec√≠fico para t√≥picos de L√≠ngua Portuguesa"""
    
    conteudos = {
        'Figuras de Linguagem': {
            'definicao': '- Recursos expressivos que conferem maior expressividade ao texto\n- Desviam da linguagem literal para criar efeitos\n- Dividem-se em: som, palavra, constru√ß√£o, pensamento',
            'caracteristicas': '- Met√°fora: compara√ß√£o impl√≠cita\n- Meton√≠mia: substitui√ß√£o por proximidade\n- Hip√©rbole: exagero intencional',
            'funcionamento': '### Figuras de Palavra\n- Met√°fora: "Vida √© sonho"\n- Meton√≠mia: "Ler Machado" (obras de Machado)\n### Figuras de Constru√ß√£o\n- An√°fora: repeti√ß√£o no in√≠cio\n- Hip√©rbato: invers√£o da ordem',
            'estrategias': '- Identificar o efeito pretendido\n- Distinguir met√°fora de compara√ß√£o\n- Reconhecer figuras em diferentes g√™neros textuais',
            'analise_detalhada': '### Classifica√ß√£o Completa\n- Som: alitera√ß√£o, asson√¢ncia\n- Palavra: met√°fora, meton√≠mia, catacrese\n- Constru√ß√£o: elipse, zeugma, pleonasmo\n- Pensamento: ironia, ant√≠tese, paradoxo',
            'aplicacoes_avancadas': '### An√°lise Liter√°ria\n- Figuras na poesia rom√¢ntica\n- Simbolismo e suas met√°foras\n### Aplica√ß√£o em Textos\n- Reda√ß√£o criativa\n- An√°lise de discursos pol√≠ticos',
            'enem_basico': '- Identificar met√°foras simples\n- Reconhecer hip√©rboles em textos\n- Distinguir linguagem literal de figurada',
            'enem_intermediario': '- Analisar efeitos expressivos das figuras\n- Identificar figuras em textos liter√°rios\n- Relacionar figuras com inten√ß√£o comunicativa',
            'enem_avancado': '- An√°lise estil√≠stica complexa\n- Interpreta√ß√£o de textos multissemi√≥ticos\n- Compara√ß√£o entre diferentes estilos liter√°rios'
        }
    }
    
    if topico in conteudos:
        return conteudos[topico]
    else:
        return gerar_conteudo_generico(topico, 'L√≠ngua Portuguesa', pergunta)

def gerar_conteudo_redacao(topico: str, pergunta: str) -> dict:
    """Gera conte√∫do espec√≠fico para t√≥picos de Reda√ß√£o"""
    
    conteudos = {
        'Disserta√ß√£o Argumentativa': {
            'definicao': '- Texto que defende um ponto de vista com argumentos\n- Estrutura: introdu√ß√£o, desenvolvimento, conclus√£o\n- Objetivo: convencer o leitor sobre uma tese',
            'caracteristicas': '- Linguagem formal e impessoal\n- Argumentos consistentes e bem fundamentados\n- Proposta de interven√ß√£o detalhada',
            'funcionamento': '### Introdu√ß√£o\n- Contextualiza√ß√£o do tema\n- Apresenta√ß√£o da tese\n### Desenvolvimento\n- Argumentos com fundamenta√ß√£o\n- Exemplos e dados\n### Conclus√£o\n- Retomada da tese\n- Proposta de interven√ß√£o',
            'estrategias': '- Ler e interpretar bem o tema\n- Fazer esquema antes de escrever\n- Usar conectivos para articular ideias\n- Propor interven√ß√£o vi√°vel e detalhada',
            'analise_detalhada': '### Compet√™ncias ENEM\n1. Norma padr√£o da l√≠ngua\n2. Compreens√£o do tema\n3. Sele√ß√£o de argumentos\n4. Coes√£o e coer√™ncia\n5. Proposta de interven√ß√£o\n### Tipos de Argumento\n- Autoridade, exemplifica√ß√£o, causa/consequ√™ncia',
            'aplicacoes_avancadas': '### Estrat√©gias Argumentativas\n- Contra-argumenta√ß√£o\n- Concess√£o\n### Repert√≥rio Sociocultural\n- Cita√ß√µes, dados, refer√™ncias\n- Interdisciplinaridade',
            'enem_basico': '- Compreender a estrutura b√°sica\n- Identificar tema e tese\n- Escrever par√°grafos organizados',
            'enem_intermediario': '- Desenvolver argumentos consistentes\n- Usar repert√≥rio sociocultural\n- Articular bem as ideias',
            'enem_avancado': '- Proposta de interven√ß√£o detalhada e vi√°vel\n- Argumenta√ß√£o sofisticada\n- Excel√™ncia em todas as compet√™ncias'
        }
    }
    
    if topico in conteudos:
        return conteudos[topico]
    else:
        return gerar_conteudo_generico(topico, 'Reda√ß√£o', pergunta)

def gerar_conteudo_generico(topico: str, materia: str, pergunta: str) -> dict:
    """Gera conte√∫do gen√©rico para qualquer t√≥pico n√£o mapeado especificamente"""
    
    return {
        'definicao': f'- Conceito fundamental de {materia} relacionado a {topico.lower()}\n- T√≥pico importante para o ENEM\n- Base para compreens√£o de temas mais avan√ßados',
        'caracteristicas': f'- Propriedades espec√≠ficas de {topico.lower()}\n- Aplica√ß√µes pr√°ticas no cotidiano\n- Rela√ß√£o com outros conceitos da mat√©ria',
        'funcionamento': f'### Processo Principal\n- Etapas fundamentais de {topico.lower()}\n- Mecanismos envolvidos\n### Aplica√ß√µes\n- Uso em situa√ß√µes reais\n- Exemplos pr√°ticos',
        'estrategias': f'- Identificar {topico.lower()} em quest√µes\n- Aplicar conceitos b√°sicos\n- Relacionar com conhecimentos pr√©vios',
        'analise_detalhada': f'### Aspectos Avan√ßados\n- An√°lise aprofundada de {topico.lower()}\n- Rela√ß√µes complexas\n### Varia√ß√µes\n- Diferentes contextos de aplica√ß√£o',
        'aplicacoes_avancadas': f'### Aplica√ß√µes Complexas\n- Uso em problemas multidisciplinares\n- Conex√µes com tecnologia atual\n### Pesquisa\n- Desenvolvimentos recentes',
        'enem_basico': f'- Reconhecer {topico.lower()} em contextos simples\n- Aplicar defini√ß√µes b√°sicas\n- Identificar caracter√≠sticas principais',
        'enem_intermediario': f'- Resolver problemas envolvendo {topico.lower()}\n- Analisar aplica√ß√µes pr√°ticas\n- Fazer conex√µes entre conceitos',
        'enem_avancado': f'- An√°lise cr√≠tica de situa√ß√µes complexas\n- Aplica√ß√£o em contextos interdisciplinares\n- Avalia√ß√£o de implica√ß√µes sociais/ambientais'
    }

def display_mapa_mental_wrapper():
    """Wrapper para compatibilidade com o app principal"""
    if 'gerar_mapa_mental' not in st.session_state:
        st.session_state.gerar_mapa_mental = False
    display_mapa_mental_markmap()

# Adicionar a fun√ß√£o analisar_markdown_stats que estava faltando

def analisar_markdown_stats(markdown: str) -> dict:
    """Analisa estat√≠sticas do mapa mental gerado"""
    if not markdown:
        return {'conceitos': 0, 'conexoes': 0, 'niveis': 0, 'formulas': 0}
    
    linhas = markdown.split('\n')
    
    # Contar conceitos (linhas que come√ßam com # ou -)
    conceitos = 0
    for linha in linhas:
        linha_clean = linha.strip()
        if (linha_clean.startswith('#') or linha_clean.startswith('-')) and len(linha_clean) > 1:
            conceitos += 1
    
    # Contar conex√µes (estimativa baseada em linhas com conte√∫do)
    conexoes = max(0, conceitos - 1)  # Conceitos conectados
    
    # Contar n√≠veis hier√°rquicos (m√°ximo de # consecutivos)
    niveis = 0
    for linha in linhas:
        linha_clean = linha.strip()
        if linha_clean.startswith('#'):
            nivel_atual = 0
            for char in linha_clean:
                if char == '#':
                    nivel_atual += 1
                else:
                    break
            niveis = max(niveis, nivel_atual)
    
    # Contar f√≥rmulas (texto entre $)
    formulas = markdown.count('$') // 2  # Cada f√≥rmula tem $ de abertura e fechamento
    
    return {
        'conceitos': conceitos,
        'conexoes': conexoes,
        'niveis': niveis,
        'formulas': formulas
    }

if __name__ == "__main__":
    try:
        st.set_page_config(
            page_title="Mapa Mental Markmap",
            page_icon="üß†",
            layout="wide"
        )
    except st.errors.StreamlitAPIException:
        pass
    display_mapa_mental_markmap() 